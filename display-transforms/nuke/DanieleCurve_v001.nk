#! /Applications/Nuke13.0v3/Nuke13.0v3.app/Contents/MacOS/libnuke-13.0.3.dylib -nx
version 13.0 v3
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="117" w="2560" h="1470" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1897" stretch="1"/>
            <splitter orientation="2">
                <split size="851"/>
                <dock id="" activePageId="Viewer.2">
                    <page id="Viewer.1"/>
                    <page id="Viewer.2"/>
                </dock>
                <split size="599"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/DanieleCurve_v001.nk
 frame 76
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 OCIO_config custom
 customOCIOConfigPath /Users/afry/Documents/GitHub/OpenColorIO-Configs/aces_1.2/config.ocio
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
Reformat {
 inputs 0
 format "512 512 0 0 512 512 1 square_512"
 name Reformat1
 xpos 768
 ypos -192
}
set N230dc800 [stack 0]
Ramp {
 p0 {0 0}
 p1 {{width-1} 0}
 name Ramp1
 xpos 667
 ypos -129
}
Dot {
 name Dot1
 xpos 807
 ypos -65
}
set N624cb400 [stack 0]
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline2
 xpos 600
 ypos 1
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
push $N624cb400
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/danieleCompressionCurve.blink
 recompileCount 75
 KernelDescription "2 \"danielleCompressionCurveKernel\" iterate pixelWise 76140efdc745bcf213e05de27dc927c38901fb4128e7b61f94c588ac8e67702f 2 \"src\" Read Point \"dst\" Write Point 6 \"inverse\" Bool 1 AA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 6 \"inverse\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 0"
 kernelSource "\nkernel danielleCompressionCurveKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n   \n\n    // Tonescale select\n    bool inverse;\n    // OpenDRT tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n    // constants\n  void define()\n  \{\n\n  \}\n\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially retured -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // pow(  x/ (x+s_1) , g ) * m;\n\n\n      return new_x;\n  \}\n\n\n  void init()\n  \{\n    \n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 mappedVals;\n    if(!inverse)\n    \{\n        mappedVals.x = forwardDanieleCompressionCurve(source.x);\n        mappedVals.y = forwardDanieleCompressionCurve(source.y);\n        mappedVals.z = forwardDanieleCompressionCurve(source.z);\n    \}\n    else\n    \{\n        mappedVals.x = inverseDanieleCompressionCurve(source.x);\n        mappedVals.y = inverseDanieleCompressionCurve(source.y);\n        mappedVals.z = inverseDanieleCompressionCurve(source.z);\n    \}\n\n\n    float3 dstRGB;\n\n    dst() = float4(mappedVals.x, mappedVals.y, mappedVals.z, source.w); \n  \}\n\};\n"
 useGPUIfAvailable false
 rebuild ""
 danielleCompressionCurveKernel_n 100
 danielleCompressionCurveKernel_nr 100
 danielleCompressionCurveKernel_g 1.11
 danielleCompressionCurveKernel_w 1
 danielleCompressionCurveKernel_t_1 0.01
 rebuild_finalise ""
 name BlinkScript1
 xpos 773
 ypos -32
}
set N230de000 [stack 0]
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline3
 xpos 601
 ypos 44
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
push $N230dc800
Expression {
 temp_name0 L_min
 temp_expr0 -12
 temp_name1 L_max
 temp_expr1 12
 channel0 rgba
 expr0 (2**((x/width)*(L_max-L_min)+L_min)*0.18)
 name Expression1
 xpos 768
 ypos -130
}
push $N230de000
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/danieleCompressionCurve.blink
 recompileCount 90
 KernelDescription "2 \"danielleCompressionCurveKernel\" iterate pixelWise 76140efdc745bcf213e05de27dc927c38901fb4128e7b61f94c588ac8e67702f 2 \"src\" Read Point \"dst\" Write Point 6 \"inverse\" Bool 1 AA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 6 \"inverse\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 0"
 kernelSource "\nkernel danielleCompressionCurveKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n   \n\n    // Tonescale select\n    bool inverse;\n    // OpenDRT tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n    // constants\n  void define()\n  \{\n\n  \}\n\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially retured -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // pow(  x/ (x+s_1) , g ) * m;\n\n\n      return new_x;\n  \}\n\n\n  void init()\n  \{\n    \n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 mappedVals;\n    if(!inverse)\n    \{\n        mappedVals.x = forwardDanieleCompressionCurve(source.x);\n        mappedVals.y = forwardDanieleCompressionCurve(source.y);\n        mappedVals.z = forwardDanieleCompressionCurve(source.z);\n    \}\n    else\n    \{\n        mappedVals.x = inverseDanieleCompressionCurve(source.x);\n        mappedVals.y = inverseDanieleCompressionCurve(source.y);\n        mappedVals.z = inverseDanieleCompressionCurve(source.z);\n    \}\n\n\n    float3 dstRGB;\n\n    dst() = float4(mappedVals.x, mappedVals.y, mappedVals.z, source.w); \n  \}\n\};\n"
 useGPUIfAvailable false
 rebuild ""
 danielleCompressionCurveKernel_inverse true
 danielleCompressionCurveKernel_n 100
 danielleCompressionCurveKernel_nr 100
 danielleCompressionCurveKernel_g 1.11
 danielleCompressionCurveKernel_w 1
 danielleCompressionCurveKernel_t_1 0.01
 rebuild_finalise ""
 name BlinkScript2
 xpos 773
}
set N230ddc00 [stack 0]
Colorspace {
 primary_in ACES
 colorspace_out sRGB
 primary_out DCI-P3
 name Colorspace1
 xpos 919
 ypos 88
}
Viewer {
 inputs 0
 frame 76
 frame_range 1-100
 gl_buffer_depth half-float
 viewerProcess None
 name Viewer1
 xpos -40
 ypos -9
}
push $N230ddc00
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline1
 xpos 599
 ypos 91
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
Expression {
 inputs 0
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline4
 xpos 1260
 ypos -8
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
Viewer {
 inputs 0
 frame 76
 frame_range 1-77
 colour_sample_bbox {0.0341796875 -0.1083984375 0.03515625 -0.107421875}
 gl_buffer_depth half-float
 viewerProcess None
 name Viewer2
 xpos 722
 ypos 165
}
