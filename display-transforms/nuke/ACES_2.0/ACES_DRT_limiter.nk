set cut_paste_input [stack 0]
version 13.2 v8
push $cut_paste_input
Group {
 name ACESDRT_EncodingLimiter1
 selected true
 xpos -5
 ypos -78
 addUserKnob {20 User}
 addUserKnob {26 _1 l "Limiting Gamut"}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Limiting Peak Luminance" l "Limiting Peak Luminance" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Limiting Peak Luminance"}
 addUserKnob {4 limiting_whitepoint l Whitepoint M {"Illuminant E" ACES D65 DCI Custom ""}}
 limiting_whitepoint D65
 addUserKnob {4 limiting_primaries l "" t "the limiting primaries of the gamut to which to compress to" -STARTLINE M {XYZ AP0-ACES AP1-ACES "Rec.709  (sRGB)" Rec.2020 P3 Custom ""}}
 limiting_primaries "Rec.709  (sRGB)"
 addUserKnob {20 Custom l "Custom Gamut" n 1}
 Custom 0
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Custom Red" l "Custom Red" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Custom Red"}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Custom Green" l "Custom Green" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Custom Green"}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Custom Blue" l "Custom Blue" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Custom Blue"}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Custom White" l "Custom White" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Custom White"}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 _2 l Encoding}
 addUserKnob {4 encoding_whitepoint l Whitepoint -STARTLINE M {"Illuminant E" ACES D65 DCI Custom ""}}
 encoding_whitepoint D65
 addUserKnob {4 encoding_primaries l "" -STARTLINE M {XYZ AP0-ACES AP1-ACES "Rec.709  (sRGB)" Rec.2020 P3 Custom "" "" "" ""}}
 encoding_primaries "Rec.709  (sRGB)"
 addUserKnob {26 ""}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_Clamp to limiting space" l "Clamp to limiting space" T "BlinkScript1.ACES_DRT_Encoding_Kernel_Clamp to limiting space"}
 addUserKnob {41 "ACES_DRT_Encoding_Kernel_White point scale" l "White point scale" T "BlinkScript1.ACES_DRT_Encoding_Kernel_White point scale"}
 addUserKnob {26 ""}
 addUserKnob {41 kernelSourceFile l "Kernel File" T BlinkScript1.kernelSourceFile}
 addUserKnob {41 reloadKernelSourceFile l Load T BlinkScript1.reloadKernelSourceFile}
 addUserKnob {41 recompile l Recompile -STARTLINE T BlinkScript1.recompile}
}
 Input {
  inputs 0
  name Input1
  xpos 130
  ypos -203
 }
 Constant {
  inputs 0
  channels rgb
  format "256 256 0 0 256 256 1 square_256"
  name Constant1
  xpos 7
  ypos -187
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input]"}}
  name Switch1
  xpos 130
  ypos -163
 }
 BlinkScript {
  kernelSourceFile /mnt/scratch/kwheatle/git/output-transforms-dev/display-transforms/nuke/ACES_2.0/ACES_DRT_limiter.blink
  recompileCount 220
  ProgramGroup 1
  KernelDescription "2 \"ACES_DRT_Encoding_Kernel\" iterate pixelWise 8c9754a6d3be73cf98923bbca7ad548a8bb6fbb87834c1c4a533614420038c87 2 \"src\" Read Point \"dst\" Write Point 12 \"Direction\" Bool 1 AA== \"Limiting Primaries\" Int 1 AwAAAA== \"Encoding Primaries\" Int 1 AwAAAA== \"Limiting Whitepoint\" Int 1 AgAAAA== \"Encoding Whitepoint\" Int 1 AgAAAA== \"Limiting Peak Luminance\" Float 1 AADIQg== \"Clamp to limiting space\" Bool 1 AQ== \"White point scale\" Bool 1 AQ== \"Custom Red\" Float 2 CtcjP8P1qD4= \"Custom Green\" Float 2 mpmZPpqZGT8= \"Custom Blue\" Float 2 mpkZPo/CdT0= \"Custom White\" Float 2 NxqgPrByqD4= 12 \"invert\" 1 1 \"limitingPrimaries\" 1 1 \"encodingPrimaries\" 1 1 \"limitingWhite\" 1 1 \"encodingWhite\" 1 1 \"limitingLuminance\" 1 1 \"limitClamp\" 1 1 \"whitepoint_scale\" 1 1 \"custom_red\" 2 1 \"custom_green\" 2 1 \"custom_blue\" 2 1 \"custom_white\" 2 1 5 \"XYZ_to_limiting_RGB\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"limiting_RGB_to_XYZ\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"white_scaling_factor\" Float 1 1 AAAAAA== \"white_scaled\" Bool 1 1 AA== \"has_effect\" Bool 1 1 AA=="
  kernelSource "kernel ACES_DRT_Encoding_Kernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite>                            dst; // the output image\n\nparam:\n  //\n  // Input Parameters\n  //\n#define FORWARDS false\n#define INVERSE  true\n  bool invert;\n\n  // Primaries of the Input Image\n  // 0: XYZ\n  // 1: AP0-ACES\n  // 2: AP1-ACES\n  // 3: sRGB/Rec.709-D65\n  // 4: Rec.2020-D65\n  // 5: P3-D65\n  // 6: Custom\n  int limitingPrimaries;\n  int encodingPrimaries;\n\n  // White point of the limiting gamut\n  // effectively the \"creative white\"\n  // 0: Illuminant E\n  // 1: ACES white\n  // 2: D65\n  // 3: DCI\n  // 4: Custom\n  // Could add others, or user white point\n  int limitingWhite;\n  int encodingWhite;\n\n  // Reference Luminance in Cd/sqm\n  float limitingLuminance;\n\n  bool limitClamp;\n  bool whitepoint_scale;\n\n  float2 custom_red;\n  float2 custom_green;\n  float2 custom_blue;\n  float2 custom_white;\n\nlocal:\n  float3x3 XYZ_to_limiting_RGB;\n  float3x3 limiting_RGB_to_XYZ;\n\n  float white_scaling_factor;\n  bool white_scaled;\n  bool has_effect;\n\n  void define()\n  \{\n    defineParam(invert, \"Direction\", false);\n    defineParam(limitingLuminance, \"Limiting Peak Luminance\", 100.0f);\n    defineParam(limitingPrimaries, \"Limiting Primaries\", 3);\n    defineParam(limitingWhite, \"Limiting Whitepoint\", 2);\n    defineParam(encodingPrimaries, \"Encoding Primaries\", 3);\n    defineParam(encodingWhite, \"Encoding Whitepoint\", 2);\n    defineParam(limitClamp, \"Clamp to limiting space\", true);\n    defineParam(whitepoint_scale, \"White point scale\", true);\n    defineParam(custom_red, \"Custom Red\", float2(0.6400f, 0.3300f));\n    defineParam(custom_green, \"Custom Green\", float2(0.3000f, 0.6000f));\n    defineParam(custom_blue, \"Custom Blue\", float2(0.1500f, 0.0600f));\n    defineParam(custom_white, \"Custom White\", float2(0.3127f, 0.3290f));\n  \}\n\n  float3x3 RGBPrimsToXYZMatrix(float2 primaries\[3], float2 wxy, float Y, bool direction)\n  \{\n    // # given r g b chromaticities and whitepoint, convert RGB colors to XYZ\n    // # based on CtlColorSpace.cpp from the CTL source code : 77\n    // # param: xy - dict of chromaticity xy coordinates: rxy: float2(x, y) etc\n    // # param: Y - luminance of \"white\" - defaults to 1.0\n    // # param: inverse - calculate XYZ to RGB instead\n\n    const float2 r = primaries\[0];\n    const float2 g = primaries\[1];\n    const float2 b = primaries\[2];\n    const float2 w = wxy;\n\n    const float X = w.x * Y / w.y;\n    const float Z = (1 - w.x - w.y) * Y / w.y;\n\n    // # Scale factors for matrix rows\n    const float d = r.x * (b.y - g.y) + b.x * (g.y - r.y) + g.x * (r.y - b.y);\n\n    // clang-format off\n    float Sr =    (X * (b.y - g.y) -      \\\n            g.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) +       \\\n            b.x * (Y * (g.y - 1.0f) + \\\n            g.y * (X + Z))) / d ;\n\n    float Sg =    (X * (r.y - b.y) +      \\\n            r.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) -        \\\n            b.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    float Sb =    (X * (g.y - r.y) -      \\\n            r.x * (Y * (g.y - 1.0f) +  \\\n            g.y * (X + Z)) +        \\\n            g.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    // # Assemble the matrix\n    float Mdata\[] =\n    \{\n      Sr * r.x, Sg * g.x, Sb * b.x,\n      Sr * r.y, Sg * g.y, Sb * b.y,\n      Sr * (1.0f - r.x - r.y), Sg * (1.0f - g.x - g.y), Sb * (1.0f - b.x - b.y),\n    \};\n    // clang-format on\n\n    float3x3 newMatrix;\n    newMatrix.setArray(Mdata);\n\n    // return forward or inverse matrix\n    if (direction == FORWARDS)\n    \{\n      return newMatrix;\n    \}\n    else if (direction == INVERSE)\n    \{\n      // create inverse matrix\n      float3x3 newMatrixInverse = newMatrix.invert();\n      return newMatrixInverse;\n    \}\n  \}\n\n  float2 get_whitepoint(int which_white, float2 custom)\n  \{\n    if (which_white == 1)\n    \{\n      return float2(0.32168f, 0.33767f);\n    \}\n    else if (which_white == 2)\n    \{\n      return float2(0.3127f, 0.3290f);\n    \}\n    else if (which_white == 3)\n    \{\n      return float2(0.3140f, 0.3510f);\n    \}\n    else if (which_white == 4)\n    \{\n      return custom;\n    \}\n\n    // Case 0 and default\n    return float2(1.0f / 3.0f, 1.0f / 3.0f);\n  \}\n\n  void get_primaries(const int primaries, const float2 custom\[3], float2 primaries_out\[3])\n  \{\n    if (primaries == 1)\n    \{\n      primaries_out\[0] = float2(0.7347f, 0.2653f);\n      primaries_out\[1] = float2(0.0000f, 1.0000f);\n      primaries_out\[2] = float2(0.0001f, -0.0770f);\n    \}\n    else if (primaries == 2)\n    \{\n      primaries_out\[0] = float2(0.7130f, 0.2930f);\n      primaries_out\[1] = float2(0.1650f, 0.8300f);\n      primaries_out\[2] = float2(0.1280f, 0.0440f);\n    \}\n    else if (primaries == 3)\n    \{\n      primaries_out\[0] = float2(0.6400f, 0.3300f);\n      primaries_out\[1] = float2(0.3000f, 0.6000f);\n      primaries_out\[2] = float2(0.1500f, 0.0600f);\n    \}\n    else if (primaries == 4)\n    \{\n      primaries_out\[0] = float2(0.7080f, 0.2920f);\n      primaries_out\[1] = float2(0.1700f, 0.7970f);\n      primaries_out\[2] = float2(0.1310f, 0.0460f);\n    \}\n    else if (primaries == 5)\n    \{\n      primaries_out\[0] = float2(0.6800f, 0.3200f);\n      primaries_out\[1] = float2(0.2650f, 0.6900f);\n      primaries_out\[2] = float2(0.1500f, 0.0600f);\n    \}\n    else if (primaries == 6)\n    \{\n      primaries_out\[0] = custom\[0];\n      primaries_out\[1] = custom\[1];\n      primaries_out\[2] = custom\[1];\n    \}\n    else\n    \{\n      // Case 0 and default\n      primaries_out\[0] = float2(1.0f, 0.0f);\n      primaries_out\[1] = float2(0.0f, 1.0f);\n      primaries_out\[2] = float2(0.0f, 0.0f);\n    \}\n \}\n\n  void init()\n  \{\n    float2 temp_primaries\[3];\n    const float2 custom_primaries\[3] =\n    \{\n      custom_red, custom_green, custom_blue\n    \};\n\n    get_primaries(limitingPrimaries, custom_primaries, temp_primaries);\n    const float2 limiting_whitepoint = get_whitepoint(limitingWhite, custom_white);\n    limiting_RGB_to_XYZ = RGBPrimsToXYZMatrix(temp_primaries, limiting_whitepoint, 1.0f, FORWARDS);\n    XYZ_to_limiting_RGB = limiting_RGB_to_XYZ.invert();\n\n    get_primaries(encodingPrimaries, custom_primaries, temp_primaries);\n    const float2   encoding_whitepoint = get_whitepoint(encodingWhite, custom_white);\n    const float3x3 XYZ_to_encoding_RGB = RGBPrimsToXYZMatrix(temp_primaries, limiting_whitepoint, 1.0f, INVERSE);\n\n    // Scale to fit maximum creative white channel value\n    const float3 creativeWhiteXYZ = vector_dot(limiting_RGB_to_XYZ, float3(1.0f));\n    const float3 creativeWhiteRGB = vector_dot(XYZ_to_encoding_RGB, creativeWhiteXYZ);\n    const float  max_channel      = max(creativeWhiteRGB.x, max(creativeWhiteRGB.y, creativeWhiteRGB.z));\n    white_scaling_factor          = (whitepoint_scale) ? 1.0f / max_channel : 1.0f; // TODO: add scaling into reencoding matrix?\n    white_scaled                  = (white_scaling_factor != 1.0f);\n\n    has_effect = white_scaled;\n    if (!invert)\n    \{\n      has_effect |= limitClamp;\n    \}\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot(float3x3 m, float3 v)\n  \{\n    float3 r;\n    for (int c = 0; c != 3; ++c)\n    \{\n      r\[c] = m\[c]\[0] * v\[0] + m\[c]\[1] * v\[1] + m\[c]\[2] * v\[2];\n    \}\n\n    return r;\n  \}\n\n  inline float3 xyz_to_limiting(const float3 XYZ)\n  \{\n    return vector_dot(XYZ_to_limiting_RGB, XYZ);\n  \}\n\n  inline float3 limiting_to_xyz(const float3 RGB)\n  \{\n    return vector_dot(limiting_RGB_to_XYZ, RGB);\n  \}\n\n  inline float3 apply_limiting_clamp(float3 RGB)\n  \{\n    if (limitClamp)\n    \{\n      RGB = clamp(RGB, float3\{0.0f\}, float3\{limitingLuminance\});\n    \}\n    return RGB;\n  \}\n\n  inline float3 apply_whitepoint_scale(float3 RGB)\n  \{\n    if (white_scaled)\n    \{\n      RGB *= white_scaling_factor;\n    \}\n    return RGB;\n  \}\n\n  inline float3 remove_whitepoint_scale(float3 RGB)\n  \{\n    RGB /= white_scaling_factor;\n    return RGB;\n  \}\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 out(source.x, source.y, source.z);\n\n    if (has_effect)\n    \{\n      if (invert)\n      \{\n        out = xyz_to_limiting(out);\n        out = remove_whitepoint_scale(out);\n        out = limiting_to_xyz(out);\n      \}\n      else\n      \{\n        out = xyz_to_limiting(out);\n        out = apply_limiting_clamp(out);\n        out = apply_whitepoint_scale(out);\n        out = limiting_to_xyz(out);\n      \}\n    \}\n\n    dst() = float4(out.x, out.y, out.z, source.w);\n  \}\n\};\n"
  rebuild ""
  "ACES_DRT_Encoding_Kernel_Limiting Primaries" {{parent.limiting_primaries}}
  "ACES_DRT_Encoding_Kernel_Encoding Primaries" {{parent.encoding_primaries}}
  "ACES_DRT_Encoding_Kernel_Limiting Whitepoint" {{parent.limiting_whitepoint}}
  "ACES_DRT_Encoding_Kernel_Encoding Whitepoint" {{parent.encoding_whitepoint}}
  "ACES_DRT_Encoding_Kernel_Custom Red" {0.6399999857 0.3300000131}
  "ACES_DRT_Encoding_Kernel_Custom Green" {0.3000000119 0.6000000238}
  "ACES_DRT_Encoding_Kernel_Custom Blue" {0.150000006 0.05999999866}
  "ACES_DRT_Encoding_Kernel_Custom White" {0.3127000034 0.3289999962}
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos 130
  ypos -110
 }
 Output {
  name Output1
  xpos 130
  ypos -10
 }
end_group
