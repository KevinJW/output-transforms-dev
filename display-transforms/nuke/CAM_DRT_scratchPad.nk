#! /Applications/Nuke13.0v3/Nuke13.0v3.app/Contents/MacOS/libnuke-13.0.3.dylib -nx
version 13.0 v3
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="25" w="2560" h="1470" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1897" stretch="1"/>
            <splitter orientation="2">
                <split size="851"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                    <page id="Viewer.2"/>
                    <page id="Viewer.3"/>
                </dock>
                <split size="599"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                    <page id="DAG.2"/>
                    <page id="DAG.3"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/CAM_DRT_scratchPad.nk
 frame 78
 last_frame 77
 lock_range true
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement OCIO
 OCIO_config custom
 customOCIOConfigPath /Users/afry/Documents/GitHub/OpenColorIO-Configs/aces_1.2/config.ocio
 defaultViewerLUT "OCIO LUTs"
 workingSpaceLUT scene_linear
 monitorLut ACES/sRGB
 monitorOutLUT "sRGB (ACES)"
 int8Lut matte_paint
 int16Lut texture_paint
 logLut compositing_log
 floatLut scene_linear
}
StickyNote {
 inputs 0
 name StickyNote1
 label "Converts from XYZ to Fairchild-Hellwig2022 JMh\n(and back)"
 xpos -940
 ypos -67
}
Ramp {
 inputs 0
 output {rgba.red -rgba.green -rgba.blue rgba.alpha}
 p0 {0 0}
 p1 {0 1556}
 color 8
 name Ramp1
 xpos -593
 ypos -149
}
Ramp {
 output {-rgba.red -rgba.green rgba.blue rgba.alpha}
 p0 {0 0}
 p1 {2048 0}
 color 360
 name Ramp2
 xpos -593
 ypos -117
}
Shuffle2 {
 fromInput1 {{0} B}
 fromInput2 {{0} B}
 mappings "4 rgba.red 0 0 rgba.red 0 0 white -1 -1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 0 3 rgba.alpha 0 3"
 name Shuffle1
 xpos -593
 ypos -85
}
Multiply {
 channels {-rgba.red rgba.green -rgba.blue none}
 value {{frame-1}}
 name Multiply1
 xpos -593
 ypos -61
}
Reformat {
 type "to box"
 box_width 32
 box_height 1024
 box_fixed true
 name Reformat2
 xpos -593
 ypos -5
}
ColorWheel {
 inputs 0
 gamma 0.45
 name ColorWheel1
 xpos -694
 ypos -161
}
Colorspace {
 colorspace_out CIE-XYZ
 name Colorspace2
 xpos -694
 ypos -89
}
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/hellwig2022/hellwig2022.blink
 recompileCount 251
 ProgramGroup 1
 KernelDescription "2 \"hellwig2022\" iterate pixelWise e61ba9f246a6b79db1f7d548e2d7d9671fb5a58c7be502922ad28c704879b04e 2 \"src\" Read Point \"dst\" Write Point 6 \"direction\" Int 1 AAAAAA== \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== 6 \"direction\" 1 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 3 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
 kernelSource "\nkernel hellwig2022 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n\n    // the kernel parameters\n    int direction; // the direction of the convolution\n\n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float3 surround;\n    bool discount_illuminant;\n\n\n  local:\n    float HALF_MIN;\n    float HALF_MAX;\n\n    float3x3 CAT_CAT16;\n\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n        // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n    // this one initially returned -pow(abs(b), e) for negative b\n    // but this ended up producing undesirable results in some cases\n    // so now it just returns 0.0 instead\n    float spow( float base, float exponent )\n    \{\n        if(base < 0.0f && exponent != floor(exponent) )\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return pow(base, exponent); \n        \}\n    \}\n\n    float3 float3spow( float3 base, float exponent )\n    \{\n        return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n    \}\n\n    float3 float3sign( float3 v )\n    \{\n        return float3(sign(v.x), sign(v.y), sign(v.z));\n    \}\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    // convert radians to degrees\n    float degrees( float radians )\n    \{\n      return radians * 180.0f / PI;\n    \}\n\n    float abs( float a )\n    \{\n      return fabs(a);\n    \}\n\n    float3 float3abs( float3 a )\n    \{\n      return fabs(a);\n    \}\n  \n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n\n\n  float hue_angle( float a, float b )\n  \{\n    // \"\"\"\n    // Return the *hue* angle :math:`h` in degrees.\n\n    // Parameters\n    // ----------\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Hue* angle :math:`h` in degrees.\n\n    // Examples\n    // --------\n    // >>> a = -0.000624112068243\n    // >>> b = -0.000506270106773\n    // >>> hue_angle(a, b)  # doctest: +ELLIPSIS\n    // 219.0484326...\n    // \"\"\"\n\n    // a = as_float_array(a);\n    // b = as_float_array(b);\n\n    float h = degrees(atan2(b, a)) / 360;\n\n    return h;\n  \}\n\n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n  float radians(float a)\n  \{\n    return a * PI / 180.0f;\n  \}\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n    //   \"\"\"\n    //   Return the achromatic response :math:`A` from given compressed\n    //   *CAM16* transform sharpened *RGB* array and :math:`N_\{bb\}` chromatic\n    //   induction factor for forward *Hellwig and Fairchild (2022)* implementation.\n\n    //   Parameters\n    //   ----------\n    //   RGB\n    //       Compressed *CAM16* transform sharpened *RGB* array.\n\n    //   Returns\n    //   -------\n    //   :class:`numpy.floating` or :class:`numpy.ndarray`\n    //       Achromatic response :math:`A`.\n\n    //   Examples\n    //   --------\n    //   >>> RGB = np.array(\[7.94634384, 7.94713791, 7.9488967])\n    //   >>> achromatic_response_forward(RGB)  # doctest: +ELLIPSIS\n    //   23.9322704...\n    //   \"\"\"\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n    // \"\"\"\n    // Return the *colourfulness* correlate :math:`M`.\n\n    // Parameters\n    // ----------\n    // N_c\n    //     Surround chromatic induction factor :math:`N_\{c\}`.\n    // e_t\n    //     Eccentricity factor :math:`e_t`.\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Colourfulness* correlate :math:`M`.\n\n    // Examples\n    // --------\n    // >>> N_c = 1\n    // >>> e_t = 1.13423124867\n    // >>> a = -0.00063418423001\n    // >>> b = -0.000479072513542\n    // >>> colourfulness_correlate(N_c, e_t, a, b)  # doctest: +ELLIPSIS\n    // 0.0387637...\n    // \"\"\"\n\n    // N_c = as_float_array(N_c)\n    // e_t = as_float_array(e_t)\n    // a = as_float_array(a)\n    // b = as_float_array(b)\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    // \"\"\"\n    // Return the degree of adaptation :math:`D` from given surround maximum\n    // degree of adaptation :math:`F` and adapting field *luminance* :math:`L_A`\n    // in :math:`cd/m^2`.\n\n    // Parameters\n    // ----------\n    // F\n    //     Surround maximum degree of adaptation :math:`F`.\n    // L_A\n    //     Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     Degree of adaptation :math:`D`.\n\n    // Examples\n    // --------\n    // >>> degree_of_adaptation(1.0, 318.31)  # doctest: +ELLIPSIS\n    // 0.9944687...\n    // \"\"\"\n\n    // F = as_float_array(F)\n    // L_A = as_float_array(L_A)\n\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n\n  float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n//     \"\"\"\n//     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n//     correlates from given *CIE XYZ* tristimulus values.\n\n//     Parameters\n//     ----------\n//     XYZ\n//         *CIE XYZ* tristimulus values of test sample / stimulus.\n//     XYZ_w\n//         *CIE XYZ* tristimulus values of reference white.\n//     L_A\n//         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n//         to be 20% of the luminance of a white object in the scene).\n//     Y_b\n//         Luminous factor of background :math:`Y_b` such as\n//         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n//         light source and :math:`L_b` is the luminance of the background. For\n//         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n//         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n//         approximate an :math:`L^*` of 50 is used.\n//     surround\n//         Surround viewing conditions induction factors.\n//     discount_illuminant\n//         Truth value indicating if the illuminant should be discounted.\n\n//     Returns\n//     -------\n//     :class:`colour.CAM_Specification_Hellwig2022`\n//         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n//     Notes\n//     -----\n//     +------------+-----------------------+---------------+\n//     | **Domain** | **Scale - Reference** | **Scale - 1** |\n//     +============+=======================+===============+\n//     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n//     +------------+-----------------------+---------------+\n//     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n//     +------------+-----------------------+---------------+\n\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | **Range**                           | **Scale - Reference** | **Scale - \\\n// 1** |\n//     +=====================================+=======================+===========\\\n// ====+\n//     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n\n//     References\n//     ----------\n//     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n//     Examples\n//     --------\n//     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n//     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n//     >>> L_A = 318.31\n//     >>> Y_b = 20.0\n//     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n//     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n//     ... # doctest: +ELLIPSIS\n//     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n// h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n// H=275.5949861..., HC=None)\n//     \"\"\"\n\n    XYZ = float3_to_domain_100(XYZ);\n    XYZ_w = float3_to_domain_100(XYZ_w);\n    float _X_w = XYZ_w.x ;\n    float Y_w = XYZ_w.y ;\n    float _Z_w = XYZ_w.z ;\n    // L_A = as_float_array(L_A)\n    // Y_b = as_float_array(Y_b)\n\n    // # Step 0\n    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n    float3x3 MATRIX_16 = CAT_CAT16;\n    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n    // # Computing degree of adaptation :math:`D`.\n    float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n    if(discount_illuminant)\n    \{\n        D = 1.0f;\n    \}\n\n\n    // # Viewing conditions dependent parameters\n    float k = 1 / (5 * L_A + 1);\n    float k4 = pow(k,4);\n    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n    float n = sdiv(Y_b, Y_w);\n    float z = 1.48 + sqrt(n);\n\n    // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n    float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n    float3 RGB_wc = D_RGB * RGB_w;\n    \n    // # Applying forward post-adaptation non-linear response compression.\n    // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n    // # Computing achromatic responses for the whitepoint.\n    // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n    // # Computing achromatic responses for the whitepoint.\n    // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n    float R_aw = RGB_aw.x ;\n    float G_aw = RGB_aw.y ;\n    float B_aw = RGB_aw.z ;\n    // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n    // # Step 1\n    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n    // RGB = vector_dot(MATRIX_16, XYZ)\n    float3 RGB = vector_dot(MATRIX_16, XYZ);\n\n    // # Step 2\n    // RGB_c = D_RGB * RGB\n    float3 RGB_c = D_RGB * RGB;\n\n    // # Step 3\n    // # Applying forward post-adaptation non-linear response compression.\n    // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n    float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n    // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n    float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n    // # Step 4\n    // # Converting to preliminary cartesian coordinates.\n    // R_a, G_a, B_a = tsplit(RGB_a)\n    float R_a = RGB_a.x ;\n    float G_a = RGB_a.y ;\n    float B_a = RGB_a.z ;\n    // a = R_a - 12 * G_a / 11 + B_a / 11\n    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n    // b = (R_a + G_a - 2 * B_a) / 9\n    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n    // # Computing the *hue* angle :math:`h`.\n    // h = np.degrees(np.arctan2(b, a)) % 360\n    // Unclear why this isnt matching the python version.\n    float h = mod(degrees(atan2(b, a)), 360.0f);\n\n    \n\n    // # Step 5\n    // # Computing eccentricity factor *e_t*.\n    // hr = np.radians(h)\n    float hr = radians(h);\n\n    // _h = hr\n    // _2_h = 2 * hr\n    // _3_h = 3 * hr\n    // _4_h = 4 * hr\n    float _h = hr;\n    float _2_h = 2 * hr;\n    float _3_h = 3 * hr;\n    float _4_h = 4 * hr;\n\n    // e_t = (\n    //     -0.0582 * np.cos(_h)\n    //     - 0.0258 * np.cos(_2_h)\n    //     - 0.1347 * np.cos(_3_h)\n    //     + 0.0289 * np.cos(_4_h)\n    //     - 0.1475 * np.sin(_h)\n    //     - 0.0308 * np.sin(_2_h)\n    //     + 0.0385 * np.sin(_3_h)\n    //     + 0.0096 * np.sin(_4_h)\n    //     + 1\n    // )\n    float e_t = (\n        -0.0582f * cos(_h)\n        - 0.0258f * cos(_2_h)\n        - 0.1347f * cos(_3_h)\n        + 0.0289f * cos(_4_h)\n        - 0.1475f * sin(_h)\n        - 0.0308f * sin(_2_h)\n        + 0.0385f * sin(_3_h)\n        + 0.0096f * sin(_4_h)\n        + 1.0f\n    );\n\n    // # Step 6\n    // # Computing achromatic responses for the stimulus.\n    // R_a, G_a, B_a = tsplit(RGB_a)\n    float R_a2 = RGB_a.x ;\n    float G_a2 = RGB_a.y ;\n    float B_a2 = RGB_a.z ;\n    // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n    // # Step 7\n    // # Computing the correlate of *Lightness* :math:`J`.\n    // with sdiv_mode():\n    //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n    // # Step 8\n    // # Computing the correlate of *brightness* :math:`Q`.\n    // with sdiv_mode():\n    //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n    float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n    // # Step 9\n    // # Computing the correlate of *colourfulness* :math:`M`.\n    // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n    float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n    // # Computing the correlate of *chroma* :math:`C`.\n    // with sdiv_mode():\n    //     C = 35 * sdiv(M, A_w)\n    float C = 35.0f * sdiv(M, A_w);\n\n\n    // # Computing the correlate of *saturation* :math:`s`.\n    // with sdiv_mode():\n    //     s = 100 * sdiv(M, Q)\n    float s = 100.0f * sdiv(M, Q);\n\n\n\n    // return XYZ_w;\n    // return RGB_w;\n    // return \{D,k,k4\};\n    // return \{F_L,n,z\};\n    // return RGB_a;\n    return \{J,M,h\};\n    // return XYZ;\n    \}\n\n    float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_c / D_RGB;\n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n        return XYZ;\n\n    \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    CAT_CAT16.setArray(CAT_CAT16_data);\n\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    // diagnostic =  srcRGB;\n\n    // float3 surround(1.0f, 0.69f, 1.0f);\n    // float3 XYZ_w(95.05f, 100.00f, 108.88f);\n\n    if (direction == 0)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        dstRGB = JMh;\n    \}\n    else\n    \{\n        float3 XYZ_out = Hellwig2022_JMh_to_XYZ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n\n    diagnostic = dstRGB;\n\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
 rebuild ""
 hellwig2022_XYZ_w {95.05 100 108.88}
 hellwig2022_L_A 318.31
 hellwig2022_Y_b 20
 hellwig2022_surround {1 0.69 1}
 rebuild_finalise ""
 name BlinkScript1
 xpos -696
 ypos -55
}
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/hellwig2022/hellwig2022.blink
 recompileCount 251
 ProgramGroup 1
 KernelDescription "2 \"hellwig2022\" iterate pixelWise e61ba9f246a6b79db1f7d548e2d7d9671fb5a58c7be502922ad28c704879b04e 2 \"src\" Read Point \"dst\" Write Point 6 \"direction\" Int 1 AAAAAA== \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== 6 \"direction\" 1 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 3 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
 kernelSource "\nkernel hellwig2022 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n\n    // the kernel parameters\n    int direction; // the direction of the convolution\n\n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float3 surround;\n    bool discount_illuminant;\n\n\n  local:\n    float HALF_MIN;\n    float HALF_MAX;\n\n    float3x3 CAT_CAT16;\n\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n        // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n    // this one initially returned -pow(abs(b), e) for negative b\n    // but this ended up producing undesirable results in some cases\n    // so now it just returns 0.0 instead\n    float spow( float base, float exponent )\n    \{\n        if(base < 0.0f && exponent != floor(exponent) )\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return pow(base, exponent); \n        \}\n    \}\n\n    float3 float3spow( float3 base, float exponent )\n    \{\n        return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n    \}\n\n    float3 float3sign( float3 v )\n    \{\n        return float3(sign(v.x), sign(v.y), sign(v.z));\n    \}\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    // convert radians to degrees\n    float degrees( float radians )\n    \{\n      return radians * 180.0f / PI;\n    \}\n\n    float abs( float a )\n    \{\n      return fabs(a);\n    \}\n\n    float3 float3abs( float3 a )\n    \{\n      return fabs(a);\n    \}\n  \n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n\n\n  float hue_angle( float a, float b )\n  \{\n    // \"\"\"\n    // Return the *hue* angle :math:`h` in degrees.\n\n    // Parameters\n    // ----------\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Hue* angle :math:`h` in degrees.\n\n    // Examples\n    // --------\n    // >>> a = -0.000624112068243\n    // >>> b = -0.000506270106773\n    // >>> hue_angle(a, b)  # doctest: +ELLIPSIS\n    // 219.0484326...\n    // \"\"\"\n\n    // a = as_float_array(a);\n    // b = as_float_array(b);\n\n    float h = degrees(atan2(b, a)) / 360;\n\n    return h;\n  \}\n\n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n  float radians(float a)\n  \{\n    return a * PI / 180.0f;\n  \}\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n    //   \"\"\"\n    //   Return the achromatic response :math:`A` from given compressed\n    //   *CAM16* transform sharpened *RGB* array and :math:`N_\{bb\}` chromatic\n    //   induction factor for forward *Hellwig and Fairchild (2022)* implementation.\n\n    //   Parameters\n    //   ----------\n    //   RGB\n    //       Compressed *CAM16* transform sharpened *RGB* array.\n\n    //   Returns\n    //   -------\n    //   :class:`numpy.floating` or :class:`numpy.ndarray`\n    //       Achromatic response :math:`A`.\n\n    //   Examples\n    //   --------\n    //   >>> RGB = np.array(\[7.94634384, 7.94713791, 7.9488967])\n    //   >>> achromatic_response_forward(RGB)  # doctest: +ELLIPSIS\n    //   23.9322704...\n    //   \"\"\"\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n    // \"\"\"\n    // Return the *colourfulness* correlate :math:`M`.\n\n    // Parameters\n    // ----------\n    // N_c\n    //     Surround chromatic induction factor :math:`N_\{c\}`.\n    // e_t\n    //     Eccentricity factor :math:`e_t`.\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Colourfulness* correlate :math:`M`.\n\n    // Examples\n    // --------\n    // >>> N_c = 1\n    // >>> e_t = 1.13423124867\n    // >>> a = -0.00063418423001\n    // >>> b = -0.000479072513542\n    // >>> colourfulness_correlate(N_c, e_t, a, b)  # doctest: +ELLIPSIS\n    // 0.0387637...\n    // \"\"\"\n\n    // N_c = as_float_array(N_c)\n    // e_t = as_float_array(e_t)\n    // a = as_float_array(a)\n    // b = as_float_array(b)\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    // \"\"\"\n    // Return the degree of adaptation :math:`D` from given surround maximum\n    // degree of adaptation :math:`F` and adapting field *luminance* :math:`L_A`\n    // in :math:`cd/m^2`.\n\n    // Parameters\n    // ----------\n    // F\n    //     Surround maximum degree of adaptation :math:`F`.\n    // L_A\n    //     Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     Degree of adaptation :math:`D`.\n\n    // Examples\n    // --------\n    // >>> degree_of_adaptation(1.0, 318.31)  # doctest: +ELLIPSIS\n    // 0.9944687...\n    // \"\"\"\n\n    // F = as_float_array(F)\n    // L_A = as_float_array(L_A)\n\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n\n  float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n//     \"\"\"\n//     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n//     correlates from given *CIE XYZ* tristimulus values.\n\n//     Parameters\n//     ----------\n//     XYZ\n//         *CIE XYZ* tristimulus values of test sample / stimulus.\n//     XYZ_w\n//         *CIE XYZ* tristimulus values of reference white.\n//     L_A\n//         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n//         to be 20% of the luminance of a white object in the scene).\n//     Y_b\n//         Luminous factor of background :math:`Y_b` such as\n//         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n//         light source and :math:`L_b` is the luminance of the background. For\n//         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n//         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n//         approximate an :math:`L^*` of 50 is used.\n//     surround\n//         Surround viewing conditions induction factors.\n//     discount_illuminant\n//         Truth value indicating if the illuminant should be discounted.\n\n//     Returns\n//     -------\n//     :class:`colour.CAM_Specification_Hellwig2022`\n//         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n//     Notes\n//     -----\n//     +------------+-----------------------+---------------+\n//     | **Domain** | **Scale - Reference** | **Scale - 1** |\n//     +============+=======================+===============+\n//     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n//     +------------+-----------------------+---------------+\n//     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n//     +------------+-----------------------+---------------+\n\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | **Range**                           | **Scale - Reference** | **Scale - \\\n// 1** |\n//     +=====================================+=======================+===========\\\n// ====+\n//     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n//     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n//     |\n//     +-------------------------------------+-----------------------+-----------\\\n// ----+\n\n//     References\n//     ----------\n//     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n//     Examples\n//     --------\n//     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n//     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n//     >>> L_A = 318.31\n//     >>> Y_b = 20.0\n//     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n//     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n//     ... # doctest: +ELLIPSIS\n//     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n// h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n// H=275.5949861..., HC=None)\n//     \"\"\"\n\n    XYZ = float3_to_domain_100(XYZ);\n    XYZ_w = float3_to_domain_100(XYZ_w);\n    float _X_w = XYZ_w.x ;\n    float Y_w = XYZ_w.y ;\n    float _Z_w = XYZ_w.z ;\n    // L_A = as_float_array(L_A)\n    // Y_b = as_float_array(Y_b)\n\n    // # Step 0\n    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n    float3x3 MATRIX_16 = CAT_CAT16;\n    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n    // # Computing degree of adaptation :math:`D`.\n    float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n    if(discount_illuminant)\n    \{\n        D = 1.0f;\n    \}\n\n\n    // # Viewing conditions dependent parameters\n    float k = 1 / (5 * L_A + 1);\n    float k4 = pow(k,4);\n    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n    float n = sdiv(Y_b, Y_w);\n    float z = 1.48 + sqrt(n);\n\n    // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n    float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n    float3 RGB_wc = D_RGB * RGB_w;\n    \n    // # Applying forward post-adaptation non-linear response compression.\n    // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n    // # Computing achromatic responses for the whitepoint.\n    // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n    // # Computing achromatic responses for the whitepoint.\n    // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n    float R_aw = RGB_aw.x ;\n    float G_aw = RGB_aw.y ;\n    float B_aw = RGB_aw.z ;\n    // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n    // # Step 1\n    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n    // RGB = vector_dot(MATRIX_16, XYZ)\n    float3 RGB = vector_dot(MATRIX_16, XYZ);\n\n    // # Step 2\n    // RGB_c = D_RGB * RGB\n    float3 RGB_c = D_RGB * RGB;\n\n    // # Step 3\n    // # Applying forward post-adaptation non-linear response compression.\n    // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n    float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n    // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n    float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n    // # Step 4\n    // # Converting to preliminary cartesian coordinates.\n    // R_a, G_a, B_a = tsplit(RGB_a)\n    float R_a = RGB_a.x ;\n    float G_a = RGB_a.y ;\n    float B_a = RGB_a.z ;\n    // a = R_a - 12 * G_a / 11 + B_a / 11\n    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n    // b = (R_a + G_a - 2 * B_a) / 9\n    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n    // # Computing the *hue* angle :math:`h`.\n    // h = np.degrees(np.arctan2(b, a)) % 360\n    // Unclear why this isnt matching the python version.\n    float h = mod(degrees(atan2(b, a)), 360.0f);\n\n    \n\n    // # Step 5\n    // # Computing eccentricity factor *e_t*.\n    // hr = np.radians(h)\n    float hr = radians(h);\n\n    // _h = hr\n    // _2_h = 2 * hr\n    // _3_h = 3 * hr\n    // _4_h = 4 * hr\n    float _h = hr;\n    float _2_h = 2 * hr;\n    float _3_h = 3 * hr;\n    float _4_h = 4 * hr;\n\n    // e_t = (\n    //     -0.0582 * np.cos(_h)\n    //     - 0.0258 * np.cos(_2_h)\n    //     - 0.1347 * np.cos(_3_h)\n    //     + 0.0289 * np.cos(_4_h)\n    //     - 0.1475 * np.sin(_h)\n    //     - 0.0308 * np.sin(_2_h)\n    //     + 0.0385 * np.sin(_3_h)\n    //     + 0.0096 * np.sin(_4_h)\n    //     + 1\n    // )\n    float e_t = (\n        -0.0582f * cos(_h)\n        - 0.0258f * cos(_2_h)\n        - 0.1347f * cos(_3_h)\n        + 0.0289f * cos(_4_h)\n        - 0.1475f * sin(_h)\n        - 0.0308f * sin(_2_h)\n        + 0.0385f * sin(_3_h)\n        + 0.0096f * sin(_4_h)\n        + 1.0f\n    );\n\n    // # Step 6\n    // # Computing achromatic responses for the stimulus.\n    // R_a, G_a, B_a = tsplit(RGB_a)\n    float R_a2 = RGB_a.x ;\n    float G_a2 = RGB_a.y ;\n    float B_a2 = RGB_a.z ;\n    // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n    // # Step 7\n    // # Computing the correlate of *Lightness* :math:`J`.\n    // with sdiv_mode():\n    //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n    // # Step 8\n    // # Computing the correlate of *brightness* :math:`Q`.\n    // with sdiv_mode():\n    //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n    float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n    // # Step 9\n    // # Computing the correlate of *colourfulness* :math:`M`.\n    // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n    float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n    // # Computing the correlate of *chroma* :math:`C`.\n    // with sdiv_mode():\n    //     C = 35 * sdiv(M, A_w)\n    float C = 35.0f * sdiv(M, A_w);\n\n\n    // # Computing the correlate of *saturation* :math:`s`.\n    // with sdiv_mode():\n    //     s = 100 * sdiv(M, Q)\n    float s = 100.0f * sdiv(M, Q);\n\n\n\n    // return XYZ_w;\n    // return RGB_w;\n    // return \{D,k,k4\};\n    // return \{F_L,n,z\};\n    // return RGB_a;\n    return \{J,M,h\};\n    // return XYZ;\n    \}\n\n    float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_c / D_RGB;\n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n        return XYZ;\n\n    \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    CAT_CAT16.setArray(CAT_CAT16_data);\n\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    // diagnostic =  srcRGB;\n\n    // float3 surround(1.0f, 0.69f, 1.0f);\n    // float3 XYZ_w(95.05f, 100.00f, 108.88f);\n\n    if (direction == 0)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        dstRGB = JMh;\n    \}\n    else\n    \{\n        float3 XYZ_out = Hellwig2022_JMh_to_XYZ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n\n    diagnostic = dstRGB;\n\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
 rebuild ""
 hellwig2022_direction 1
 hellwig2022_XYZ_w {95.05 100 108.88}
 hellwig2022_L_A 318.31
 hellwig2022_Y_b 20
 hellwig2022_surround {1 0.69 1}
 rebuild_finalise ""
 name BlinkScript2
 xpos -696
 ypos 34
}
set N14f3ec00 [stack 0]
Colorspace {
 colorspace_in CIE-XYZ
 primary_out DCI-P3
 name Colorspace3
 xpos -696
 ypos 79
}
Expression {
 channel0 alpha
 expr0 1-max(max(r<0,g<0,b<0),max(r>1,g>1,b>1))
 channel1 none
 expr1 g<0
 channel2 none
 expr2 b<0
 name Expression1
 xpos -696
 ypos 127
}
Premult {
 name Premult1
 xpos -696
 ypos 151
}
Constant {
 inputs 0
 channels rgb
 color {19.01 20 21.78 0}
 format "256 256 0 0 256 256 1 square_256"
 name Constant1
 label "check values as used by Thomas's code"
 xpos 496
 ypos -158
}
Ramp {
 inputs 0
 output {rgba.red -rgba.green -rgba.blue rgba.alpha}
 p0 {0 0}
 p1 {0 1556}
 color 2
 name Ramp3
 xpos -465
 ypos -214
}
Shuffle2 {
 fromInput1 {{0} B}
 fromInput2 {{0} B}
 mappings "4 white -1 -1 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 0 3 rgba.alpha 0 3"
 name Shuffle3
 xpos -465
 ypos -182
}
Multiply {
 value {5 1 1 1}
 name Multiply3
 xpos -465
 ypos -158
}
Ramp {
 output {-rgba.red -rgba.green rgba.blue rgba.alpha}
 p0 {0 0}
 p1 {2048 0}
 color 360
 name Ramp4
 xpos -465
 ypos -108
}
Ramp {
 output {-rgba.red rgba.green -rgba.blue rgba.alpha}
 p0 {0 0}
 p1 {0 1556}
 color 100
 name Ramp5
 xpos -465
 ypos -61
}
Multiply {
 channels {-rgba.red rgba.green -rgba.blue none}
 value {{frame-1}}
 name Multiply2
 xpos -465
 ypos -29
 disable true
}
Reformat {
 type "to box"
 box_width 32
 box_height 1024
 box_fixed true
 resize distort
 name Reformat3
 xpos -465
 ypos -5
}
Colorspace {
 colorspace_out sRGB
 name Colorspace1
 xpos -435
 ypos 221
}
push $N14f3ec00
Group {
 name PlotChromaticity
 xpos -507
 ypos 100
 addUserKnob {20 PlotChromaticity_tab l PlotChromaticity}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
 addUserKnob {26 ""}
 addUserKnob {6 plot_input l "plot input" t "Enable plotting of the input pixels" +STARTLINE}
 plot_input true
 addUserKnob {41 input_gamut l gamut t "Set the gamut that the input colors are encoded in" -STARTLINE T GamutToXYZ.gamut}
 addUserKnob {4 diagram l in t "Choose the type of chromaticity diagram: \nCIE 1931 xy Chromaticity Diagram\nCIE 1976 u' v' Uniform Chromaticity Scale Diagram" -STARTLINE M {"CIE 1931 xy" "CIE 1976 u' v'" "" ""}}
 addUserKnob {6 enable_sample_color l "sample color" t "Enable plotting of the sampled color" +STARTLINE}
 enable_sample_color true
 addUserKnob {41 sample_color l color t "sample and plot selected color" T SampleColor.color}
 addUserKnob {22 follow_viewer l "follow viewer" t "Follow the selected viewer node. This causes this node to automatically connect to whatever the followed viewer is connected to.\n\nThis is useful if you want to have a 2nd viewer showing a chromaticity plot for whever you're looking at in your main viewer." T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to follow.')\nelse:\n    v\['knobChanged'].setValue('v = nuke.activeViewer().node()\\nif v and v.name() == nuke.thisNode().name():\\n    con = v.input(nuke.activeViewer().activeInput())\\n    plt = nuke.toNode(\"\{0\}\")\\n    plt.setInput(0, con)'.format(n.name()))" +STARTLINE}
 addUserKnob {22 unfollow_viewer l "unfollow viewer" -STARTLINE T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to unfollow.')\nelse:\n    v\['knobChanged'].setValue('')"}
 addUserKnob {26 plot_dimensions_label l " " T "<b>Chromaticity Diagram"}
 addUserKnob {3 resolution l " resolution" t "resolution to output"}
 resolution 2048
 addUserKnob {7 right_margin l "right margin" R 1 1.5}
 right_margin 1.1
 addUserKnob {7 left_margin l "left margin" R 0 0.2}
 left_margin 0.1
 addUserKnob {6 draw_spectral_locus l "spectrum locus" t "draw the spectrum locus: the boundary of color the human eye can see." +STARTLINE}
 draw_spectral_locus true
 addUserKnob {6 draw_line_of_purples l "line of purples" t "draw the \"line of purples\"" -STARTLINE}
 draw_line_of_purples true
 addUserKnob {6 draw_planckian_locus l "planckian locus" t "Display the planckian locus or the blackbody locus." +STARTLINE}
 draw_planckian_locus true
 addUserKnob {6 gamut_grid l "gamut grid" t "Display a gamut boundary with a grid or dot pattern" +STARTLINE}
 addUserKnob {41 gamut_gamutgrid l "" t "gamut for gamutgrid" -STARTLINE T RGBToXYZ_GamutGrid.gamut}
 addUserKnob {4 gamut_grid_style l style t "Choose the style to display the gamut plot" -STARTLINE M {grid dots "" "" "" ""}}
 addUserKnob {4 distribution l dist t "Which chromaticity space should the overlays be constructed in? \n\nYxy is familiar, but not very perceptually uniform.\n\nu'v' is designed to be more perceptually uniform." -STARTLINE M {"1931 Yxy" "1976 u'v'" "" ""}}
 addUserKnob {7 density t "Density of the grid or points" R 10 100}
 density 50
 addUserKnob {6 gamut_a l "gamut a" t "Display a gamut outline" +STARTLINE}
 addUserKnob {41 gamut_a_1 l "" -STARTLINE T RGBToXYZ_GamutA.gamut}
 addUserKnob {6 gamut_b l "gamut b" t "Display a gamut outline" +STARTLINE}
 addUserKnob {41 gamut_b_1 l "" -STARTLINE T RGBToXYZ_GamutB.gamut}
 addUserKnob {6 gamut_c l "gamut c" t "Display a gamut outline" +STARTLINE}
 addUserKnob {41 gamut_c_1 l "" -STARTLINE T RGBToXYZ_GamutC.gamut}
 addUserKnob {6 draw_pointers_gamut l "pointer's gamut" t "DrawPointer's gamut boundary" +STARTLINE}
 addUserKnob {6 draw_pointers_samples l "pointers sample colors" t "show the individual pointer gamut samples" -STARTLINE}
 addUserKnob {6 draw_macbeth_chart l "macbeth chart" t "draw a ColorChecker24 aka Macbeth Chart" +STARTLINE}
 addUserKnob {6 coordinate_system l "coordinate system" t "Draw CIE xy coordinate grid x and y axes" +STARTLINE}
 coordinate_system true
 addUserKnob {6 map_overlays_to_input_gamut l "map overlays to input gamut" t "This maps the overlays like the spectral locus, pointer's gamut, and the gamut overlay to the working gamut instead of keeping them as XYZ.\n\nFor example if the input gamut is ACEScg, these overlays will be mapped to that. Note that this can cause most of the overlays to be negative or highly saturated which might harm the visual appearance." +STARTLINE}
 map_overlays_to_input_gamut true
}
 Group {
  inputs 0
  name GamutGrid1
  xpos -920
  ypos -201
  postage_stamp true
  addUserKnob {20 GamutGrid}
  addUserKnob {3 style}
  style {{!parent.gamut_grid_style}}
  addUserKnob {3 distribution -STARTLINE}
  distribution {{parent.distribution}}
  addUserKnob {7 density R 10 150}
  density {{parent.density}}
  addUserKnob {26 ""}
  addUserKnob {41 matrix T ColorMatrix.matrix}
  addUserKnob {12 wxy}
  wxy {{parent.RGBToXYZ_GamutGrid.wxy} {parent.RGBToXYZ_GamutGrid.wxy}}
 }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   centerSaturation 1
   fillFormat false
   area {-170 -158 682 670}
   name ColorWheel4
   xpos -260
   ypos -15
   postage_stamp false
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop2
   xpos -260
   ypos 27
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat3
   xpos -260
   ypos 110
  }
set N14ec6800 [stack 0]
push $N14ec6800
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   roworder TopBottom
   name ContactSheet2
   xpos -260
   ypos 169
  }
  Dot {
   name Dot1
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -226
   ypos 246
  }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   fillFormat false
   area {40 40 472 472}
   name ColorWheel1
   xpos -40
   ypos -664
   postage_stamp false
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat1
   xpos -40
   ypos -628
  }
  Crop {
   box {0 0 {width} {height}}
   reformat true
   name Crop1
   xpos -40
   ypos -602
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos -526
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos -415
  }
  Colorspace {
   colorspace_in CIE-XYZ
   colorspace_out CIE-Yxy
   name Colorspace1
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -341
  }
set N14e67c00 [stack 0]
  Dot {
   name Dot2
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos -331
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression5
   label "CIE Yxy to CIELuv"
   xpos -590
   ypos -304
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 "(-(degrees(atan2(g-white.x, b-white.y))-180)+270)%360/360"
   expr2 "hypot(g-white.x, b-white.y)"
   expr3 a
   name Expression3
   xpos -590
   ypos -261
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{"parent.distribution ? 4*parent.wxy.x / ( -2 * parent.wxy.x + 12 * parent.wxy.y + 3) : parent.wxy"} {"parent.distribution ? 9*parent.wxy.y / ( -2*parent.wxy.x + 12*parent.wxy.y + 3) : parent.wxy"}}
  }
set N14e67000 [stack 0]
  Posterize {
   channels rgb
   Colors {{rint(parent.density/3*2)}}
   name Posterize1
   xpos -590
   ypos -191
  }
set N14e66c00 [stack 0]
push $N14e67000
  Dot {
   name Dot15
   xpos -446
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.blue
   to0 rgba.blue
   name Copy1
   xpos -480
   ypos -154
  }
push $N14e66c00
push $N14e67000
  Dot {
   name Dot16
   xpos -666
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.green
   to0 rgba.green
   name Copy2
   xpos -700
   ypos -153
  }
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   center true
   roworder TopBottom
   name ContactSheet3
   xpos -590
   ypos -106
  }
  Expression {
   expr0 r
   expr1 cos(radians(g*360))*b+white.x
   expr2 sin(radians(g*360))*b+white.y
   expr3 a
   name Expression19
   xpos -590
   ypos -58
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{parent.Expression3.white} {parent.Expression3.white}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression2
   label "CIELuv to CIE Yxy"
   xpos -590
   ypos -16
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace2
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -590
   ypos 32
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix1
   label "XYZ to RGB"
   xpos -590
   ypos 81
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin2
   xpos -590
   ypos 119
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp1
   xpos -590
   ypos 152
  }
  Premult {
   name Premult1
   xpos -590
   ypos 194
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge2
   xpos -590
   ypos 242
  }
  Fill {
   output alpha
   name Fill1
   xpos -590
   ypos 297
  }
  Dot {
   name Dot3
   label " GRID"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 378
  }
push $N14ec6800
push $N14e67c00
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression4
   label "CIE Yxy to CIELuv"
   xpos -40
   ypos -280
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 rint(g*Colors)/Colors
   expr2 rint(b*Colors)/Colors
   expr3 a
   name Expression1
   label rint
   xpos -40
   ypos -232
   addUserKnob {20 User}
   addUserKnob {7 Colors R 1 256}
   Colors {{parent.density}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression6
   label "CIELuv to CIE Yxy"
   xpos -40
   ypos -184
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace3
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -112
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix3
   label "XYZ to RGB"
   xpos -40
   ypos -57
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp4
   xpos -40
  }
  Premult {
   name Premult2
   xpos -40
   ypos 55
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge1
   xpos -40
   ypos 110
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin1
   xpos -40
   ypos 273
  }
  Dot {
   name Dot4
   label " DOTS"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -6
   ypos 378
  }
  Switch {
   inputs 2
   which {{parent.style}}
   name Switch1
   xpos -257
   ypos 483
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix2
   label "RGB to XYZ"
   xpos -257
   ypos 560
  }
  Output {
   name Output
   xpos -257
   ypos 740
  }
  ColorWheel {
   inputs 0
   format "256 256 0 0 256 256 1 square_256"
   area {40 40 472 472}
   name ColorWheel2
   xpos -37
   ypos -705
   postage_stamp false
  }
 end_group
set N14ee9d00 [stack 0]
 Group {
  name RGBToXYZ_GamutGrid
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos -184
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut ACEScg
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 ColorWheel {
  inputs 0
  format "512 512 0 0 512 512 1 square_512"
  centerSaturation 1
  fillFormat false
  area {-196 -184 708 696}
  name ColorWheel1
  xpos -920
  ypos 5
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop1
  xpos -920
  ypos 87
 }
 BlackOutside {
  name BlackOutside3
  xpos -920
  ypos 134
 }
set N2a1c1c00 [stack 0]
 Group {
  name RGBToXYZ_GamutC
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1140
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec709
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r+input.width} {parent.ReformatBox4.box_width-input.height}}
  name Position6
  xpos -1140
  ypos 254
 }
push $N2a1c1c00
 Group {
  name RGBToXYZ_GamutB
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut P3D65
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height*2}}
  name Position5
  xpos -1030
  ypos 254
 }
push $N2a1c1c00
 Group {
  name RGBToXYZ_GamutA
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -920
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec2020
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position4
  xpos -920
  ypos 254
 }
push $N14ee9d00
 Reformat {
  type scale
  scale 0.8
  turn true
  filter impulse
  black_outside true
  name Reformat2
  xpos -920
  ypos -129
 }
 BlackOutside {
  name BlackOutside2
  xpos -920
  ypos -106
 }
 Position {
  translate {{Rectangle1.area.r} {parent.Position3.translate.y-input.height}}
  name Position2
  xpos -920
  ypos -81
 }
 Group {
  inputs 0
  name ColorChecker24_After_November_2014
  label "CIE XYZ D50"
  xpos -920
  ypos -352
  addUserKnob {20 colorchecker_tab l "ColorChecker24 - After November 2014"}
  addUserKnob {3 patch_resolution}
  patch_resolution 48
 }
  Group {
   inputs 0
   name bluish_green
   selected true
   xpos 622
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.30451114 0.4143554688 0.344352688 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "bluish green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 6
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_flower
   xpos 512
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2419823988 0.2287175998 0.3282104382 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue flower"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 5
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name foliage
   xpos 402
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1114392339 0.1346792679 0.05239320311 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob foliage
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 4
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_sky
   xpos 292
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1652470004 0.1785519348 0.2546024121 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue sky"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 3
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name light_skin
   xpos 180
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3811104477 0.336202304 0.1852590702 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "light skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 2
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 135
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name dark_skin
   xpos 70
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1136398927 0.09832436105 0.047793811 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "dark skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 1
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 290
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 290
    ypos 158
   }
   Output {
    name Output
    xpos 290
    ypos 230
   }
  end_group
  Group {
   inputs 0
   name orange_yellow
   xpos 622
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4769723742 0.4293377578 0.06005041429 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "orange yellow"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 12
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow_green
   xpos 512
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3427379502 0.4331759409 0.08330791241 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "yellow green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 11
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purple
   xpos 401
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08353888545 0.06276662955 0.1042075686 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob purple
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 10
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name moderate_red
   xpos 290
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2915036416 0.188999956 0.09736350318 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "moderate red"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 9
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purplish_blue
   xpos 180
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1200518326 0.1091090233 0.2874447494 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "purplish blue"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 8
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name orange
   xpos 74
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4073691399 0.3126416159 0.05130591012 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob orange
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 7
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name cyan
   xpos 622
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1247966941 0.180609913 0.2913392383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob cyan
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 18
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name magenta
   xpos 512
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.299122798 0.1895114577 0.2213469194 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob magenta
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 17
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow
   xpos 399
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5888922356 0.5992976803 0.07077420003 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob yellow
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 16
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 182
   }
  end_group
  Group {
   inputs 0
   name red
   xpos 292
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2143728424 0.127800835 0.03868150726 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob red
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 15
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name green
   xpos 182
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1413517689 0.2233437582 0.07287461742 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob green
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 14
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue
   xpos 72
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.06809095613 0.05596214063 0.2077405936 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob blue
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 13
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name black_2
   xpos 623
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.03042544265 0.03151319431 0.02656724434 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "black 2 (1.5 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 24
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_3
   xpos 512
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08448968042 0.08817234828 0.07391630753 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 3.5 (1.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 23
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_5
   xpos 403
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1835495863 0.1906228754 0.1566717383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 5 (.70 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 22
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_6
   xpos 292
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3495921991 0.3648652066 0.3013565492 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 6.5 (.44 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 21
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_8
   xpos 179
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5665335579 0.5899709702 0.4828473821 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 8 (.23 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 20
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name white_9
   xpos 70
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.8436985288 0.8806903203 0.6936778752 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "white 9.5 (.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 19
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 134
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  ContactSheet {
   inputs 24
   width {{"rint(parent.patch_resolution * 6 + gap * 7)"}}
   height {{"rint(parent.patch_resolution * 4 + gap * 5)"}}
   rows 4
   columns 6
   startframe 1
   endframe 1
   name ContactSheet
   xpos 620
   ypos 206
  }
  Unpremult {
   name Unpremult1
   xpos 620
   ypos 278
  }
  Output {
   name Output
   xpos 620
   ypos 446
  }
 end_group
 BlackOutside {
  name BlackOutside4
  xpos -920
  ypos -298
 }
 Position {
  translate {{parent.Reformat1.box_width*3+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position7
  xpos -920
  ypos -273
 }
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant5
  xpos -700
  ypos -1354
  postage_stamp false
 }
 Dot {
  name Dot25
  xpos -666
  ypos -1302
 }
set N3ac6e000 [stack 0]
 Dot {
  name Dot27
  xpos -1546
  ypos -1302
 }
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox1
  xpos -1580
  ypos -994
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  color {{p1}}
  name Ramp3
  xpos -1580
  ypos -898
 }
 ColorLookup {
  lut {master {}
    red {curve}
    green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
    blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
    alpha {}}
  name ColorLookup7
  label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
  xpos -1580
  ypos -790
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace12
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1580
  ypos -688
 }
 Fill {
  output alpha
  name Fill5
  xpos -1580
  ypos -639
 }
 BlackOutside {
  name BlackOutside7
  xpos -1580
  ypos -562
 }
 Position {
  translate {6 {parent.Position1.translate.y-input.height}}
  name Position3
  xpos -1580
  ypos -538
 }
 Dot {
  name Dot15
  xpos -1546
  ypos -414
 }
push $N3ac6e000
 Reformat {
  type "to box"
  box_width 2048
  box_height 2048
  box_fixed true
  name ReformatBox4
  xpos -700
  ypos -1258
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression7
  xpos -700
  ypos -1209
 }
 Dot {
  name Dot10
  xpos -666
  ypos -1158
 }
set N3ac1a400 [stack 0]
 Dot {
  name Dot26
  xpos -886
  ypos -1158
 }
set N3ac1a000 [stack 0]
 Dot {
  name Dot23
  xpos -1106
  ypos -1158
 }
set N3ac19c00 [stack 0]
 Dot {
  name Dot12
  xpos -1326
  ypos -1158
 }
 Mirror2 {
  flip true
  flop true
  name Mirror2_1
  xpos -1360
  ypos -1042
 }
 Reformat {
  type "to box"
  box_width 512
  box_height {{box_width}}
  box_fixed true
  name Reformat1
  xpos -1360
  ypos -994
 }
 Gamma {
  channels rgb
  value 2
  name Gamma1
  xpos -1360
  ypos -898
 }
 Multiply {
  channels rgb
  value 8000
  name Multiply1
  label "\[value value]"
  xpos -1360
  ypos -811
 }
 ColorLookup {
  lut {master {}
    red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
    green {curve R 0.6589999795 x50 0.6542205811 0.6484853029 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6457066536 0.6532088518 0.6575522423 0.6589999795}
    blue {curve R 0.3160000145 x50 0.324739933 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
    alpha {}}
  name ColorLookup5
  label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
  xpos -1360
  ypos -775
 }
 Multiply {
  channels rgb
  value {0.31 1 1 1}
  name Multiply2
  label "dim boundary"
  xpos -1360
  ypos -725
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace5
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1360
  ypos -688
 }
 Fill {
  output alpha
  name Fill4
  xpos -1360
  ypos -639
 }
 BlackOutside {
  name BlackOutside1
  xpos -1360
  ypos -562
 }
 Position {
  translate {6 {ReformatBox4.box_width-input.width}}
  name Position1
  xpos -1360
  ypos -538
 }
 Dot {
  name Dot24
  xpos -1326
  ypos -486
 }
push $N3ac19c00
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox2
  xpos -1140
  ypos -994
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression1
  xpos -1140
  ypos -898
 }
set N3abe5800 [stack 0]
 Dot {
  name Dot8
  xpos -996
  ypos -894
 }
 ColorLookup {
  lut {master {curve L 0 s0 t0.9499999881 C k x0.308139503 1 s0}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup1
  xpos -1030
  ypos -849
 }
 Dot {
  name Dot14
  xpos -996
  ypos -750
 }
push $N3abe5800
 Multiply {
  channels rgb
  value 269
  name Multiply5
  label "\[value value]"
  xpos -1140
  ypos -856
 }
 ColorLookup {
  lut {master {}
    red {curve C 1.8783474 1.85965741 1.8410753 1.82260251 1.80424976 1.78602886 1.76794314 1.75000143 1.73221421 1.71458244 1.69711792 1.67982578 1.66271067 1.6457777 1.62903571 1.6124835 1.59613538 1.57998943 1.56404996 1.54832447 1.5328095 1.51751649 1.50244594 1.48759735 1.47297573 1.45858264 1.44442391 1.43049574 1.41680288 1.40334678 1.39012623 1.37714779 1.36440396 1.35190022 1.33963728 1.32761216 1.31582856 1.30428183 1.29297352 1.28190565 1.27107596 1.2604804 1.25012183 1.23999798 1.23010659 1.22044563 1.21101499 1.20181489 1.19284034 1.18408906 1.17556167 1.16725397 1.15916491 1.15129638 1.14363372 1.13618886 1.12895167 1.12192106 1.11509454 1.10846853 1.10204577 1.09580922 1.08977199 1.08392429 1.07826447 1.07278681 1.06749392 1.06237841 1.05743873 1.05267084 1.04807138 1.04364109 1.03937256 1.03526449 1.03131545 1.02751946 1.02387333 1.02037668 1.01702523 1.01381445 1.01074362 1.00780725 1.00500631 1.00233305 0.99978602 0.99736285 0.9950608 0.99287677 0.99080539 0.98884678 0.98699367 0.9852494 0.98361033 0.98206747 0.98062134 0.97926998 0.97800934 0.97683728 0.97575116 0.97474778 0.97382426 0.97297859 0.97220623 0.97150886 0.97087657 0.97031689 0.96981871 0.96938527 0.96900952 0.96869147 0.96842706 0.96821606 0.96805781 0.96794283 0.96787858 0.96785843 0.96787864 0.96793604 0.96803701 0.96817231 0.96833968 0.96854311 0.96877253 0.96903455 0.96932232 0.96963543 0.96997368 0.97033387 0.97071254 0.9711163 0.97153723 0.97197378 0.97242606 0.97289121 0.97337079 0.97386622 0.97437072 0.97488332 0.97540969 0.97594237 0.97647977 0.97702706 0.97757769 0.97813445 0.97869468 0.97925854 0.97982538 0.98039114 0.98096472 0.98153675 0.98210776 0.98267955 0.98325121 0.98382008 0.98438704 0.9849571 0.98552132 0.98608243 0.98664182 0.98719966 0.98775077 0.98829895 0.98884273 0.98938417 0.98991877 0.9904511 0.99097681 0.99149919 0.99201453 0.99252397 0.99303031 0.99353105 0.99402624 0.99451613 0.99499857 0.99547589 0.99594522 0.99641174 0.99687338 0.99732745 0.99777603 0.9982177 0.99865389 0.999084 0.99950838 0.99992663 1.00033772 1.00074494 1.00114489 1.00153947 1.00192833 1.00231075 1.00268865 1.00305855 1.00342607 1.00378489 1.00413895 1.00448751 1.00483036 1.00517035 1.00550389 1.00583148 1.00615203 1.00646758 1.00678015 1.00708604 1.00738645 1.00768471 1.00797844 1.0082655 1.00854778 1.00882483 1.00909901 1.00936711 1.00963116 1.00989032 1.0101465 1.01039672 1.01064491 1.01088691 1.0111258 1.01135957 1.01158977 1.01181614 1.01203847 1.01225793 1.01247287 1.01268291 1.01289058 1.01309609 1.01329684 1.01349473 1.0136888 1.0138787 1.01406395 1.01424909 1.01442885 1.01460576 1.01478052 1.01495218 1.01512218 1.01528883 1.01545072 1.01561022 1.01576698 1.01592219 1.01607502 1.01622343 1.01636875 1.0165143 1.01665616 1.01679492 1.0169313 1.01706588 1.01719737 1.01732695 1.01745498 1.01757956 1.01770294 1.01782393 1.01794255 1.0180583 1.01817465 1.01828551 1.01839495 1.01850486 1.01861191 1.01871693 1.01882088 1.01891339}
    green {curve C 1}
    blue {curve C 0.00879261 0.00962762 0.010532 0.01151017 0.01256675 0.01370643 0.01493413 0.01625487 0.01767381 0.01919618 0.02082733 0.02257277 0.02443803 0.02642871 0.02855051 0.03080913 0.0332104 0.0357601 0.03846392 0.04132775 0.04435719 0.04755813 0.05093599 0.05449668 0.0582453 0.0621875 0.06632853 0.07067341 0.07522713 0.07999477 0.08498063 0.09018957 0.09562518 0.10129225 0.10719412 0.11333443 0.11971687 0.12634411 0.133219 0.14034435 0.14772213 0.15535444 0.16324303 0.17138906 0.179794 0.18845794 0.197382 0.20656651 0.21601067 0.22571453 0.23567709 0.24589771 0.25637382 0.26710594 0.2780903 0.28932518 0.30080822 0.3125369 0.32450783 0.33671761 0.34916404 0.36183971 0.37474373 0.38787127 0.40121818 0.41477671 0.42854655 0.44251823 0.45668846 0.47105014 0.48559928 0.50033116 0.5152359 0.5303098 0.5455451 0.56093836 0.5764783 0.59215891 0.60797763 0.62392306 0.63999057 0.65616876 0.6724565 0.68884456 0.70532417 0.72188419 0.73852479 0.7552371 0.77200818 0.78883314 0.80570388 0.82261622 0.83956301 0.8565321 0.87351894 0.89051074 0.90751225 0.92450547 0.94148719 0.95845115 0.97538745 0.99229181 1.00915313 1.02597356 1.04273522 1.05944169 1.07608175 1.09265125 1.10914159 1.12555146 1.14187002 1.15809321 1.1742171 1.190238 1.20614767 1.22194457 1.23762202 1.2531724 1.26859927 1.28389311 1.29905295 1.31407428 1.32895291 1.34368753 1.35827363 1.3727088 1.38699389 1.40111876 1.41508293 1.42889357 1.44254065 1.45602405 1.46934104 1.48249614 1.49548101 1.50830269 1.5209527 1.53343177 1.54574537 1.5578897 1.56985986 1.5816654 1.59329891 1.60476208 1.61605716 1.62718153 1.63813758 1.64892519 1.65955138 1.67000985 1.68030369 1.69043732 1.70040607 1.71021223 1.71985734 1.72934508 1.73867714 1.74785423 1.75688136 1.76575518 1.77447391 1.78304338 1.79146802 1.79975164 1.80788386 1.81587982 1.82373333 1.83144975 1.83902776 1.84647095 1.85378456 1.86096811 1.86802399 1.87495112 1.88175035 1.88842535 1.89497983 1.90141833 1.90774179 1.91394711 1.92004013 1.92602086 1.93188739 1.93765306 1.94330883 1.94886208 1.95430994 1.95965815 1.96490622 1.97005856 1.97511387 1.98007631 1.98494554 1.98972344 1.99441445 1.99901712 2.00353193 2.00796437 2.01231384 2.01658392 2.02076721 2.02487659 2.02890825 2.03286695 2.03675175 2.04056406 2.04430199 2.04797506 2.05157685 2.05511236 2.0585804 2.06198287 2.06532407 2.06860161 2.07181907 2.07497644 2.07807779 2.0811162 2.08409977 2.08702946 2.08990335 2.09272337 2.09549189 2.0982089 2.10087585 2.10349345 2.10606146 2.1085825 2.11105394 2.11348104 2.11586332 2.11820364 2.12050176 2.12275648 2.12496805 2.127141 2.12927723 2.13136625 2.13341999 2.13543844 2.13741732 2.13936305 2.1412704 2.1431427 2.14498401 2.14678812 2.14856291 2.1503005 2.15200949 2.15368938 2.15533352 2.15695238 2.15853977 2.16009951 2.16162968 2.16313291 2.16460824 2.16605687 2.16747928 2.16887903 2.17024994 2.1715951 2.17291784 2.17421341 2.17548871 2.17674041 2.17797112 2.17918396 2.18036819 2.18143296}
    alpha {}}
  name ColorLookup3
  label "Planckian Locus 0-269"
  xpos -1140
  ypos -808
 }
 Multiply {
  inputs 1+1
  channels rgb
  value 0
  maskChannelMask rgba.red
  invert_mask true
  name Multiply3
  label dim
  xpos -1140
  ypos -760
 }
 BlackOutside {
  name BlackOutside6
  xpos -1140
  ypos -706
 }
 Position {
  translate {6 {parent.Position2.translate.y-input.height}}
  name Position8
  xpos -1140
  ypos -682
 }
 Dot {
  name Dot28
  xpos -1106
  ypos -654
 }
push $N3ac1a000
 Dot {
  name Dot4
  xpos -886
  ypos -1086
 }
set N3b282c00 [stack 0]
 Rectangle {
  replace true
  area {0 0 6 {height}}
  name Rectangle1
  xpos -810
  ypos -1089
 }
 BlackOutside {
  name BlackOutside5
  xpos -810
  ypos -1041
 }
push $N3b282c00
 Radial {
  inputs 1+1
  replace true
  area {-5422 -3542 7470 5590}
  softness 0
  ramp linear
  color {0.0719 0.02604 0.0001 1}
  p1 {0 0}
  color0 {0.039378 0.001097 0.188331 1}
  p0 {0 2048}
  name Radial1
  xpos -920
  ypos -1041
 }
 Dot {
  name Dot9
  xpos -886
  ypos -894
 }
push $N3ac1a400
 Gamma {
  channels rgba
  value 0.5
  name Gamma2
  xpos -700
  ypos -1120
 }
 Expression {
  temp_name0 start
  temp_expr0 360
  temp_name1 end
  temp_expr1 830
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 r*(end-start)+start
  channel1 none
  channel2 none
  expr3 1
  name Expression2
  label "360nm to 830nm"
  xpos -700
  ypos -1096
 }
 ColorLookup {
  lut {master {}
    red {curve x360 0.0001299 C 0.00014585 0.0001638 0.000184 0.00020669 0.0002321 0.00026073 0.00029307 0.00032939 0.00036991 0.0004149 0.00046416 0.00051899 0.00058185 0.00065523 0.0007416 0.00084503 0.00096453 0.00109495 0.00123115 0.001368 0.00150205 0.00164233 0.00180238 0.00199576 0.002236 0.00253539 0.0028926 0.00330083 0.00375324 0.004243 0.00476239 0.00533005 0.00597871 0.00674112 0.00765 0.00875137 0.01002888 0.0114217 0.01286901 0.01431 0.01570443 0.01714744 0.01878122 0.02074801 0.02319 0.02620736 0.02978248 0.03388092 0.03846824 0.04351 0.0489956 0.0550226 0.0617188 0.069212 0.07763 0.08695811 0.09717672 0.1084063 0.1207672 0.13438 0.1493582 0.16539571 0.1819831 0.19861101 0.21477 0.23018681 0.24487969 0.25877729 0.27180791 0.28389999 0.29494381 0.3048965 0.31378731 0.32164541 0.3285 0.3343513 0.33921009 0.34312129 0.3461296 0.34828001 0.3495999 0.3501474 0.35001299 0.349287 0.34806001 0.34637329 0.34426239 0.3418088 0.3390941 0.3362 0.33319771 0.33004111 0.32663569 0.32288679 0.31869999 0.3140251 0.30888399 0.3032904 0.2972579 0.29080001 0.28397009 0.27672139 0.2689178 0.26042271 0.2511 0.2408475 0.2298512 0.2184072 0.2068115 0.19536 0.18421359 0.1733273 0.16268811 0.1522833 0.14210001 0.1321786 0.1225696 0.1132752 0.1042979 0.09564 0.08729955 0.07930804 0.07171776 0.06458099 0.05795001 0.05186211 0.04628152 0.04115088 0.03641283 0.03201 0.0279172 0.0241444 0.020687 0.0175404 0.0147 0.01216179 0.00991996 0.00796724 0.00629635 0.0049 0.00377717 0.00294532 0.00242488 0.00223629 0.0024 0.00292552 0.00383656 0.00517484 0.00698208 0.0093 0.01214949 0.01553588 0.01947752 0.02399277 0.0291 0.03481485 0.04112016 0.04798504 0.05537861 0.06327 0.07163501 0.08046224 0.08973996 0.09945645 0.1096 0.1201674 0.1311145 0.1423679 0.15385421 0.1655 0.17725711 0.18914001 0.2011694 0.21336579 0.2257499 0.2383209 0.2510668 0.26399219 0.2771017 0.2904 0.30389121 0.31757259 0.33143839 0.3454828 0.35969999 0.37408391 0.3886396 0.4033784 0.41831151 0.43344989 0.44879529 0.46433601 0.480064 0.49597129 0.51205009 0.52829587 0.54469162 0.56120938 0.57782149 0.59450001 0.6112209 0.62797582 0.64476019 0.66156971 0.67839998 0.69523919 0.7120586 0.72882837 0.7455188 0.76209998 0.77854317 0.79482561 0.81092638 0.82682478 0.84249997 0.85793251 0.87308162 0.88789439 0.90231812 0.9163 0.9297995 0.94279838 0.95527762 0.96721792 0.97860003 0.9893856 0.99954879 1.00908923 1.01800644 1.02629995 1.03398275 1.04098594 1.04718804 1.05246675 1.05669999 1.05979443 1.06179917 1.06280684 1.0629096 1.06219995 1.06073523 1.05844355 1.05522442 1.05097675 1.04560006 1.03903687 1.03136074 1.02266622 1.0130477 1.00259995 0.99136752 0.97933137 0.96649158 0.9528479 0.93839997 0.92319399 0.90724403 0.89050198 0.87291998 0.85444993 0.83508402 0.814946 0.794186 0.77295399 0.75139999 0.72958362 0.70758879 0.68560219 0.66381037 0.64240003 0.62151492 0.6011138 0.58110517 0.56139767 0.54189998 0.52259952 0.50354642 0.4847436 0.46619391 0.4479 0.42986131 0.41209799 0.39464399 0.37753329 0.3608 0.34445629 0.32851681 0.31301919 0.29800111 0.28349999 0.26954481 0.25611839 0.2431896 0.2307272 0.21870001 0.2070971 0.19592319 0.1851708 0.1748323 0.1649 0.1553667 0.14623 0.13749 0.1291467 0.1212 0.1136397 0.106465 0.09969044 0.09333061 0.0874 0.08190096 0.07680428 0.07207712 0.06768664 0.0636 0.05980685 0.05628216 0.05297104 0.04981861 0.04677 0.04378405 0.04087536 0.03807264 0.03540461 0.0329 0.03056419 0.02838056 0.02634484 0.02445275 0.0227 0.02108429 0.01959988 0.01823732 0.01698717 0.01584 0.01479064 0.01383132 0.01294868 0.0121292 0.01135916 0.01062935 0.00993885 0.00928842 0.00867885 0.00811092 0.00758239 0.00708875 0.00662731 0.00619541 0.00579035 0.00540983 0.00505258 0.00471751 0.00440351 0.00410946 0.00383391 0.00357575 0.00333434 0.00310907 0.00289933 0.00270435 0.00252302 0.00235417 0.00219662 0.00204919 0.00191096 0.00178144 0.00166011 0.00154646 0.00143997 0.00134004 0.00124628 0.00115847 0.00107643 0.00099995 0.00092874 0.00086243 0.00080075 0.0007434 0.00069008 0.00064052 0.0005945 0.00055186 0.00051243 0.00047602 0.00044245 0.00041151 0.00038298 0.00035665 0.0003323 0.00030976 0.00028889 0.00026954 0.00025157 0.00023483 0.00021917 0.00020453 0.00019084 0.00017807 0.00016615 0.00015502 0.00014462 0.00013491 0.00012585 0.00011741 0.00010955 0.00010222 9.539e-05 8.902e-05 8.308e-05 7.751e-05 7.231e-05 6.746e-05 6.293e-05 5.871e-05 5.477e-05 5.11e-05 4.768e-05 4.449e-05 4.151e-05 3.873e-05 3.614e-05 3.372e-05 3.146e-05 2.935e-05 2.738e-05 2.552e-05 2.379e-05 2.218e-05 2.067e-05 1.927e-05 1.797e-05 1.675e-05 1.562e-05 1.456e-05 1.357e-05 1.265e-05 1.18e-05 1.1e-05 1.025e-05 9.56e-06 8.91e-06 8.31e-06 7.75e-06 7.22e-06 6.73e-06 6.28e-06 5.85e-06 5.46e-06 5.09e-06 4.74e-06 4.42e-06 4.12e-06 3.84e-06 3.58e-06 3.34e-06 3.11e-06 2.9e-06 2.71e-06 2.52e-06 2.35e-06 2.19e-06 2.04e-06 1.91e-06 1.78e-06 1.66e-06 1.54e-06 1.44e-06 1.34e-06 S 1.25e-06}
    green {curve x360 3.92e-06 C 4.39e-06 4.93e-06 5.53e-06 6.21e-06 6.97e-06 7.81e-06 8.77e-06 9.84e-06 1.104e-05 1.239e-05 1.389e-05 1.556e-05 1.744e-05 1.958e-05 2.202e-05 2.484e-05 2.804e-05 3.153e-05 3.522e-05 3.9e-05 4.283e-05 4.691e-05 5.159e-05 5.718e-05 6.4e-05 7.234e-05 8.221e-05 9.351e-05 0.00010614 0.00012 0.00013498 0.00015149 0.00017021 0.00019182 0.000217 0.00024691 0.00028124 0.00031852 0.00035727 0.000396 0.00043371 0.00047302 0.00051788 0.00057222 0.00064 0.00072456 0.0008255 0.00094116 0.00106988 0.00121 0.00136209 0.00153075 0.00172037 0.00193532 0.00218 0.0024548 0.002764 0.0031178 0.0035264 0.004 0.00454624 0.00515932 0.00582928 0.00654616 0.0073 0.00808651 0.00890872 0.00976768 0.01066443 0.0116 0.01257317 0.01358272 0.01462968 0.01571509 0.01684 0.01800736 0.01921448 0.02045392 0.02171824 0.023 0.02429461 0.02561024 0.02695857 0.02835125 0.0298 0.03131083 0.03288368 0.03452112 0.03622571 0.038 0.03984667 0.041768 0.043766 0.04584267 0.048 0.05024368 0.05257304 0.05498056 0.05745872 0.06 0.06260197 0.06527752 0.06804208 0.07091109 0.0739 0.077016 0.0802664 0.0836668 0.0872328 0.09098 0.09491755 0.09904584 0.1033674 0.1078846 0.1126 0.117532 0.1226744 0.12799279 0.1334528 0.13902 0.1446764 0.1504693 0.15646189 0.1627177 0.1693 0.1762431 0.18355811 0.1912735 0.19941799 0.20802 0.2171199 0.2267345 0.2368571 0.2474812 0.2586 0.2701849 0.28229389 0.2950505 0.30857801 0.32300001 0.33840209 0.35468581 0.37169859 0.3892875 0.4073 0.42562991 0.44430959 0.4633944 0.48293951 0.50300002 0.52356929 0.54451197 0.56568998 0.58696532 0.60820001 0.6293456 0.65030682 0.67087519 0.69084239 0.70999998 0.72818518 0.74546361 0.76196939 0.7778368 0.79320002 0.80811042 0.82249618 0.83630681 0.8494916 0.86199999 0.87381083 0.88496238 0.89549363 0.90544319 0.91485012 0.92373478 0.93209243 0.93992257 0.94722521 0.954 0.9602561 0.96600741 0.97126061 0.97602248 0.98030001 0.98409241 0.98741817 0.99031281 0.99281162 0.99495012 0.99671078 0.99809831 0.99911201 0.99974817 1 0.99985671 0.99930459 0.99832553 0.99689871 0.995 0.9926005 0.98974258 0.98644441 0.98272407 0.97860003 0.97408372 0.96917123 0.96385682 0.95813489 0.95200002 0.94545043 0.93849921 0.93116277 0.92345762 0.91540003 0.90700638 0.89827722 0.8892048 0.8797816 0.87 0.85986131 0.849392 0.83862197 0.82758129 0.81629997 0.80479473 0.793082 0.781192 0.76915473 0.75700003 0.74475408 0.73242241 0.7200036 0.70749652 0.69489998 0.68221921 0.66947162 0.65667439 0.64384478 0.63099998 0.61815548 0.60531437 0.59247559 0.57963789 0.5668 0.5539611 0.54113722 0.5283528 0.51563227 0.50300002 0.4904688 0.47803041 0.46567759 0.4534032 0.44119999 0.42908001 0.417036 0.40503201 0.39303201 0.38100001 0.36891839 0.3568272 0.34477681 0.33281761 0.32100001 0.30933809 0.2978504 0.28659359 0.27562451 0.26499999 0.25476319 0.2448896 0.2353344 0.22605281 0.21699999 0.20816161 0.1995488 0.1911552 0.1829744 0.175 0.1672235 0.15964641 0.1522776 0.1451259 0.1382 0.1315003 0.1250248 0.1187792 0.1127691 0.107 0.1014762 0.09618864 0.09112296 0.08626485 0.0816 0.07712064 0.07282552 0.06871008 0.06476976 0.061 0.05739621 0.05395504 0.05067376 0.04754965 0.04458 0.04175872 0.03908496 0.03656384 0.03420048 0.032 0.02996261 0.02807664 0.02632936 0.02470805 0.0232 0.02180077 0.02050112 0.01928108 0.01812069 0.017 0.01590379 0.01483718 0.01381068 0.01283478 0.01192 0.01106831 0.01027339 0.00953331 0.00884616 0.00821 0.00762378 0.00708542 0.00659148 0.00613848 0.005723 0.00534306 0.0049958 0.0046764 0.00438007 0.004102 0.00383845 0.0035891 0.00335422 0.00313409 0.002929 0.00273814 0.00255988 0.00239324 0.00223728 0.002091 0.00195359 0.00182458 0.00170358 0.00159019 0.001484 0.0013845 0.00129127 0.00120409 0.00112274 0.001047 0.00097659 0.00091111 0.00085013 0.00079324 0.00074 0.00069008 0.00064331 0.0005995 0.00055845 0.00052 0.00048391 0.00045005 0.00041835 0.00038872 0.0003611 0.00033538 0.00031144 0.00028917 0.00026845 0.0002492 0.0002313 0.00021469 0.00019929 0.00018505 0.0001719 0.00015978 0.0001486 0.0001383 0.00012879 0.00012 0.00011186 0.00010432 9.734e-05 9.085e-05 8.48e-05 7.915e-05 7.386e-05 6.892e-05 6.43e-05 6e-05 5.598e-05 5.223e-05 4.872e-05 4.545e-05 4.24e-05 3.956e-05 3.692e-05 3.445e-05 3.215e-05 3e-05 2.799e-05 2.611e-05 2.436e-05 2.272e-05 2.12e-05 1.978e-05 1.845e-05 1.722e-05 1.606e-05 1.499e-05 1.399e-05 1.305e-05 1.218e-05 1.136e-05 1.06e-05 9.89e-06 9.22e-06 8.59e-06 8.01e-06 7.47e-06 6.96e-06 6.49e-06 6.05e-06 5.64e-06 5.26e-06 4.9e-06 4.57e-06 4.26e-06 3.97e-06 3.7e-06 3.45e-06 3.22e-06 3e-06 2.8e-06 2.61e-06 2.43e-06 2.27e-06 2.11e-06 1.97e-06 1.84e-06 1.71e-06 1.6e-06 1.49e-06 1.39e-06 1.29e-06 1.21e-06 1.12e-06 1.05e-06 9.8e-07 9.1e-07 8.5e-07 7.9e-07 7.4e-07 6.9e-07 6.4e-07 6e-07 5.6e-07 5.2e-07 4.8e-07 S 4.5e-07}
    blue {curve x360 0.0006061 C 0.00068088 0.00076515 0.00086001 0.00096659 0.001086 0.00122059 0.00137273 0.00154358 0.00173429 0.001946 0.00217778 0.00243581 0.00273195 0.00307806 0.003486 0.00397523 0.00454088 0.00515832 0.00580291 0.00645 0.00708322 0.00774549 0.00850115 0.00941454 0.01054999 0.0119658 0.01365587 0.01558805 0.01773015 0.02005001 0.02251136 0.02520288 0.02827972 0.03189704 0.03621 0.04143771 0.04750372 0.05411988 0.06099803 0.06785001 0.07448632 0.08136156 0.08915364 0.09854048 0.1102 0.1246133 0.1417017 0.16130351 0.1832568 0.20739999 0.23369209 0.26261139 0.29477459 0.33079851 0.37130001 0.4162091 0.4654642 0.51969481 0.5795303 0.64560002 0.71848381 0.79671329 0.87784588 0.95943898 1.0390501 1.11536729 1.18849707 1.25812328 1.32392955 1.38559997 1.44263518 1.49480355 1.54219031 1.58488071 1.62295997 1.65640485 1.68529594 1.70987451 1.73038209 1.74705994 1.76004458 1.76962328 1.77626371 1.78043342 1.78260004 1.78296816 1.78169978 1.77919817 1.7758671 1.77210998 1.76825893 1.76403904 1.7589438 1.75246632 1.74409997 1.73355949 1.7208581 1.70593691 1.68873715 1.66919994 1.64752865 1.62341273 1.59602225 1.56452799 1.52810001 1.4861114 1.43952155 1.38987994 1.33873618 1.28763998 1.23742235 1.18782425 1.13876104 1.09014797 1.04190004 0.99419761 0.94734728 0.90145308 0.8566193 0.81295007 0.77051729 0.7294448 0.68991357 0.65210491 0.61619997 0.58232862 0.55041617 0.52033758 0.49196729 0.46518001 0.4399246 0.41618359 0.39388219 0.3729459 0.35330001 0.33485779 0.31755209 0.30133751 0.28616861 0.27200001 0.25881711 0.2464838 0.2347718 0.2234533 0.2123 0.20116919 0.19011959 0.1792254 0.1685608 0.1582 0.1481383 0.1383758 0.1289942 0.1200751 0.1117 0.1039048 0.09666748 0.08998272 0.08384531 0.07824999 0.07320899 0.06867816 0.06456784 0.06078835 0.05725001 0.05390435 0.05074664 0.04775276 0.04489859 0.04216 0.03950728 0.03693564 0.03445836 0.03208872 0.02984 0.02771181 0.02569444 0.02378716 0.02198925 0.0203 0.01871805 0.01724036 0.01586364 0.01458461 0.0134 0.01230723 0.01130188 0.01037792 0.00952931 0.00875 0.0080352 0.0073816 0.0067854 0.0062428 0.00575 0.0053036 0.0048998 0.0045342 0.0042024 0.0039 0.0036232 0.0033706 0.0031414 0.0029348 0.00275 0.0025852 0.0024386 0.0023094 0.0021968 0.0021 0.00201773 0.0019482 0.0018898 0.00184093 0.0018 0.00176627 0.0017378 0.0017112 0.00168307 0.00165 0.00161013 0.0015644 0.0015136 0.00145853 0.0014 0.00133667 0.00127 0.001205 0.00114667 0.0011 0.0010688 0.0010494 0.0010356 0.0010212 0.001 0.00096864 0.00092992 0.00088688 0.00084256 0.0008 0.00076096 0.00072368 0.00068592 0.00064544 0.0006 0.00054787 0.0004916 0.0004354 0.00038347 0.00034 0.00030725 0.00028316 0.00026544 0.00025181 0.00024 0.00022955 0.00022064 0.00021196 0.00020219 0.00019 0.00017421 0.00015564 0.00013596 0.00011685 0.0001 8.613e-05 7.46e-05 6.5e-05 5.693e-05 5e-05 4.416e-05 3.948e-05 3.572e-05 3.264e-05 3e-05 2.765e-05 2.556e-05 2.364e-05 2.181e-05 2e-05 1.813e-05 1.62e-05 1.42e-05 1.213e-05 1e-05 7.73e-06 5.4e-06 3.2e-06 1.33e-06 0 0 0 0 0 0 0 0 S 0}
    alpha {}}
  name ColorLookup4
  label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
  xpos -700
  ypos -1030
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeLineOfPurples
  xpos -700
  ypos -897
  disable {{!parent.draw_line_of_purples}}
 }
 Fill {
  color {0 0 0 1}
  name Disable_SpectralLocus
  xpos -700
  ypos -826
  disable {{parent.draw_spectral_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePlanckianLocus
  xpos -700
  ypos -658
  disable {{!parent.draw_planckian_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut
  xpos -700
  ypos -489
  disable {{!parent.draw_pointers_gamut}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut_Samples
  xpos -700
  ypos -417
  disable {{!draw_pointers_samples}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeMacbeth
  xpos -700
  ypos -273
  disable {{!parent.draw_macbeth_chart}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutGrid
  xpos -700
  ypos -81
  disable {{!parent.gamut_grid}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutA
  xpos -700
  ypos 255
  disable {{!parent.gamut_a}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutB
  xpos -700
  ypos 279
  disable {{!parent.gamut_b}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutC
  xpos -700
  ypos 303
  disable {{!parent.gamut_c}}
 }
 Dot {
  name Dot2
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 450
 }
set N3b222000 [stack 0]
 Dot {
  name Dot5
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 450
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace6
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -590
  ypos 488
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression5
  label "CIE Yxy to CIELuv"
  xpos -590
  ypos 536
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot11
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 618
 }
push $N3b222000
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  invert true
  name ColorMatrix1
  label "XYZ to working"
  xpos -700
  ypos 488
  disable {{!map_overlays_to_input_gamut}}
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_grid\" iterate pixelWise b2e7b5f8a89bdb0629aa8cc2eae387ef3436f24cb0af642eeba41235874506c4 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 6 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== \"draw_axes\" Bool 1 AA== \"grid_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== 6 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 \"draw_axes\" 1 1 \"grid_color\" 4 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_grid : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n  bool draw_axes;\n  float4 grid_color;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  void draw_grid() \{\n    // grid width in pixels. expresses a 0 to 1 range in CIE xy\n    float grid_width = 1.0f * outsize + offset;\n    // draw grid lines\n    float i = offset;\n    while (i <= grid_width && i > 0.0f) \{\n      write_aa(offset, i, grid_color);\n      write_aa(i, offset, grid_color);\n      i += 1.0;\n    \}\n    // cross-hatching interval in pixels\n    float hatch_interval = (grid_width - offset) * 0.1f;\n    // cross-hatch length in pixels\n    float hatch_width = outsize * 0.01f;\n    i = offset;\n    while (i <= grid_width) \{\n      i += hatch_interval;\n      float j = 0.0;\n      while (j <= hatch_width/2) \{\n        write_aa(offset+j, i, grid_color);\n        write_aa(offset-j, i, grid_color);\n        write_aa(i, offset+j, grid_color);\n        write_aa(i, offset-j, grid_color);\n        j += 1.0;\n      \}\n    \}\n  \}\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n\n    // draw CIExy coordinate system axes\n    if (draw_axes && pos.x == 0 && pos.y == 0) \{\n      draw_grid();\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_grid_padding {{parent.PlotChromaticities.PlotChromaticity_padding}}
  PlotChromaticity_grid_left_margin {{parent.PlotChromaticities.PlotChromaticity_left_margin}}
  PlotChromaticity_grid_tolerance 0.8
  PlotChromaticity_grid_antialias true
  PlotChromaticity_grid_draw_axes {{parent.coordinate_system}}
  PlotChromaticity_grid_grid_color {0.15 0 0.005 1}
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotInput2
  xpos -700
  ypos 608
 }
 FrameHold {
  firstFrame 1
  name FrameHold1
  xpos -700
  ypos 680
  cached true
 }
 Dot {
  name Dot3
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 762
 }
 Input {
  inputs 0
  name Input
  xpos 620
  ypos -1426
 }
 AddChannels {
  name AddChannels1
  xpos 620
  ypos -1360
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat
  xpos 620
  ypos -1282
  disable {{!parent.resample_input}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name CropBBox
  xpos 620
  ypos -1257
 }
 Dot {
  name Dot7
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 162
 }
set N3b5b6800 [stack 0]
 Constant {
  inputs 0
  channels rgb
  color {0 0 0 1}
  format "256 256 0 0 256 256 1 square_256"
  name Constant2
  xpos 400
  ypos 38
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat1
  xpos 400
  ypos 64
  disable {{!parent.resample_input}}
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name Switch1
  xpos 400
  ypos 158
 }
 Fill {
  output rgb
  color 0.18
  name SampleColor
  xpos 290
  ypos 158
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop2
  xpos 290
  ypos 184
 }
 Fill {
  output alpha
  name Fill3
  xpos 290
  ypos 224
 }
 Dot {
  name Dot6
  xpos 324
  ypos 282
 }
set N3b5b4c00 [stack 0]
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  name ColorMatrix4
  label "working to XYZ"
  xpos 180
  ypos 272
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace1
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 180
  ypos 320
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression6
  label "CIE Yxy to CIELuv"
  xpos 180
  ypos 368
  disable {{!parent.diagram}}
 }
push $N3b5b4c00
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_sample\" iterate pixelWise 20e14b615a937bac78c1a771cbdfd10cc7c5fb6c487f65d0bb2d6633e404b958 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 3 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== 3 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_sample : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  void process(int2 pos) \{\n    // only process the first pixel\n    if (pos.x > 0 && pos.y > 0) return;\n\n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    int2 p = int2(round(out_coord.x), round(out_coord.y));\n    if (dst.bounds.inside(p.x, p.y)) \{\n      for (int k=0; k<3; k++) \{\n        dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n      \}\n      dst(p.x, p.y, 3) = 1.0f;\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_sample_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_sample_left_margin {{parent.left_margin}}
  PlotChromaticity_sample_tolerance 1
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities1
  xpos 290
  ypos 368
 }
 Dot {
  name Dot22
  xpos 324
  ypos 450
 }
set N3b55f400 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048}}
  name Dilate1
  label "\[value size]"
  xpos 290
  ypos 488
 }
set N3b55f000 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048*2}}
  name Dilate2
  label "\[value size]"
  xpos 180
  ypos 488
 }
push $N3b55f400
 Dot {
  name Dot21
  xpos -6
  ypos 450
 }
 FilterErode {
  channels rgba
  size {{-Output.width/2048/5}}
  filter triangle
  name FilterErode1
  label "\[value size]"
  xpos -40
  ypos 489
 }
set N3b55e400 [stack 0]
 Dilate {
  channels rgba
  size {0 {parent.Dilate3.size.w}}
  name Dilate4
  label "\[value size]"
  xpos -40
  ypos 584
 }
push $N3b55e400
 Dilate {
  channels rgba
  size {{Output.width*plus_size/100} 0}
  name Dilate3
  label "\[value size]"
  xpos 70
  ypos 488
  addUserKnob {20 User}
  addUserKnob {7 plus_size R 0 4}
  plus_size 0.8
 }
 Merge2 {
  inputs 2
  operation screen
  bbox B
  name Merge9
  xpos 70
  ypos 591
 }
 Merge2 {
  inputs 2
  operation stencil
  bbox B
  name Merge10
  xpos 180
  ypos 591
 }
 Group {
  name HueRotate
  xpos 180
  ypos 639
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -24
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos 15
  }
  Colorspace {
   colorspace_out HSV
   name Colorspace1
   xpos -40
   ypos 72
  }
  Add {
   channels {rgba.red -rgba.green -rgba.blue none}
   value 0.5
   name Add1
   xpos -40
   ypos 111
  }
  Fill {
   output {-rgba.red -rgba.green rgba.blue none}
   name Fill1
   xpos -40
   ypos 147
  }
  Colorspace {
   colorspace_in HSV
   name Colorspace2
   xpos -40
   ypos 183
  }
  Premult {
   name Premult1
   xpos -40
   ypos 231
  }
  Output {
   name Output1
   xpos -40
   ypos 302
  }
 end_group
push $N3b55f000
 Merge2 {
  inputs 2
  bbox B
  name Merge8
  xpos 290
  ypos 638
 }
 Dot {
  name Dot20
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 324
  ypos 690
 }
push $N3b5b6800
 Dot {
  name Dot1
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 162
 }
 Group {
  name GamutToXYZ
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos 730
  ypos 247
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace2
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 730
  ypos 296
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression4
  label "CIE Yxy to CIELuv"
  xpos 730
  ypos 344
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot13
  label " Pos"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 546
 }
push $N3b5b6800
 Dot {
  name Dot16
  label " Col"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 450
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity\" iterate pixelWise 3e86399c7642fe5c35c23528a644f88a8bf13f967de084ae6842f8be55098c6b 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 4 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== 4 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_left_margin {{parent.left_margin}}
  PlotChromaticity_tolerance 2
  PlotChromaticity_antialias true
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities
  xpos 620
  ypos 536
  disable {{!parent.plot_input}}
 }
 Fill {
  color 0
  name BLACK
  tile_color 0x111111ff
  xpos 620
  ypos 591
  disable {{parent.plot_input}}
 }
 Merge2 {
  inputs 2
  bbox B
  name Merge7
  xpos 620
  ypos 686
  disable {{!parent.enable_sample_color}}
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 620
  ypos 758
 }
 Output {
  name Output
  xpos 620
  ypos 1046
 }
end_group
Reformat {
 inputs 0
 format "512 512 0 0 512 512 1 square_512"
 name Reformat4
 xpos 1731
 ypos -150
}
set N3b49ec00 [stack 0]
Ramp {
 p0 {0 0}
 p1 {{width-1} 0}
 name Ramp6
 xpos 1630
 ypos -87
}
Dot {
 name Dot1
 xpos 1770
 ypos -23
}
set N3b49e000 [stack 0]
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline2
 xpos 1563
 ypos 43
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
push $N3b49e000
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/danieleCompressionCurve.blink
 recompileCount 75
 ProgramGroup 1
 KernelDescription "2 \"danielleCompressionCurveKernel\" iterate pixelWise 76140efdc745bcf213e05de27dc927c38901fb4128e7b61f94c588ac8e67702f 2 \"src\" Read Point \"dst\" Write Point 6 \"inverse\" Bool 1 AA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 6 \"inverse\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 0"
 kernelSource "\nkernel danielleCompressionCurveKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n   \n\n    // Tonescale select\n    bool inverse;\n    // OpenDRT tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n    // constants\n  void define()\n  \{\n\n  \}\n\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially retured -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // pow(  x/ (x+s_1) , g ) * m;\n\n\n      return new_x;\n  \}\n\n\n  void init()\n  \{\n    \n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 mappedVals;\n    if(!inverse)\n    \{\n        mappedVals.x = forwardDanieleCompressionCurve(source.x);\n        mappedVals.y = forwardDanieleCompressionCurve(source.y);\n        mappedVals.z = forwardDanieleCompressionCurve(source.z);\n    \}\n    else\n    \{\n        mappedVals.x = inverseDanieleCompressionCurve(source.x);\n        mappedVals.y = inverseDanieleCompressionCurve(source.y);\n        mappedVals.z = inverseDanieleCompressionCurve(source.z);\n    \}\n\n\n    float3 dstRGB;\n\n    dst() = float4(mappedVals.x, mappedVals.y, mappedVals.z, source.w); \n  \}\n\};\n"
 useGPUIfAvailable false
 rebuild ""
 danielleCompressionCurveKernel_n 100
 danielleCompressionCurveKernel_nr 100
 danielleCompressionCurveKernel_g 1.11
 danielleCompressionCurveKernel_w 1
 danielleCompressionCurveKernel_t_1 0.01
 rebuild_finalise ""
 name BlinkScript3
 xpos 1736
 ypos 10
}
set N3b49d800 [stack 0]
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline3
 xpos 1564
 ypos 86
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
push $N3b49ec00
Expression {
 temp_name0 L_min
 temp_expr0 -12
 temp_name1 L_max
 temp_expr1 12
 channel0 rgba
 expr0 (2**((x/width)*(L_max-L_min)+L_min)*0.18)
 name Expression2
 xpos 1731
 ypos -88
}
push $N3b49d800
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/danieleCompressionCurve.blink
 recompileCount 90
 KernelDescription "2 \"danielleCompressionCurveKernel\" iterate pixelWise 76140efdc745bcf213e05de27dc927c38901fb4128e7b61f94c588ac8e67702f 2 \"src\" Read Point \"dst\" Write Point 6 \"inverse\" Bool 1 AA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 6 \"inverse\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 0"
 kernelSource "\nkernel danielleCompressionCurveKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n   \n\n    // Tonescale select\n    bool inverse;\n    // OpenDRT tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n    // constants\n  void define()\n  \{\n\n  \}\n\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially retured -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // pow(  x/ (x+s_1) , g ) * m;\n\n\n      return new_x;\n  \}\n\n\n  void init()\n  \{\n    \n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 mappedVals;\n    if(!inverse)\n    \{\n        mappedVals.x = forwardDanieleCompressionCurve(source.x);\n        mappedVals.y = forwardDanieleCompressionCurve(source.y);\n        mappedVals.z = forwardDanieleCompressionCurve(source.z);\n    \}\n    else\n    \{\n        mappedVals.x = inverseDanieleCompressionCurve(source.x);\n        mappedVals.y = inverseDanieleCompressionCurve(source.y);\n        mappedVals.z = inverseDanieleCompressionCurve(source.z);\n    \}\n\n\n    float3 dstRGB;\n\n    dst() = float4(mappedVals.x, mappedVals.y, mappedVals.z, source.w); \n  \}\n\};\n"
 useGPUIfAvailable false
 rebuild ""
 danielleCompressionCurveKernel_inverse true
 danielleCompressionCurveKernel_n 100
 danielleCompressionCurveKernel_nr 100
 danielleCompressionCurveKernel_g 1.11
 danielleCompressionCurveKernel_w 1
 danielleCompressionCurveKernel_t_1 0.01
 rebuild_finalise ""
 name BlinkScript4
 xpos 1736
 ypos 42
}
set N3b49cc00 [stack 0]
Colorspace {
 primary_in ACES
 colorspace_out sRGB
 primary_out DCI-P3
 name Colorspace5
 xpos 1882
 ypos 130
}
push $N3b49cc00
Expression {
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline1
 xpos 1562
 ypos 133
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
Expression {
 inputs 0
 expr0 "y==floor(r(x, pos.y)*height*mult)?1:0"
 expr1 "y==floor(g(x, pos.y)*height*mult)?1:0"
 expr2 "y==floor(b(x, pos.y)*height*mult)?1:0"
 channel3 alpha
 name PlotScanline4
 xpos 2223
 ypos 34
 addUserKnob {20 User}
 addUserKnob {12 pos}
 addUserKnob {7 mult R 0 5}
 mult 1
}
CMSTestPattern {
 inputs 0
 cube_size 15
 name CMSTestPattern
 xpos 1389
 ypos -15
}
Ramp {
 inputs 0
 p0 {0 0}
 p1 {2048 0}
 name Ramp7
 xpos 741
 ypos -232
}
Reformat {
 format "1920 1080 0 0 1920 1080 1 HD_1080"
 resize height
 filter impulse
 name Reformat6
 xpos 741
 ypos -208
}
Constant {
 inputs 0
 channels rgb
 color {6.83429665 0.01308402193 3.164810355e-07 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant31
 label ACES_RICD_Curves_light_source_700nm___20_fwhm_led___ohno__2005_patch6
 xpos 920
 ypos -568
}
EXPTool {
 mode Stops
 red 0.55
 green 0.55
 blue 0.5578125018
 name Exposure5
 xpos 920
 ypos -488
}
Constant {
 inputs 0
 channels rgb
 color {7.44748923 0.07012615353 35.38990151 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant30
 label ACES_RICD_Curves_light_source_400nm___10_fwhm_led___ohno__2005_patch6
 xpos 817
 ypos -566
}
EXPTool {
 mode Stops
 red 0.1
 green 0.1
 blue 0.1078125018
 name Exposure4
 xpos 817
 ypos -486
}
Constant {
 inputs 0
 channels rgb
 color {1096.659059 574.304964 6677.808562 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant29
 label ACES_RICD_Curves_light_source_bt2020_467nm___1_fwhm_led___ohno__2005_patch6
 xpos 708
 ypos -566
}
EXPTool {
 mode Stops
 red -8
 green -8
 blue -8
 name Exposure3
 xpos 708
 ypos -486
}
set C59d79000 [stack 0]
Constant {
 inputs 0
 channels rgb
 color {730.3434061 4979.188894 185.7734792 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant28
 label ACES_RICD_Curves_light_source_bt2020_532nm___1_fwhm_led___ohno__2005_patch6
 xpos 617
 ypos -576
}
clone $C59d79000 {
 xpos 617
 ypos -496
 selected false
}
Constant {
 inputs 0
 channels rgb
 color {2828.853747 206.549208 0.2275552 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant32
 label ACES_RICD_Curves_light_source_bt2020_630nm___1_fwhm_led___ohno__2005_patch6
 xpos 524
 ypos -578
}
clone $C59d79000 {
 xpos 524
 ypos -498
 selected false
}
Constant {
 inputs 0
 channels rgb
 color {7.337147756 7.495184389 30.31654506 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant33
 label Lapis_Lazuli_3_layers
 xpos 422
 ypos -575
}
EXPTool {
 mode Stops
 red -0.5
 green -0.5
 blue -0.5
 name Exposure6
 xpos 422
 ypos -495
}
Constant {
 inputs 0
 channels rgb
 color {3.018410566 3.273693658 3.499929003 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant34
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_black_2__1_5_d
 xpos 892
 ypos -666
}
Constant {
 inputs 0
 channels rgb
 color {8.35601795 9.191243417 9.763150538 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant35
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_neutral_3_5__1_05_d
 xpos 788
 ypos -660
}
Constant {
 inputs 0
 channels rgb
 color {17.87231333 19.62137664 20.64315652 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant36
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_neutral_5___70_d
 xpos 681
 ypos -669
}
Constant {
 inputs 0
 channels rgb
 color {33.65458908 36.83974642 38.66328402 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant37
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_neutral_6_5___44_d
 xpos 602
 ypos -669
}
Constant {
 inputs 0
 channels rgb
 color {55.05307539 60.29134083 62.95033254 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant38
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_neutral_8___23_d
 xpos 516
 ypos -667
}
Constant {
 inputs 0
 channels rgb
 color {85.2726697 93.15709827 94.33927641 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant39
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_white_9_5___05_d
 xpos 433
 ypos -664
}
Constant {
 inputs 0
 channels rgb
 color {14.47175663 24.34558952 38.87282129 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant40
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_cyan
 xpos 915
 ypos -760
}
Constant {
 inputs 0
 channels rgb
 color {29.11467259 15.10613564 30.71720341 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant41
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_magenta
 xpos 794
 ypos -763
}
Constant {
 inputs 0
 channels rgb
 color {55.42852632 55.46124011 9.153446502 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant42
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_yellow
 xpos 683
 ypos -761
}
Constant {
 inputs 0
 channels rgb
 color {19.35616865 6.949551997 4.971538887 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant43
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_red
 xpos 600
 ypos -760
}
Constant {
 inputs 0
 channels rgb
 color {14.48675945 26.24766759 9.744185153 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant44
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_green
 xpos 512
 ypos -760
}
Constant {
 inputs 0
 channels rgb
 color {7.894344645 7.326027894 28.0233751 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant45
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_blue
 xpos 425
 ypos -753
}
Constant {
 inputs 0
 channels rgb
 color {44.73239932 36.59622354 7.682886084 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant46
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_orange_yellow
 xpos 912
 ypos -848
}
Constant {
 inputs 0
 channels rgb
 color {33.28208082 45.74691915 11.19451827 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant47
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_yellow_green
 xpos 799
 ypos -854
}
Constant {
 inputs 0
 channels rgb
 color {8.289625713 6.028092086 13.83133755 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant48
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_purple
 xpos 691
 ypos -853
}
Constant {
 inputs 0
 channels rgb
 color {13.4092524 13.48051617 38.25811494 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant49
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_purplish_blue
 xpos 592
 ypos -857
}
Constant {
 inputs 0
 channels rgb
 color {27.36175951 13.47338492 13.3777461 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant50
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_moderate_red
 xpos 515
 ypos -854
}
Constant {
 inputs 0
 channels rgb
 color {36.75543588 23.24779418 6.263674562 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant51
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_orange
 xpos 416
 ypos -856
}
Constant {
 inputs 0
 channels rgb
 color {30.59258818 48.29665858 44.35763726 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant52
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_bluish_green
 xpos 903
 ypos -937
}
Constant {
 inputs 0
 channels rgb
 color {24.52660796 24.54644053 43.42176112 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant53
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_blue_flower
 xpos 803
 ypos -938
}
Constant {
 inputs 0
 channels rgb
 color {10.47708042 13.91835102 6.865923005 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant54
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_foliage
 xpos 698
 ypos -942
}
Constant {
 inputs 0
 channels rgb
 color {17.44688075 20.7907956 34.09289689 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant55
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_blue_sky
 xpos 595
 ypos -948
}
Constant {
 inputs 0
 channels rgb
 color {36.78099585 31.93734489 24.95311215 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant56
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_light_skin
 xpos 504
 ypos -947
}
Constant {
 inputs 0
 channels rgb
 color {11.02323953 9.09539164 6.727143145 1}
 format "256 256 0 0 256 256 1 square_256"
 name Constant57
 label ACES_RICD_Curves_illuminant_d65_colorchecker_classic_dark_skin
 xpos 414
 ypos -945
}
ContactSheet {
 inputs 30
 width {{input.width*columns}}
 height {{input.height*rows}}
 rows 5
 columns 6
 gap 25
 roworder TopBottom
 name ContactSheet3
 xpos 634
 ypos -398
}
EXPTool {
 mode Stops
 red -7
 green -7
 blue -7
 name Exposure7
 xpos 634
 ypos -374
}
Expression {
 temp_name0 FLARE_PERCENTAGE
 temp_expr0 0.00500
 temp_name1 S_FLARE_FACTOR
 temp_expr1 " 0.18000 / (0.18000 + FLARE_PERCENTAGE)"
 expr0 "(r +  FLARE_PERCENTAGE) * S_FLARE_FACTOR"
 expr1 "(g +  FLARE_PERCENTAGE) * S_FLARE_FACTOR"
 expr2 "(b +  FLARE_PERCENTAGE) * S_FLARE_FACTOR"
 name Accounting_for_Flare2
 xpos 634
 ypos -337
}
set Nc5b84400 [stack 0]
Reformat {
 format "1920 1080 0 0 1920 1080 1 HD_1080"
 resize height
 filter impulse
 name Reformat5
 xpos 634
 ypos -242
}
Read {
 inputs 0
 file_type exr
 file /Users/afry/GitHub/ACES_ODT_SampleFrames/ACES_OT_VWG_SampleFrames/ACES_OT_VWG_SampleFrames.####.exr
 format "1920 1080 0 0 1920 1080 1 HD_1080"
 last 77
 origlast 77
 origset true
 name Read1
 xpos 360
 ypos -293
}
AppendClip {
 inputs 3
 meta_from_first false
 time ""
 name AppendClip1
 xpos 324
 ypos -157
}
set N59d7ac00 [stack 0]
Reformat {
 type scale
 scale 0.2
 name Reformat1
 xpos 297
 ypos -83
 disable true
}
set N3b423000 [stack 0]
Saturation {
 saturation 0
 name Saturation1
 xpos 297
 ypos -59
 disable true
}
EXPTool {
 mode Stops
 red 1
 green 1
 blue 1
 name Exposure1
 xpos 297
 ypos -35
}
set Nc4fe7400 [stack 0]
BlinkScript {
 kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/danieleCompressionCurve.blink
 recompileCount 75
 KernelDescription "2 \"danielleCompressionCurveKernel\" iterate pixelWise 76140efdc745bcf213e05de27dc927c38901fb4128e7b61f94c588ac8e67702f 2 \"src\" Read Point \"dst\" Write Point 6 \"inverse\" Bool 1 AA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 6 \"inverse\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 0"
 kernelSource "\nkernel danielleCompressionCurveKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n   \n\n    // Tonescale select\n    bool inverse;\n    // OpenDRT tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n    // constants\n  void define()\n  \{\n\n  \}\n\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially retured -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // pow(  x/ (x+s_1) , g ) * m;\n\n\n      return new_x;\n  \}\n\n\n  void init()\n  \{\n    \n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 mappedVals;\n    if(!inverse)\n    \{\n        mappedVals.x = forwardDanieleCompressionCurve(source.x);\n        mappedVals.y = forwardDanieleCompressionCurve(source.y);\n        mappedVals.z = forwardDanieleCompressionCurve(source.z);\n    \}\n    else\n    \{\n        mappedVals.x = inverseDanieleCompressionCurve(source.x);\n        mappedVals.y = inverseDanieleCompressionCurve(source.y);\n        mappedVals.z = inverseDanieleCompressionCurve(source.z);\n    \}\n\n\n    float3 dstRGB;\n\n    dst() = float4(mappedVals.x, mappedVals.y, mappedVals.z, source.w); \n  \}\n\};\n"
 useGPUIfAvailable false
 rebuild ""
 danielleCompressionCurveKernel_n 100
 danielleCompressionCurveKernel_nr 100
 danielleCompressionCurveKernel_g 1.11
 danielleCompressionCurveKernel_w 1
 danielleCompressionCurveKernel_t_1 0.01
 rebuild_finalise ""
 name BlinkScript5
 xpos 1231
 ypos 51
}
Multiply {
 value 100
 name Multiply4
 xpos 1183
 ypos 125
}
Add {
 value -10
 name Add2
 xpos 1183
 ypos 157
}
push $Nc4fe7400
Add {
 value -0.18
 name Add1
 xpos 1044
 ypos 165
}
Merge2 {
 inputs 2
 operation minus
 name Merge1
 xpos 1122
 ypos 232
}
Expression {
 inputs 0
 expr0 "clamp( compressPowerP( (log10(max(HALF_MIN, IzAligned)) - log10(max(HALF_MIN, IzTS))) * desatHighlights, compressionFuncParams.x, HALF_MAX, compressionFuncParams.z, 0 ), 0.0f, 1.0f)"
 name Expression3
 xpos 1244
 ypos 286
}
push $Nc4fe7400
Constant {
 inputs 0
 channels rgb
 color 0.1
 name Constant2
 xpos 1333
 ypos 73
}
Merge2 {
 inputs 2
 operation plus
 name Plus
 xpos 1282
 ypos 147
}
Add {
 value -0.18
 name Add3
 xpos 1282
 ypos 178
}
push $Nc4fe7400
Group {
 name DRT_CAM_Blink1
 label "Input: \[value encoding_in] / \[value primaries_in]\nLimit: \[value primaries_limit] / \[value ssts_luminance.2]nits\nOutput: \[value encoding_out] / \[value primaries_out]\n\[value toneScaleMode]\n\[value camMode]\n\nBodged XYZ_to_LMS_ZCAM matrix\n"
 note_font "Bitstream Vera Sans"
 xpos 297
 ypos 72
 addUserKnob {20 User}
 addUserKnob {26 input_div l Input}
 addUserKnob {4 encoding_in l encoding t "the input log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 "" ""}}
 addUserKnob {4 primaries_in l primaries t "the input primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {6 D60toD65CAT l "D60 to D65 CAT" -STARTLINE}
 D60toD65CAT true
 addUserKnob {4 camMode M {ZCAM "Hellwig 2022" "Hellwig 2022 linearExtension" ""}}
 camMode "Hellwig 2022 linearExtension"
 addUserKnob {4 HellwigCam16Data l "Hellwig Cam16 Data" M {Stock Thomas "Live from params"}}
 HellwigCam16Data "Live from params"
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {4 cat_type l "CAT Type" t "the chromatic adaptation transform to use for converting between white points" M {None "XYZ Scaling" Bradford CAT02 Zhai2018 ""}}
 cat_type CAT02
 addUserKnob {26 tonescale_div l Tonescale}
 addUserKnob {4 toneScaleMode l "ToneScale Mode" M {SSTS MMSDC "Daniele Compression Curve" "Mult 0.5" "" "" "" ""}}
 toneScaleMode "Daniele Compression Curve"
 addUserKnob {6 applyTonecurve l "apply Tonecurve" t "toggle the SingleStageToneScale transform" +STARTLINE}
 applyTonecurve true
 addUserKnob {13 ssts_luminance l "SSTS luminance" t "min, mid & peak luminance values in Cd/sqm as parameters for the SSTS"}
 ssts_luminance {1e-06 10 100}
 addUserKnob {26 ssts_luminance_label l " " -STARTLINE T "min / mid / peak"}
 addUserKnob {6 apply_highlight_desat l "apply highlight desat" t "toggle de-saturating the highlights above SSTS mid luminance based on how much the SSTS has compressed them" +STARTLINE}
 apply_highlight_desat true
 addUserKnob {7 desat_highlights l "desat highlights" t "the amount of desaturation applied to the highlights" R 0 5}
 desat_highlights 0.3
 addUserKnob {26 gamut_mapping_div l "Gamut Mapping"}
 addUserKnob {6 apply_gamut_compression l "apply gamut compression " t "toggle the gamut compression towards the limiting primaries" +STARTLINE}
 apply_gamut_compression true
 addUserKnob {4 primaries_limit l primaries t "the limiting primaries of the gamut to which to compress to" M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI ""}}
 primaries_limit sRGB/Rec.709-D65
 addUserKnob {6 discount_illuminant l "discount illuminant (Zhai2018 only)" t "disable the degree of adaptation model for the Zhai2018 CAT\nthis is only effective if the limiting primaries do not use a D65 white point" -STARTLINE}
 discount_illuminant true
 addUserKnob {7 cusp_mid_blend l "cusp to mid blend" t "blend the lightness (J) of the focal point of the compression between the lightness of the gamut cusp at the given hue (0.0)  and the mid luminance of the SSTS (1.0)"}
 cusp_mid_blend 0.5
 addUserKnob {26 cusp_mid_blend_label l " " -STARTLINE T "gamut cusp (0) to SSTS mid (1)"}
 addUserKnob {7 focus_distance l "focus distance" t "the distance from the achromatic axis of the focal point of the compression where 0.0 is at the achromatic axis and 1.0 the distance of the gamut cusp at the given hue but on the opposite side of the achomatic axis" R 0 2}
 focus_distance 0.5
 addUserKnob {26 focus_depth_label l " " -STARTLINE T "achromatic (0) to cusp opposite (1)"}
 addUserKnob {13 compression_params l compression t "the threshold, limit and power parameters for the PowerP compression function\nvalues below the threshold will not be compressed and values at the limit will be compressed towards the gamut boundary while the power values defines the shape of the curve"}
 compression_params {0.75 1.2 1.2}
 addUserKnob {26 compression_params_label l " " -STARTLINE T "threshold / limit / power"}
 addUserKnob {7 smooth_cusps l "smooth cusps" t "the amount by how much to smooth the edges and corners of the limiting gamut cube, except the black & white corners."}
 addUserKnob {3 solve_precision l "solve precision" t "the number of iterations used for finding the gamut boundary using the interval bisection method"}
 solve_precision 10
 addUserKnob {3 inverse_solver_iterations l "inverse solver iterations" t "the number of iterations used for finding the original J & M values when applying the inverse gamut compression"}
 inverse_solver_iterations 10
 addUserKnob {26 output_div l Output}
 addUserKnob {4 encoding_out l encoding t "the output log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 ""}}
 encoding_out sRGB
 addUserKnob {4 primaries_out l primaries t "the output primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 primaries_out P3-D65
 addUserKnob {4 viewing_conditions l "viewing conditions" t "the ZCAM viewing conditions" M {dark dim average ""}}
 addUserKnob {7 reference_luminance l "reference luminance" t "the ZCAM reference luminance in Cd/sqm" R 0 200}
 reference_luminance 100
 addUserKnob {7 background_luminance l "background luminance" t "the ZCAM background luminance in Cd/sqm" R 0 100}
 background_luminance 10
 addUserKnob {6 clamp_output l "clamp output" t "clamp the output values between 0,0 and 1.0" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 _1 l "" +STARTLINE T "Daniele Curve Params"}
 addUserKnob {41 DRT_CAM_Kernel_n l n T BlinkScript1.DRT_CAM_Kernel_n}
 addUserKnob {41 DRT_CAM_Kernel_nr l nr T BlinkScript1.DRT_CAM_Kernel_nr}
 addUserKnob {41 DRT_CAM_Kernel_g l g T BlinkScript1.DRT_CAM_Kernel_g}
 addUserKnob {41 DRT_CAM_Kernel_w l w T BlinkScript1.DRT_CAM_Kernel_w}
 addUserKnob {41 DRT_CAM_Kernel_t_1 l t_1 T BlinkScript1.DRT_CAM_Kernel_t_1}
 addUserKnob {26 _2 l "" +STARTLINE T "Custom CAM 16 style prims"}
 addUserKnob {41 DRT_CAM_Kernel_rxy l rxy T BlinkScript1.DRT_CAM_Kernel_rxy}
 addUserKnob {41 DRT_CAM_Kernel_gxy l gxy T BlinkScript1.DRT_CAM_Kernel_gxy}
 addUserKnob {41 DRT_CAM_Kernel_bxy l bxy T BlinkScript1.DRT_CAM_Kernel_bxy}
 addUserKnob {41 DRT_CAM_Kernel_wxy l wxy T BlinkScript1.DRT_CAM_Kernel_wxy}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 direction_div l Direction}
 addUserKnob {6 invert t "apply the pseudo-inverse transform" +STARTLINE}
 addUserKnob {26 blink_kernel_div l "Blink Kernel"}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
}
 ColorMatrix {
  inputs 0
  matrix {
      {0.368792 0.531205 0.103642}
      {-0.193458 1.03225 0.131287}
      {-0.0348077 0.283972 0.671427}
    }
  name preMatrix
  xpos -624
  ypos -256
 }
 Input {
  inputs 0
  name Input1
  xpos -908
  ypos -292
 }
set N3b3af800 [stack 0]
 Colorspace {
  colorspace_out CIE-XYZ
  name Colorspace2
  xpos -1067
  ypos -213
 }
push $N3b3af800
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/CAM_DRT_v016.blink
  recompileCount 530
  KernelDescription "2 \"DRT_CAM_Kernel\" iterate pixelWise 0d945c05111c22d36c6174688252d10c0acac3ffa25244750ac91c334e42c6cb 2 \"src\" Read Point \"dst\" Write Point 59 \"encodingIn\" Int 1 AAAAAA== \"primariesIn\" Int 1 AAAAAA== \"toneScaleMode\" Int 1 AAAAAA== \"camMode\" Int 1 AAAAAA== \"catType\" Int 1 AAAAAA== \"discountIlluminant\" Bool 1 AA== \"referenceLuminance\" Float 1 AAAAAA== \"backgroundLuminance\" Float 1 AAAAAA== \"viewingConditions\" Int 1 AAAAAA== \"applyTonecurve\" Bool 1 AA== \"sstsLuminance\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"applyHighlightDesat\" Bool 1 AA== \"desatHighlights\" Float 1 AAAAAA== \"primariesLimit\" Int 1 AAAAAA== \"applyGamutCompression\" Bool 1 AA== \"cuspMidBlend\" Float 1 AAAAAA== \"focusDistance\" Float 1 AAAAAA== \"compressionFuncParams\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"smoothCusps\" Float 1 AAAAAA== \"boundarySolvePrecision\" Int 1 AAAAAA== \"inverseSolverIterations\" Int 1 AAAAAA== \"encodingOut\" Int 1 AAAAAA== \"primariesOut\" Int 1 AAAAAA== \"clampOutput\" Bool 1 AA== \"invert\" Bool 1 AA== \"XYZ_to_LMS_ZCAM\" Float 9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_rho\" Float 1 AAAAAA== \"Lp\" Float 1 AAAAAA== \"su\" Float 1 AAAAAA== \"c0\" Float 1 AAAAAA== \"cs\" Float 1 AAAAAA== \"c1\" Float 1 AAAAAA== \"p\" Float 1 AAAAAA== \"w1\" Float 1 AAAAAA== \"s1\" Float 1 AAAAAA== \"ex\" Float 1 AAAAAA== \"eb\" Float 1 AAAAAA== \"e0\" Float 1 AAAAAA== \"s0\" Float 1 AAAAAA== \"fl\" Float 1 AAAAAA== \"dch\" Float 1 AAAAAA== \"sat\" Float 1 AAAAAA== \"mmScaleFactor\" Float 1 AAAAAA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== \"catDataSelection\" Int 1 AAAAAA== \"rxy\" Float 2 AAAAAAAAAAA= \"gxy\" Float 2 AAAAAAAAAAA= \"bxy\" Float 2 AAAAAAAAAAA= \"wxy\" Float 2 AAAAAAAAAAA= \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"L_B\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== 59 \"encodingIn\" 1 1 \"primariesIn\" 1 1 \"toneScaleMode\" 1 1 \"camMode\" 1 1 \"catType\" 1 1 \"discountIlluminant\" 1 1 \"referenceLuminance\" 1 1 \"backgroundLuminance\" 1 1 \"viewingConditions\" 1 1 \"applyTonecurve\" 1 1 \"sstsLuminance\" 3 1 \"applyHighlightDesat\" 1 1 \"desatHighlights\" 1 1 \"primariesLimit\" 1 1 \"applyGamutCompression\" 1 1 \"cuspMidBlend\" 1 1 \"focusDistance\" 1 1 \"compressionFuncParams\" 3 1 \"smoothCusps\" 1 1 \"boundarySolvePrecision\" 1 1 \"inverseSolverIterations\" 1 1 \"encodingOut\" 1 1 \"primariesOut\" 1 1 \"clampOutput\" 1 1 \"invert\" 1 1 \"XYZ_to_LMS_ZCAM\" 9 1 \"zcam_rho\" 1 1 \"Lp\" 1 1 \"su\" 1 1 \"c0\" 1 1 \"cs\" 1 1 \"c1\" 1 1 \"p\" 1 1 \"w1\" 1 1 \"s1\" 1 1 \"ex\" 1 1 \"eb\" 1 1 \"e0\" 1 1 \"s0\" 1 1 \"fl\" 1 1 \"dch\" 1 1 \"sat\" 1 1 \"mmScaleFactor\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 \"catDataSelection\" 1 1 \"rxy\" 2 1 \"gxy\" 2 1 \"bxy\" 2 1 \"wxy\" 2 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"L_B\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 71 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_L_A\" Float 1 1 AAAAAA== \"zcam_F_b\" Float 1 1 AAAAAA== \"zcam_F_L\" Float 1 1 AAAAAA== \"zcam_cb\" Float 1 1 AAAAAA== \"zcam_cg\" Float 1 1 AAAAAA== \"zcam_c1\" Float 1 1 AAAAAA== \"zcam_c2\" Float 1 1 AAAAAA== \"zcam_c3\" Float 1 1 AAAAAA== \"zcam_eta\" Float 1 1 AAAAAA== \"zcam_luminance_shift\" Float 1 1 AAAAAA== \"zcam_viewing_conditions_coeff\" Float 1 1 AAAAAA== \"cat_adaptDegree\" Float 1 1 AAAAAA== \"st2084_m_1\" Float 1 1 AAAAAA== \"st2084_m_2\" Float 1 1 AAAAAA== \"st2084_c_1\" Float 1 1 AAAAAA== \"st2084_c_2\" Float 1 1 AAAAAA== \"st2084_c_3\" Float 1 1 AAAAAA== \"st2084_m_1_d\" Float 1 1 AAAAAA== \"st2084_m_2_d\" Float 1 1 AAAAAA== \"st2084_L_p\" Float 1 1 AAAAAA== \"ssts_min_stop_sdr\" Float 1 1 AAAAAA== \"ssts_max_stop_sdr\" Float 1 1 AAAAAA== \"ssts_min_stop_rrt\" Float 1 1 AAAAAA== \"ssts_max_stop_rrt\" Float 1 1 AAAAAA== \"ssts_min_lum_sdr\" Float 1 1 AAAAAA== \"ssts_max_lum_sdr\" Float 1 1 AAAAAA== \"ssts_min_lum_rrt\" Float 1 1 AAAAAA== \"ssts_max_lum_rrt\" Float 1 1 AAAAAA== \"ssts_n_knots_low\" Int 1 1 AAAAAA== \"ssts_n_knots_high\" Int 1 1 AAAAAA== \"ssts_m1\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_minTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_maxTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsLow\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsHigh\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_min_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_mid_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_max_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_knotIncLow\" Float 1 1 AAAAAA== \"ssts_knotIncHigh\" Float 1 1 AAAAAA== \"ssts_pctLow\" Float 1 1 AAAAAA== \"ssts_pctHigh\" Float 1 1 AAAAAA== \"ssts_coefsLow\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_coefsHigh\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_expShift\" Float 1 1 AAAAAA== \"ssts_paramMin\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMid\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMax\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"identity_matrix\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_Bradford\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_CAT02\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"LMS_to_Izazbz\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"d65White\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"inWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"refWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"boundaryRGB\" Float 1 1 AAAAAA== \"limitJmax\" Float 1 1 AAAAAA== \"limitMmax\" Float 1 1 AAAAAA== \"gamutCuspTableSize\" Int 1 1 AAAAAA== \"gamutCuspTableUnsorted\" FloatgamutCuspTable\" FloatfocusDistanceClamped\" Float 1 1 AAAAAA=="
  kernelSource "\nkernel DRT_CAM_Kernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    //\n    // Input Parameters\n    //\n\n    // Encoding of the Input Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingIn;\n\n    // Primaries of the Input Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesIn;\n\n\n    // Tonescale mode\n    // 0: SSTS\n    // 1: MMSDC\n    // 2: Daniele Compression Curve\n    int toneScaleMode;\n\n    // CAM mode\n    // 0: ZCAM\n    // 1: Hellwig 2022\n    // 2: Hellwig 2022 linearExtension\n    int camMode;\n\n    \n\n    //\n    // ZCAM Paramters\n    //\n\n    // Chomatic Adaptation Transform to Use\n    // 0: None\n    // 1: XYZ Scaling\n    // 2: Bradford\n    // 3: CAT02\n    // 4: Zhai2018 (two-step)\n    int catType;\n\n    // Disable Degree of Adaptation Model for Zhai2018 CAT\n    // This is only effective if the limit primaries have a non-D65 white point\n    // since the input conversion is assumed to be fully adapted\n    // and the output conversion does not apply a CAT\n    bool discountIlluminant;\n\n    // Reference Luminance in Cd/sqm\n    float referenceLuminance;\n\n    // Background Luminance in Cd/sqm\n    float backgroundLuminance;\n\n    // Viewing Conditions (for output)\n    // 0: Dark\n    // 1: Dim\n    // 2: Average\n    int viewingConditions;\n\n    //\n    // SSTS Parameters\n    //\n\n    // Toggle SSTS Tone Mapping\n    bool applyTonecurve;\n    \n    // SSTS Luminances Min/Mid/Peak\n    float3 sstsLuminance;\n\n    // Toggle Highlight De-Saturation\n    bool applyHighlightDesat;\n\n    // Scale the De-Saturation Applied to the Highlights\n    float desatHighlights;\n\n    //\n    // Gamut Mapping Parameters\n    //\n\n    // Primaries of the Target Gamut\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesLimit;\n\n\n    // Toggle Gamut Compression\n    bool applyGamutCompression;\n\n    // Blend Between Compressing towards\n    // Target Gamut Cusp Luminance (0.0)\n    // and SSTS Mid Luminance (1.0)\n    float cuspMidBlend;\n\n    // the distance of the compression focal point\n    // from the achromatic axis\n    // normalised to the distance of the gamut cusp\n    float focusDistance;\n\n    // Gamut Compression Fuction Parameters\n    // Threshold / Limit / Power\n    float3 compressionFuncParams;\n\n    // How much the edges of the target RGB cube are smoothed when finding the gamut boundary \n    // in order to reduce visible contours at the gamut cusps\n    float smoothCusps;\n\n    // When solving for the target gamut boundary\n    // how many search interval halving steps to perform\n    int boundarySolvePrecision;\n\n    // Number of iterations to converge on the uncompressed J value \n    // Because of the compression focus point changes depending on the J value of the uncompressed sample\n    // we cannot perfectly invert it since the original J value has now been changed by the forward compression\n    // we can converge on a reasonable approximation of the original J value by iterating the inverse compression\n    // although this is quite an expensive operation\n    int inverseSolverIterations;\n\n    //\n    // Output Parameters\n    //\n\n    // Encoding of the Output Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingOut;\n\n    // Primaries of the Output Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesOut;\n\n    // Clamp output values to 0.0 - 1.0\n    bool clampOutput;\n\n    //\n    // Extra Parameters\n    //\n\n    // Toggle Inverse Transform\n    bool invert;\n\n    float3x3 XYZ_to_LMS_ZCAM;\n    float zcam_rho;\n\n\n    // Tonescale select\n    // bool mmTonescaleMode;\n    // OpenDRT tonescale parameters\n    float Lp;\n    float su;\n    float c0;\n    float cs;\n    float c1;\n    float p;\n    float w1;\n    float s1;\n    float ex;\n    float eb;\n    float e0;\n    float s0;\n    float fl;\n    float dch;\n    float sat;\n    float mmScaleFactor;\n\n    // DanieleCompressionCurve tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n    // Hellwig 2022 CAM params\n    // the kernel parameters\n\n    // 0 = Stock CAT16\n    // 1 = Thomas's custom primaries\n    // 2 = live from params below\n    int catDataSelection; // original vs modified CAT16 matrix\n    // xy coordintes for custom CAT matrix\n    float2 rxy;\n    float2 gxy;\n    float2 bxy;\n    float2 wxy;\n    \n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float L_B;\n    float3 surround;\n    bool discount_illuminant;\n\n\n  local:\n\n    // constants\n    float HALF_MIN;\n    float HALF_MAX;\n\n    // Hellwig 2022 constants\n    float3x3 CAT_CAT16;\n\n    // ZCAM vars\n    float zcam_L_A;\n    float zcam_F_b;\n    float zcam_F_L;\n    float zcam_cb;\n    float zcam_cg;\n    float zcam_c1;\n    float zcam_c2;\n    float zcam_c3;\n    float zcam_eta;\n    // float zcam_rho;\n    float zcam_luminance_shift;\n    float zcam_viewing_conditions_coeff;\n\n    // CAT vars\n    float cat_adaptDegree;\n\n\n    // ST2084 vars\n    float st2084_m_1;\n    float st2084_m_2;\n    float st2084_c_1;\n    float st2084_c_2;\n    float st2084_c_3;\n    float st2084_m_1_d;\n    float st2084_m_2_d;\n    float st2084_L_p;\n\n    // SSTS constants\n    float ssts_min_stop_sdr;\n    float ssts_max_stop_sdr;\n    float ssts_min_stop_rrt;\n    float ssts_max_stop_rrt;\n    float ssts_min_lum_sdr;\n    float ssts_max_lum_sdr;\n    float ssts_min_lum_rrt;\n    float ssts_max_lum_rrt;\n    int ssts_n_knots_low;\n    int ssts_n_knots_high;\n    float3x3 ssts_m1;\n\n    // SSTS tables\n    // using the float4 type to store the two 2D vectors\n    // because Blink does not support generic array assignments\n    float4 ssts_minTable;\n    float4 ssts_maxTable;\n    float4 ssts_bendsLow;\n    float4 ssts_bendsHigh;\n\n    // SSTS parameters\n    float3 ssts_min_pt;\n    float3 ssts_mid_pt;\n    float3 ssts_max_pt;\n    float ssts_knotIncLow;\n    float ssts_knotIncHigh;\n    float ssts_pctLow;\n    float ssts_pctHigh;\n\n    // using the float3x3 type to store the array of 6 coefficients\n    // because Blink does not support generic array assignments\n    float3x3 ssts_coefsLow;\n    float3x3 ssts_coefsHigh;\n\n    float ssts_expShift;\n    float3 ssts_paramMin;\n    float3 ssts_paramMid;\n    float3 ssts_paramMax;\n\n\n    // matrix vars\n    float3x3 identity_matrix;\n    float3x3 XYZ_to_LMS_Bradford;\n    float3x3 XYZ_to_LMS_CAT02;\n\n    // float3x3 XYZ_to_LMS_ZCAM;\n    float3x3 LMS_to_Izazbz;\n\n    float3x3 XYZ_to_RGB_input;\n    float3x3 XYZ_to_RGB_limit;\n    float3x3 XYZ_to_RGB_output;\n\n    float3x3 RGB_to_XYZ_input;\n    float3x3 RGB_to_XYZ_limit;\n    float3x3 RGB_to_XYZ_output;\n\n    // white points\n    float3 d65White;\n    float3 inWhite;\n    float3 refWhite;\n\n    // the maximum RGB value of the limiting gamut\n    float boundaryRGB;\n\n    // the maximum lightness value of the limiting gamut\n    float limitJmax;\n\n    // the maximum colorfulness value of the limiting gamut\n    float limitMmax;\n\n    // the 1D LUT used for quickly findig the approximate limiting gamut cusp JMh coordinates\n    // the samples are spaced by HSV hue increments of the limiting RGB gamut\n    // so to find the correct entry for a given ZCAM hue (h) value \n    // one must search the table entries for the matching entry.z component\n    int gamutCuspTableSize;\n\n    // the 'gamutCuspTableUnsorted' table is populated\n    // in increments of H of the limiting gamut HSV space starting at H=0.0\n    // since it is unlikely that HSV.H=0 and JMh.h=0 line up\n    // the entries are then wrap-around shifted\n    // so that the 'gamutCuspTable' starts with the lowest JMh.h value\n    // both tables need to be declared here since temporary array variables\n    // in the init() fuction seem to crash Nuke on some systems\n    float3 gamutCuspTableUnsorted\[360];\n    float3 gamutCuspTable\[360];\n\n    // local version of the public focusDistance parameter\n    // this one will be clamped to a value > 0.0\n    float focusDistanceClamped;\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially returned -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n  float3 float3spow( float3 base, float exponent )\n  \{\n      return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n  \}\n\n  float3 float3sign( float3 v )\n  \{\n      return float3(sign(v.x), sign(v.y), sign(v.z));\n  \}\n\n\n  float3 float3abs( float3 a )\n  \{\n    return fabs(a);\n  \}\n\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    float hue_angle( float a, float b )\n    \{\n      float h = degrees(atan2(b, a)) / 360;\n  \n      return h;\n    \}\n\n\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n  // convert radians to degrees\n  float degrees( float radians )\n  \{\n    return radians * 180.0f / PI;\n  \}\n\n\n  // convert degrees to radians\n  float radians( float degrees )\n  \{\n    return degrees / 180.0f * PI;\n  \}\n\n\n  float3x3  RGBPrimsToXYZMatrix(float2 rxy, float2 gxy, float2 bxy, float2 wxy,float Y, bool direction)\n  \{\n    // # given r g b chromaticities and whitepoint, convert RGB colors to XYZ\n    // # based on CtlColorSpace.cpp from the CTL source code : 77\n    // # param: xy - dict of chromaticity xy coordinates: rxy: float2(x, y) etc\n    // # param: Y - luminance of \"white\" - defaults to 1.0\n    // # param: inverse - calculate XYZ to RGB instead\n\n    float2 r = rxy;\n    float2 g = gxy;\n    float2 b = bxy;\n    float2 w = wxy;\n\n    float X = w.x * Y / w.y;\n    float Z = (1 - w.x - w.y) * Y / w.y;\n\n    // # Scale factors for matrix rows\n    float d = r.x * (b.y - g.y) + b.x * (g.y - r.y) + g.x * (r.y - b.y);\n\n    float Sr =    (X * (b.y - g.y) -      \\\n            g.x * (Y * (b.y - 1.0f) +  \\\n            b.y  * (X + Z)) +       \\\n            b.x  * (Y * (g.y - 1.0f) + \\\n            g.y * (X + Z))) / d ;\n    \n    float Sg =    (X * (r.y - b.y) +      \\\n            r.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) -        \\\n            b.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    float Sb =    (X * (g.y - r.y) -      \\\n            r.x * (Y * (g.y - 1.0f) +  \\\n            g.y * (X + Z)) +        \\\n            g.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    // # Assemble the matrix\n    float Mdata\[] =\n    \{\n            Sr * r.x, Sr * r.y, Sr * (1.0f - r.x - r.y),\n            Sg * g.x, Sg * g.y, Sg * (1.0f - g.x - g.y),\n            Sb * b.x, Sb * b.y, Sb * (1.0f - b.x - b.y),\n    \};\n\n    float MdataNukeOrder\[] = \{\n      Mdata\[0], Mdata\[3], Mdata\[6],\n      Mdata\[1], Mdata\[4], Mdata\[7],\n      Mdata\[2], Mdata\[5], Mdata\[8],\n    \};\n\n    float3x3 newMatrix;\n    newMatrix.setArray(MdataNukeOrder);\n\n    // create inverse matrix\n    float3x3 newMatrixInverse = newMatrix.invert();\n\n    // return forward or inverse matrix\n    if (direction == 0)\n    \{\n      return newMatrix;\n    \}\n    else if (direction == 1)\n    \{\n      return newMatrixInverse;\n    \}\n  \}\n\n\n\n  // \"PowerP\" compression function (also used in the ACES Reference Gamut Compression transform)\n  // values of v above  'treshold' are compressed by a 'power' function\n  // so that an input value of 'limit' results in an output of 1.0\n  float compressPowerP( float v, float threshold, float limit, float power, int inverse )\n  \{\n    float s = (limit-threshold)/pow(pow((1.0f-threshold)/(limit-threshold),-power)-1.0f,1.0f/power);\n\n    float vCompressed;\n\n    if( inverse )\n    \{\n      vCompressed = (v<threshold||limit<1.0001f||v>threshold+s)?v:threshold+s*pow(-(pow((v-threshold)/s,power)/(pow((v-threshold)/s,power)-1.0f)),1.0f/power);\n    \}\n    else\n    \{\n      vCompressed = (v<threshold||limit<1.0001f)?v:threshold+s*((v-threshold)/s)/(pow(1.0f+pow((v-threshold)/s,power),1.0f/power));\n    \}\n\n    return vCompressed;\n  \}\n\n  // Two-Stage chromatic adaptation transforms as proposed by Zhai, Q., & Luo, M. R. (2018)\n  // https://opg.optica.org/oe/fulltext.cfm?uri=oe-26-6-7724\n  // https://github.com/colour-science/colour/blob/e5fa0790adcc3e5df5fa42ddf2bb75214c8cf59c/colour/adaptation/zhai2018.py\n  float3 CAT_Zhai2018( float3 XYZ_b, float3 XYZ_wb, float3 XYZ_wd, float D_b, float D_d, float3x3 M)\n  \{\n    float3 XYZ_wo = 100.0f;\n    float3 RGB_b = vector_dot(M, XYZ_b);\n    float3 RGB_wb = vector_dot(M, XYZ_wb);\n    float3 RGB_wd = vector_dot(M, XYZ_wd);\n    float3 RGB_wo = vector_dot(M, XYZ_wo);\n    \n    float3 D_RGB_b = D_b * (XYZ_wb.y / XYZ_wo.y) * (RGB_wo / RGB_wb) + 1 - D_b;\n    float3 D_RGB_d = D_d * (XYZ_wd.y / XYZ_wo.y) * (RGB_wo / RGB_wd) + 1 - D_d;\n    float3 D_RGB = D_RGB_b / D_RGB_d;\n    \n    float3 RGB_d = D_RGB * RGB_b;\n    float3 XYZ_d = vector_dot(M.invert(), RGB_d);\n    \n    return XYZ_d;\n  \}\n\n  // apply chromatic adaptation transform to 'XYZ' from 'XYZ_ws' to 'XYZ_wd' white points\n  // 'type' selects the cone fundamentals matrix (except for Zhai2018 which uses a 2-stage tranforms based on CATO2 fundamentals)\n  // 'adaptDegree' sets the degree of adaptation for the Zhai2018 model\n  float3 apply_CAT( float3 XYZ, float3 XYZ_ws, float3 XYZ_wd, int type, float adaptDegree )\n  \{\n    float3x3 XYZ_to_LMS;\n\n    if( type == 1 )\n    \{\n      // XYZ Scaling\n      XYZ_to_LMS = identity_matrix;\n    \}\n    else if( type == 2 )\n    \{\n      // Bradford\n      XYZ_to_LMS = XYZ_to_LMS_Bradford;\n    \}\n    else if( type == 3 )\n    \{\n      // CAT02\n      XYZ_to_LMS = XYZ_to_LMS_CAT02;\n    \}\n    else if( type == 4 )\n    \{\n      // Zhai2018\n      return CAT_Zhai2018(XYZ, XYZ_ws, XYZ_wd, adaptDegree, adaptDegree, XYZ_to_LMS_CAT02);\n    \}\n    else\n    \{\n      // None\n      return XYZ;\n    \}\n\n    float3 LMS_ws = vector_dot(XYZ_to_LMS, XYZ_ws);\n    float3 LMS_wd = vector_dot(XYZ_to_LMS, XYZ_wd);\n\n    // if(LMS_ws.x == 0.0f)\n    // \{\n    //   LMS_ws.x = 0.000001f;\n    // \}\n    // if(LMS_ws.y == 0.0f)\n    // \{\n    //   LMS_ws.y = 0.000001f;\n    // \}\n    // if(LMS_ws.z == 0.0f)\n    // \{\n    //   LMS_ws.z = 0.000001f;\n    // \}\n\n    float3x3 Mscale = identity_matrix;\n    Mscale\[0]\[0] = LMS_wd.x / LMS_ws.x;\n    Mscale\[1]\[1] = LMS_wd.y / LMS_ws.y;\n    Mscale\[2]\[2] = LMS_wd.z / LMS_ws.z;\n\n    float3x3 M = XYZ_to_LMS.invert() * Mscale * XYZ_to_LMS;\n\n    return vector_dot(M, XYZ);\n  \}\n\n\n  float3 post_adaptation_non_linear_response_compression_forward(float3 RGB, float F_L)\n  \{\n      // RGB = as_float_array(RGB)\n      // F_L = as_float_array(F_L)\n  \n      float3 F_L_RGB = float3spow(F_L * float3abs(RGB) / 100.0f, 0.42f);\n      float3 RGB_c = (400.0f * sign(RGB) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n  \n      return RGB_c;\n  \}\n\n  \n  float3 post_adaptation_non_linear_response_compression_inverse(float3 RGB,float F_L)\n  \{\n      // RGB = as_float_array(RGB)\n      // F_L = as_float_array(F_L)\n\n\n      // RGB_p = (\n      //     np.sign(RGB - 0.1)\n      //     * 100\n      //     / F_L\[..., np.newaxis]\n      //     * spow(\n      //         (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)),\n      //         1 / 0.42,\n      //     )\n      // )\n\n\n      // RGB_p = ( np.sign(RGB - 0.1) * 100 / F_L\[..., np.newaxis] * spow( (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)), 1 / 0.42, ))\n\n      // older compression formula subbed in\n      // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n\n      // float3 RGB_p =  sign(RGB - 0.1f) * 100.0f / F_L * spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f);\n      float3 RGB_p =  (float3sign(RGB - 0.1f) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f) );\n      // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n      return RGB_p;\n  \}\n\n\n  // def d_post_adaptation_non_linear_response_compression_forward(\n  //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n  // ) -> NDArray:\n  //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n  //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n  \n  //     d_RGB_a = (  400 * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100) / (F_L_RGB + 27.13) ** 2  )\n  \n  //     return d_RGB_a\n  \n  \n  float3 d_post_adaptation_non_linear_response_compression_forward( float3 RGB, float F_L)\n  \{\n      float3 F_L_RGB = float3spow(F_L * RGB / 100.0f, 0.42f);\n      float F_L_100 = spow(F_L / 100.0f, 0.42f);\n  \n      // float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ (F_L_RGB + 27.13f) ** 2.0f );\n         float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ ( (F_L_RGB + 27.13f) *  (F_L_RGB + 27.13f) ));\n      //    d_RGB_a = d_RGB_a * d_RGB_a;\n\n      return d_RGB_a;\n  \}\n\n  // convert XYZ tristimulus values to the ZCAM intermediate Izazbz colorspace\n  float3 XYZ_to_Izazbz( float3 XYZD65 )\n  \{\n    float3 XYZpD65 = XYZD65;\n    XYZpD65.x = zcam_cb * XYZD65.x - (zcam_cb - 1.0f) * XYZD65.z;\n    XYZpD65.y = zcam_cg * XYZD65.y - (zcam_cg - 1.0f) * XYZD65.x;\n    float3 LMS = vector_dot(XYZ_to_LMS_ZCAM, XYZpD65);\n    float3 LMSp = 0.0f;\n    LMSp.x = spow( ( zcam_c1 + zcam_c2 * spow((LMS.x/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.x/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.y = spow( ( zcam_c1 + zcam_c2 * spow((LMS.y/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.y/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.z = spow( ( zcam_c1 + zcam_c2 * spow((LMS.z/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.z/10000.0f),zcam_eta) ), zcam_rho);\n    float3 Izazbz = vector_dot(LMS_to_Izazbz, LMSp);\n    // return float3(LMS_to_Izazbz\[0]\[0], LMS_to_Izazbz\[0]\[1], LMS_to_Izazbz\[0]\[2]);\n    return Izazbz;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to XYZ tristimulus values\n  float3 Izazbz_to_XYZ( float3 Izazbz )\n  \{\n    float3 LMSp = vector_dot(LMS_to_Izazbz.invert(), Izazbz);\n    float3 LMS = 0.0f;\n    LMS.x = 10000.0f*spow((zcam_c1-spow(LMSp.x,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.x,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.y = 10000.0f*spow((zcam_c1-spow(LMSp.y,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.y,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.z = 10000.0f*spow((zcam_c1-spow(LMSp.z,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.z,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    float3 XYZpD65 = vector_dot(XYZ_to_LMS_ZCAM.invert(), LMS);\n    float3 XYZD65 = XYZpD65;\n    XYZD65.x = (XYZpD65.x+(zcam_cb-1.0f)*XYZpD65.z)/zcam_cb;\n    XYZD65.y = (XYZpD65.y+(zcam_cg-1.0f)*XYZD65.x)/zcam_cg;\n    return XYZD65;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 Izazbz_to_JMh( float3 Izazbz, float refWhiteIz, int viewingConditions )\n  \{\n    float3 JMh = 0.0f;\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n\n    JMh.z = fmod(degrees(atan2(Izazbz.z,Izazbz.y))+360.0f,360.0f);\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float Qz  = 2700.0f * spow(Izazbz.x,   (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    JMh.x = 100.0f * (Qz / Qzw);\n    JMh.y = 100.0f * spow((spow(Izazbz.y, 2.0f) + spow(Izazbz.z, 2.0f)), 0.37f) * ((spow(ez, 0.068f) * pow(zcam_F_L, 0.2f)) / (pow(zcam_F_b, 0.1f) * pow(refWhiteIz, 0.78f)));\n\n    return JMh;\n    // return float3(Qz, Qzw, JMh.z);\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to the ZCAM intermediate Izazbz colorspace\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 JMh_to_Izazbz( float3 JMh, float refWhiteIz, int viewingConditions )\n  \{\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n    float Qzm = spow(zcam_F_s, 2.2f) * spow(zcam_F_b, 0.5f) * spow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / spow(zcam_F_b, 0.12f)) * Qzm;\n    float Izp = spow(zcam_F_b, 0.12f) / (1.6f * zcam_F_s);\n    float Izd = 2700.0f * 100.0f * Qzm;\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float hzr = radians(JMh.z);\n    float Czp = spow((JMh.y * spow(refWhiteIz, 0.78f) * spow(zcam_F_b, 0.1f)) / (100.0f * spow(ez, 0.068f) * spow(zcam_F_L, 0.2f)), 50.0f / 37.0f);\n\n    return float3( spow((JMh.x * Qzw) / Izd, Izp), Czp * cos(hzr), Czp * sin(hzr));\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 XYZ_to_JMh( float3 XYZ, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        return Izazbz_to_JMh(XYZ_to_Izazbz(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree)), refWhiteIzazbz.x, viewingConditions);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return XYZ_to_Hellwig2022_JMh(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree), XYZ_w, L_A, Y_b,surround,discount_illuminant);\n    \}\n    else if( camMode == 2 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return XYZ_to_Hellwig2022_linearExtension_JMh(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree), XYZ_w, L_A, Y_b,surround,discount_illuminant);\n    \}\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to XYZ tristimulus values\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 JMh_to_XYZ( float3 JMh, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    float3 XYZ;\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        XYZ = apply_CAT(Izazbz_to_XYZ(JMh_to_Izazbz(JMh, refWhiteIzazbz.x, viewingConditions)), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        XYZ = apply_CAT(Hellwig2022_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n    else if( camMode == 2 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        XYZ = apply_CAT(Hellwig2022_linearExtension_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n\n    return XYZ;\n  \}\n\n\n  // check if the 3D point 'v' is inside a cube with the dimensions cubeSize x cubeSize x cubeSize \n  // the 'smoothing' parameter rounds off the edges and corners of the cube with the exception of the 0,0,0 and cubeSize x cubeSize x cubeSize corners\n  // a smoothing value of 0.0 applies no smoothing and 1.0 the maximum amount (smoothing values > 1.0 result in undefined behavior )\n  int isInsideCube( float3 v, float cubeSize, float smoothing)\n  \{\n    float3 normv = v / cubeSize;\n\n    float minv = min(normv.x, min(normv.y, normv.z));\n    float maxv = max(normv.x, max(normv.y, normv.z));\n\n    if( smoothing <= 0.0f )\n    \{\n      // when not smoothing we can use a much simpler test\n      if(minv < 0.0f || maxv > 1.0f)\n      \{\n        return 0;\n      \}\n\n      return 1;\n    \}\n\n    float3 clamped = normv;\n\n    float radius = smoothing/2.0f;\n\n    radius = clamp(radius*maxv*(1.0f-minv), 0.0f, radius);\n\n    clamped.x = clamp(normv.x, radius, 1.0f-radius);\n    clamped.y = clamp(normv.y, radius, 1.0f-radius);\n    clamped.z = clamp(normv.z, radius, 1.0f-radius);\n\n\n    if( length(normv - clamped ) > radius)\n    \{\n      return 0;\n    \}\n\n    return 1;\n  \}\n\n  // convert ACEScct encoded values to linear\n  float ACEScct_to_linear( float v )\n  \{\n    return v > 0.155251141552511f ? spow( 2.0f, v * 17.52f - 9.72f) : (v - 0.0729055341958355f) / 10.5402377416545f;\n  \}\n\n  // encode linear values as ACEScct\n  float linear_to_ACEScct( float v )\n  \{\n    return v > 0.0078125f ? (log2(v) + 9.72f) / 17.52f : 10.5402377416545f * v + 0.0729055341958355f;\n  \}\n\n\n  // convert sRGB gamma encoded values to linear\n  float sRGB_to_linear( float v )\n  \{\n    return v < 0.04045f ? v / 12.92f : spow((v + 0.055f) / 1.055f, 2.4f);\n  \}\n\n  // encode linear values as sRGB gamma\n  float linear_to_sRGB( float v )\n  \{\n    return v <= 0.0031308f ? 12.92f * v : 1.055 * (spow(v, 1.0f / 2.4f)) - 0.055f;\n  \}\n\n  // convert ST2084 PQ encoded values to linear\n  float ST2084_to_linear( float v )\n  \{\n    float V_p = spow(v, st2084_m_2_d);\n    return spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p;\n  \}\n\n  // encode linear values as ST2084 PQ\n  float linear_to_ST2084( float v )\n  \{\n    float Y_p = spow(max(0.0f, v) / st2084_L_p, st2084_m_1);\n\n    return spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);\n  \}\n\n  // decode value 'v' with the inverse of the selected encoding fuction to luminance\n  float encodingToLuminance(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return ACEScct_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return sRGB_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v, 2.4f) * referenceLuminance;\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v, 2.6f) * referenceLuminance;\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return ST2084_to_linear(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v * referenceLuminance;\n    \}\n  \}\n\n  // decode the components of a 3D vector 'v' with the inverse of the selected encoding fuction to luminance\n  float3 encodingToLuminance3(int encoding, float3 v)\n  \{\n    float3 lin;\n    lin.x = encodingToLuminance(encoding, v.x);\n    lin.y = encodingToLuminance(encoding, v.y);\n    lin.z = encodingToLuminance(encoding, v.z);\n\n    return lin;\n  \}\n\n  // encode the linear luminance value 'v' with the encoding fuction selected by 'encoding'\n  float luminanceToEncoding(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return linear_to_ACEScct(v / referenceLuminance);\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return linear_to_sRGB(v / referenceLuminance);\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v / referenceLuminance, 1.0f/2.4f);\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v / referenceLuminance, 1.0f/2.6f);\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return linear_to_ST2084(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v / referenceLuminance;\n    \}\n  \}\n\n  // encode the linear luminance value components of a 3D vector 'v' with the encoding fuction selected by 'encoding'\n  float3 luminanceToEncoding3(int encoding, float3 v)\n  \{\n    float3 enc;\n    enc.x = luminanceToEncoding(encoding, v.x);\n    enc.y = luminanceToEncoding(encoding, v.y);\n    enc.z = luminanceToEncoding(encoding, v.z);\n\n    return enc;\n  \}\n\n\n  // convert RGB values in the input colorspace to the ZCAM intermediate Izazbz colorspace\n  float3 input_RGB_to_Izazbz(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    return XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n  \}\n\n\n  // convert values in the ZCAM intermediate Izazbz colorspace to RGB values in the input colorspace\n  float3 Izazbz_to_input_RGB(float3 Izazbz)\n  \{\n    float3 luminanceXYZ = Izazbz_to_XYZ(Izazbz);\n    luminanceXYZ = apply_CAT(luminanceXYZ, d65White, inWhite, catType, 1.0f);\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 RGB = luminanceToEncoding3(encodingIn, luminanceRGB);\n    return RGB;\n  \}\n\n  // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 output_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n    float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n    // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n    float3 luminance_RGB_to_JMh(float3 luminanceRGB)\n    \{\n    //   float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n      float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n      float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n      return JMh;\n    \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n  float3 JMh_to_output_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n    if( clampOutput )\n    \{\n      outputRGB = clamp3(outputRGB, 0.0f, 1.0f);\n    \}\n\n    return outputRGB;\n  \}\n\n    // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n    float3 JMh_to_luminance_RGB(float3 JMh)\n    \{\n        float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n        float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n        // float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n        return luminanceRGB;\n    \}\n\n\n  // convert linear RGB values with the limiting primaries to ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 limit_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = RGB * boundaryRGB *referenceLuminance;\n    float3 XYZ = vector_dot(RGB_to_XYZ_limit, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to linear RGB values with the limiting primaries\n  float3 JMh_to_limit_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 RGB = luminanceRGB / boundaryRGB / referenceLuminance;\n    return RGB;\n  \}\n\n  // Hellwig 2022 forward\n  float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n    XYZ = float3_to_domain_100(XYZ);\n    XYZ_w = float3_to_domain_100(XYZ_w);\n    float _X_w = XYZ_w.x ;\n    float Y_w = XYZ_w.y ;\n    float _Z_w = XYZ_w.z ;\n    float3x3 MATRIX_16 = CAT_CAT16;\n    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n    float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n    if(discount_illuminant)\n    \{\n        D = 1.0f;\n    \}\n    float k = 1 / (5 * L_A + 1);\n    float k4 = pow(k,4);\n    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n    float n = sdiv(Y_b, Y_w);\n    float z = 1.48 + sqrt(n);\n    float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n    float3 RGB_wc = D_RGB * RGB_w;\n    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n    float R_aw = RGB_aw.x ;\n    float G_aw = RGB_aw.y ;\n    float B_aw = RGB_aw.z ;\n    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n    float3 RGB = vector_dot(MATRIX_16, XYZ);\n    float3 RGB_c = D_RGB * RGB;\n    float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n    float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n    float R_a = RGB_a.x ;\n    float G_a = RGB_a.y ;\n    float B_a = RGB_a.z ;\n    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n    float h = mod(degrees(atan2(b, a)), 360.0f);\n    float hr = radians(h);\n    float _h = hr;\n    float _2_h = 2 * hr;\n    float _3_h = 3 * hr;\n    float _4_h = 4 * hr;\n    float e_t = (\n        -0.0582f * cos(_h)\n        - 0.0258f * cos(_2_h)\n        - 0.1347f * cos(_3_h)\n        + 0.0289f * cos(_4_h)\n        - 0.1475f * sin(_h)\n        - 0.0308f * sin(_2_h)\n        + 0.0385f * sin(_3_h)\n        + 0.0096f * sin(_4_h)\n        + 1.0f\n    );\n    float R_a2 = RGB_a.x ;\n    float G_a2 = RGB_a.y ;\n    float B_a2 = RGB_a.z ;\n    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n    float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n    float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n    float C = 35.0f * sdiv(M, A_w);\n    float s = 100.0f * sdiv(M, Q);\n    return \{J,M,h\};\n\n  \}\n\n  // inverse Hellwig 2022\n  float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n      float J = JMh.x;\n      float M = JMh.y;\n      float h = JMh.z;\n      float _X_w = XYZ_w.x;\n      float Y_w = XYZ_w.y;\n      float _Z_w = XYZ_w.z;\n      float3x3 MATRIX_16 = CAT_CAT16;\n      float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n      float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n      if(discount_illuminant)\n      \{\n          D = 1.0f;\n      \}\n      float k = 1 / (5 * L_A + 1);\n      float k4 = pow(k,4);\n      float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n      float n = sdiv(Y_b, Y_w);\n      float z = 1.48 + sqrt(n);\n      float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n      float3 RGB_wc = D_RGB * RGB_w;\n      float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n      float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n      float R_aw = RGB_aw.x ;\n      float G_aw = RGB_aw.y ;\n      float B_aw = RGB_aw.z ;\n      float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n      float hr = radians(h);\n      float _h = hr;\n      float _2_h = 2 * hr;\n      float _3_h = 3 * hr;\n      float _4_h = 4 * hr;\n      float e_t = (\n          -0.0582f * cos(_h)\n          - 0.0258f * cos(_2_h)\n          - 0.1347f * cos(_3_h)\n          + 0.0289f * cos(_4_h)\n          - 0.1475f * sin(_h)\n          - 0.0308f * sin(_2_h)\n          + 0.0385f * sin(_3_h)\n          + 0.0096f * sin(_4_h)\n          + 1.0f\n      );\n      float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n      float P_p_1 = 43.0f * surround.z * e_t;\n      float P_p_2 = A;\n      float gamma = M / P_p_1;\n      float a = gamma * cos(hr);\n      float b = gamma * sin(hr);\n      float panlrcm_data\[]=\n      \{\n          460.0f, 451.0f, 288.0f,\n          460.0f, -891.0f, -261.0f,\n          460.0f, -220.0f, -6300.0f,\n      \};\n      float3x3 panlrcm;\n      panlrcm.setArray(panlrcm_data);\n      float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n      float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n      float3 RGB = RGB_c / D_RGB;\n      float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n      float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n      return XYZ;\n\n  \}\n\n\n\n  float3 XYZ_to_Hellwig2022_linearExtension_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n    //     \"\"\"\n    //     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n    //     correlates from given *CIE XYZ* tristimulus values.\n\n    //     Parameters\n    //     ----------\n    //     XYZ\n    //         *CIE XYZ* tristimulus values of test sample / stimulus.\n    //     XYZ_w\n    //         *CIE XYZ* tristimulus values of reference white.\n    //     L_A\n    //         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n    //         to be 20% of the luminance of a white object in the scene).\n    //     Y_b\n    //         Luminous factor of background :math:`Y_b` such as\n    //         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n    //         light source and :math:`L_b` is the luminance of the background. For\n    //         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n    //         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n    //         approximate an :math:`L^*` of 50 is used.\n    //     surround\n    //         Surround viewing conditions induction factors.\n    //     discount_illuminant\n    //         Truth value indicating if the illuminant should be discounted.\n\n    //     Returns\n    //     -------\n    //     :class:`colour.CAM_Specification_Hellwig2022`\n    //         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n    //     Notes\n    //     -----\n    //     +------------+-----------------------+---------------+\n    //     | **Domain** | **Scale - Reference** | **Scale - 1** |\n    //     +============+=======================+===============+\n    //     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n    //     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | **Range**                           | **Scale - Reference** | **Scale - \\\n    // 1** |\n    //     +=====================================+=======================+===========\\\n    // ====+\n    //     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n\n    //     References\n    //     ----------\n    //     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n    //     Examples\n    //     --------\n    //     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n    //     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n    //     >>> L_A = 318.31\n    //     >>> Y_b = 20.0\n    //     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n    //     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n    //     ... # doctest: +ELLIPSIS\n    //     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n    // h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n    // H=275.5949861..., HC=None)\n    //     \"\"\"\n\n        XYZ = float3_to_domain_100(XYZ);\n        XYZ_w = float3_to_domain_100(XYZ_w);\n        float _X_w = XYZ_w.x ;\n        float Y_w = XYZ_w.y ;\n        float _Z_w = XYZ_w.z ;\n        // L_A = as_float_array(L_A)\n        // Y_b = as_float_array(Y_b)\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n        \n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 1\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB = vector_dot(MATRIX_16, XYZ)\n\n        float3 RGB = vector_dot(MATRIX_16, XYZ);\n        // float3 RGB = XYZ;\n\n        // # Step 2\n        // RGB_c = D_RGB * RGB\n        float3 RGB_c = D_RGB * RGB;\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n        // float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n        // // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        // float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L)\n        // RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // ) * (\n        //     RGB_c - L_B\n        // ) + post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // )\n        // RGB_a = np.where(RGB_c < L_B, RGB_a_l, RGB_a)\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        float3 RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L);\n        // float3 RGB_a = RGB_c;\n        float3 RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(L_B, F_L) * ( RGB_c - L_B) + post_adaptation_non_linear_response_compression_forward( L_B, F_L );\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_a_l.x: RGB_a.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_a_l.y: RGB_a.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_a_l.z: RGB_a.z;\n\n\n\n\n        // # Step 4\n        // # Converting to preliminary cartesian coordinates.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a = RGB_d.x ;\n        float G_a = RGB_d.y ;\n        float B_a = RGB_d.z ;\n        // a = R_a - 12 * G_a / 11 + B_a / 11\n        float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n        // b = (R_a + G_a - 2 * B_a) / 9\n        float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n        // # Computing the *hue* angle :math:`h`.\n        // h = np.degrees(np.arctan2(b, a)) % 360\n        // Unclear why this isnt matching the python version.\n        float h = mod(degrees(atan2(b, a)), 360.0f);\n\n        \n\n        // # Step 5\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n\n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Step 6\n        // # Computing achromatic responses for the stimulus.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a2 = RGB_a.x ;\n        float G_a2 = RGB_a.y ;\n        float B_a2 = RGB_a.z ;\n        // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n        float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n        // # Step 7\n        // # Computing the correlate of *Lightness* :math:`J`.\n        // with sdiv_mode():\n        //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n        float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n        // # Step 8\n        // # Computing the correlate of *brightness* :math:`Q`.\n        // with sdiv_mode():\n        //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n        float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n        // # Step 9\n        // # Computing the correlate of *colourfulness* :math:`M`.\n        // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n        float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n        // # Computing the correlate of *chroma* :math:`C`.\n        // with sdiv_mode():\n        //     C = 35 * sdiv(M, A_w)\n        float C = 35.0f * sdiv(M, A_w);\n\n\n        // # Computing the correlate of *saturation* :math:`s`.\n        // with sdiv_mode():\n        //     s = 100 * sdiv(M, Q)\n        float s = 100.0f * sdiv(M, Q);\n\n\n\n        // return XYZ_w;\n        // return RGB_w;\n        // return \{D,k,k4\};\n        // return \{F_L,n,z\};\n        // return RGB_c;\n        return \{J,M,h\};\n        // return XYZ;\n    \}\n\n    float3 Hellwig2022_linearExtension_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        // float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L)\n        // RGB_c_l = (\n        //     RGB_a\n        //     - post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) / (\n        //     d_post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) + L_B\n        // RGB_c = np.where(RGB_c < L_B, RGB_c_l, RGB_c)\n\n        // Adding 0.1 here seems to fix the inversion issue, not really clear on why I'm needing to do this\n        RGB_a = RGB_a + 0.1f;\n        float3 RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L);\n        // float3 RGB_c = RGB_a;\n        float3 RGB_c_l = ( RGB_a - post_adaptation_non_linear_response_compression_forward( L_B, F_L)) / (d_post_adaptation_non_linear_response_compression_forward( L_B, F_L)) + L_B;\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_c_l.x : RGB_c.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_c_l.y : RGB_c.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_c_l.z : RGB_c.z;\n\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_d / D_RGB;\n        \n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n\n        // return XYZ;\n        return XYZ;\n\n    \}\n\n\n\n\n  // convert HSV cylindrical projection values to RGB\n  float3 HSV_to_RGB( float3 HSV )\n  \{\n    float C = HSV.z*HSV.y;\n    float X = C*(1.0f-fabs(fmod(HSV.x*6.0f,2.0f)-1.0f));\n    float m = HSV.z-C;\n\n    float3 RGB;\n    RGB.x = (HSV.x<1.0f/6.0f?  C :HSV.x<2.0f/6.0f?  X :HSV.x<3.0f/6.0f?0.0f:HSV.x<4.0f/6.0f?0.0f:HSV.x<5.0f/6.0f?  X :  C )+m;\n    RGB.y = (HSV.x<1.0f/6.0f?  X :HSV.x<2.0f/6.0f?  C :HSV.x<3.0f/6.0f?  C :HSV.x<4.0f/6.0f?  X :HSV.x<5.0f/6.0f?0.0f:0.0f)+m;\n    RGB.z = (HSV.x<1.0f/6.0f?0.0f:HSV.x<2.0f/6.0f?0.0f:HSV.x<3.0f/6.0f?  X :HSV.x<4.0f/6.0f?  C :HSV.x<5.0f/6.0f?  C :  X )+m;\n    return RGB;\n  \}\n\n\n  // convert RGB to HSV cylindrical projection values\n  float3 RGB_to_HSV( float3 RGB )\n  \{\n    float cmax = max(RGB.x,max(RGB.y,RGB.z));\n    float cmin = min(RGB.x,min(RGB.y,RGB.z));\n    float delta = cmax-cmin;\n\n    float3 HSV;\n    HSV.x = delta==0.0f?0.0f:cmax==RGB.x?(fmod((RGB.y-RGB.z)/delta+6.0f,6.0f))/6.0f:cmax==RGB.y?(((RGB.z-RGB.x)/delta+2.0f)/6.0f):(((RGB.x-RGB.y)/delta+4.0f)/6.0f);\n    HSV.y = cmax == 0.0f ? 0.0f : delta / cmax;\n    HSV.z = cmax;\n    return HSV;\n  \}\n\n\n  // retrieve the JM coordinates of the limiting gamut cusp at the hue slice 'h'\n  // cusps are very expensive to compute\n  // and the DRT is only using them for lightness mapping\n  // which does not require a high degree of accuracy\n  // so instead we use a pre-computed table of cusp points\n  // sampled at 1 degree hue intervals of the the RGB target gamut\n  // and lerp between them to get the approximate J & M values\n  float2 cuspFromTable(float h)\n  \{\n\n    float3 lo;\n    float3 hi;\n\n    if( h <= gamutCuspTable\[0].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      lo.z = lo.z-360.0f;\n      hi = gamutCuspTable\[0];\n    \}\n    else if( h >= gamutCuspTable\[gamutCuspTableSize-1].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      hi = gamutCuspTable\[0];\n      hi.z = hi.z+360.f;\n    \}\n    else\n    \{\n      for(int i = 1; i < gamutCuspTableSize; ++i)\n      \{\n        if( h <= gamutCuspTable\[i].z )\n        \{\n          lo = gamutCuspTable\[i-1];\n          hi = gamutCuspTable\[i];\n          break;\n        \}\n      \}\n    \}\n\n    float t = (h - lo.z) / (hi.z - lo.z);\n\n    float cuspJ = lerp(lo.x, hi.x, t);\n    float cuspM = lerp(lo.y, hi.y, t);\n\n    return float2(cuspJ,cuspM);\n  \}\n\n\n  // find the JM coordinates of the smoothed boundary of the limiting gamut in ZCAM at the hue slice 'h' \n  // by searching along the line defined by 'JMSource' and 'JMFocus'\n  // the function will search outwards from where the line intersects the achromatic axis with a staring incement of 'startStepSize'\n  // once the boundary has been crossed it will search in the opposite direction with half the step size\n  // and will repeat this as as many times as is set by the 'precision' paramter\n  float2 findBoundary(float2 JMSource, float2 JMFocus, float h, float3 XYZw, float3 XYZd65, float3x3 XYZ_to_RGB, float smoothing, int precision, float startStepSize )\n  \{\n\n    float2 achromaticIntercept = float2(JMFocus.x - (((JMSource.x-JMFocus.x) / (JMSource.y-JMFocus.y))*JMFocus.y), 0.0f);\n\n    if( achromaticIntercept.x <= 0.0f || achromaticIntercept.x >= limitJmax )\n    \{\n       return achromaticIntercept;\n    \}\n\n\n    float stepSize = startStepSize;\n    float2 unitVector = normalize(achromaticIntercept - JMFocus);\n    float2 JMtest = achromaticIntercept;\n    int searchOutwards = 1;\n\n    for( int i = 0; i < precision; ++i )\n    \{\n\n      while( 1 )\n      \{\n        JMtest = JMtest + unitVector * stepSize;\n        int inside = isInsideCube( vector_dot(XYZ_to_RGB, JMh_to_XYZ( float3(JMtest.x, JMtest.y, h), XYZw, XYZd65, viewingConditions ) / referenceLuminance ), boundaryRGB, smoothing);\n\n        if( searchOutwards )\n        \{\n          if( JMtest.x < 0.0f || JMtest.x > limitJmax || JMtest.y > limitMmax || !inside )\n          \{\n            searchOutwards = 0;\n            stepSize = -fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n        else\n        \{\n          if( JMtest.y < 0.0f || inside )\n          \{\n            searchOutwards = 1;\n            stepSize = fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n      \}\n    \}\n\n\n    float2 JMboundary = float2( clamp(JMtest.x, 0.0f, limitJmax), clamp(JMtest.y, 0.0f, limitMmax) );\n\n    return JMboundary;\n  \}\n\n\n  // apply the forward ACES SingleStageToneScale (SSTS) transform to the linear 'x' input value and return a luminance value\n  float forwardSSTS(float x, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    // Check for negatives or zero before taking the log. If negative or zero,\n    // set to HALF_MIN.\n    float logx = log10( max(x, HALF_MIN )); \n\n    float logy;\n\n    if( logx <= log10(minPt.x) )\n    \{ \n        logy = logx * minPt.z + ( log10(minPt.y) - minPt.z * log10(minPt.x) );\n    \}\n    else if(( logx > log10(minPt.x) ) && ( logx < log10(midPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(minPt.x)) / (log10(midPt.x) - log10(minPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsLow\[j/3]\[j%3], ssts_coefsLow\[(j+1)/3]\[(j+1)%3], ssts_coefsLow\[(j+2)/3]\[(j+2)%3]);\n        float3 monomials( t * t, t, 1.0f );\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else if(( logx >= log10(midPt.x) ) && ( logx < log10(maxPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(midPt.x)) / (log10(maxPt.x) - log10(midPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsHigh\[j/3]\[j%3], ssts_coefsHigh\[(j+1)/3]\[(j+1)%3], ssts_coefsHigh\[(j+2)/3]\[(j+2)%3]); \n        float3 monomials(t * t, t, 1.0f);\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else\n    \{\n        logy = logx * maxPt.z + ( log10(maxPt.y) - maxPt.z * log10(maxPt.x) );\n    \}\n\n    return spow(10.0f,logy);\n  \}\n\n// Michalis Menton Dual Spring Curve\n  float forwardMmTonescale(float x)\n  \{\n      float tc = 0.0f;\n      if (x<0.18)\n      \{\n          tc = cs*spow(x,c0);\n      \}\n      else\n      \{\n          tc = c0*(x-0.18)+0.18;\n      \}\n      \n      float ts = s1*spow((tc/(s0+tc)),p);\n      float tf = ts*ts/(ts+fl);\n      float ccf = spow(s0/(x+s0),dch)*sat;\n\n      return tf;\n  \}\n\n  float inverseMmTonescale(float x)\n  \{\n\n      float tf = (x+sqrt(x*(4*fl+x)))/2;\n      float ts = s0/(spow((s1/tf),(1/p))-1);\n      float tc = 0.0f;\n      if (ts<0.18)\n      \{\n          tc = spow((ts/cs),(1/c0));\n      \}\n      else\n      \{\n          tc = (ts-0.18)/c0+0.18;\n      \}\n      float ccf = spow(s0/(tc+s0),dch)*sat;\n\n      return tc;\n  \}\n\n  // Daniele's Compression Curve\n  // https://www.desmos.com/calculator/fihdxfot6s\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Scale Data\n      //   x = x / n;\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n      \n      //  Scale Data\n      //   h = h * n;\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n      \n      // inverted version of forwardDanieleCompressionCurve\n\n\n      float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n      float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n      // // Rescale data down\n      // x = x * n;\n\n      return new_x;\n  \}\n\n\n\n  \n  // apply the inverse ACES SingleStageToneScale (SSTS) transfomr to the 'x' luminance value and return an linear value\n  float inverseSSTS(float y, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    float KNOT_INC_LOW  = (log10(midPt.x) - log10(minPt.x)) / 3.0f;\n    float KNOT_INC_HIGH = (log10(maxPt.x) - log10(midPt.x)) / 3.0f;\n\n    // KNOT_Y is luminance of the spline at each knot\n    float KNOT_Y_LOW\[4];\n\n   for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_LOW\[i] = ( ssts_coefsLow\[i/3]\[i%3] + ssts_coefsLow\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float KNOT_Y_HIGH\[ 4];\n\n    for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_HIGH\[i] = ( ssts_coefsHigh\[i/3]\[i%3] + ssts_coefsHigh\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float logy = log10( max(y, 0.0000000001f));\n\n    float logx;\n\n    if( logy <= log10(minPt.y) )\n    \{\n        logx = log10(minPt.x);\n\n    \}\n    else if( (logy > log10(minPt.y)) && (logy <= log10(midPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy > KNOT_Y_LOW\[0] && logy <= KNOT_Y_LOW\[1])\n        \{\n          cf.x = ssts_coefsLow\[0]\[0];\n          cf.y = ssts_coefsLow\[0]\[1];\n          cf.z = ssts_coefsLow\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_LOW\[1] && logy <= KNOT_Y_LOW\[2])\n        \{\n          cf.x = ssts_coefsLow\[0]\[1];\n          cf.y = ssts_coefsLow\[0]\[2];\n          cf.z = ssts_coefsLow\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_LOW\[2] && logy <= KNOT_Y_LOW\[3])\n        \{\n          cf.x = ssts_coefsLow\[0]\[2];\n          cf.y = ssts_coefsLow\[1]\[0];\n          cf.z = ssts_coefsLow\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(minPt.x) + ( t + j) * KNOT_INC_LOW;\n\n    \}\n    else if( (logy > log10(midPt.y)) && (logy < log10(maxPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy >= KNOT_Y_HIGH\[0] && logy <= KNOT_Y_HIGH\[1])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[0];\n          cf.y = ssts_coefsHigh\[0]\[1];\n          cf.z = ssts_coefsHigh\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_HIGH\[1] && logy <= KNOT_Y_HIGH\[2])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[1];\n          cf.y = ssts_coefsHigh\[0]\[2];\n          cf.z = ssts_coefsHigh\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_HIGH\[2] && logy <= KNOT_Y_HIGH\[3])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[2];\n          cf.y = ssts_coefsHigh\[1]\[0];\n          cf.z = ssts_coefsHigh\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(midPt.x) + ( t + j) * KNOT_INC_HIGH;\n\n    \}\n    else\n    \{\n        logx = log10(maxPt.x);\n\n    \}\n\n    return spow(10.0f, logx);\n  \}\n\n\n  // convert Iz to luminance\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float IzToLuminance( float Iz )\n  \{\n    float V_p = spow(Iz, 1.0f / zcam_rho);\n    float luminance = spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p * zcam_luminance_shift;\n    return luminance;\n  \}\n\n\n  // convert luminance to Iz\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float luminanceToIz( float luminance )\n  \{\n    float Y_p = spow((luminance/zcam_luminance_shift) / st2084_L_p, st2084_m_1);\n    float Iz = spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), zcam_rho);\n    return Iz;\n  \}\n\n\n  // calculate a scale factor for colorfulness\n  // based on the difference between the original and tone scaled (TS) Iz values\n  // we are only interested in the differences above mid grey\n  // so we first offset the original Iz values to align 18% it with the mid point of the IzTS value\n  float highlightDesatFactor( float Iz, float IzTS )\n  \{\n\n    // float linear = IzToLuminance(Iz) / referenceLuminance;\n    float linear =Iz;\n\n    // no highlight desat below SSTS mid point\n    if( linear < 0.18f )\n    \{\n      return 1.0f;\n    \}\n\n    // float IzMid   = luminanceToIz(0.18f * referenceLuminance);\n    // float IzMidTS = luminanceToIz(sstsLuminance.y);\n    float IzMid   = 0.18f;\n    float IzMidTS = sstsLuminance.y/referenceLuminance;\n\n    float IzAligned = Iz + IzMidTS - IzMid;\n\n    float desatFactor = 1.0f - clamp( compressPowerP( (log10(max(HALF_MIN, IzAligned)) - log10(max(HALF_MIN, IzTS))) * desatHighlights, compressionFuncParams.x, HALF_MAX, compressionFuncParams.z, 0 ), 0.0f, 1.0f);\n\n    return desatFactor;\n  \}\n\n\n  float3 input_RGB_to_JMh(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // // CAT to go from D60 to D65\n    // if (D60toD65CATtoggle)\n    // \{\n    //   luminanceXYZ = vector_dot(D60toD65CAT, luminanceXYZ);\n    // \}\n    \n\n    // // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    // float3 Izazbz =  XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n    // float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 colorJMh = Izazbz_to_JMh(Izazbz, refWhiteIzazbz.x, 0);\n\n    float3 JMh = XYZ_to_JMh(luminanceXYZ, inWhite, d65White, viewingConditions);\n\n    return JMh;\n\n  \}\n\n\n\n  float3 JMh_to_input_RGB(float3 JMh)\n  \{\n\n\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, inWhite, d65White, viewingConditions );\n    // // CAT to go from D60 to D65\n    // if (D60toD65CATtoggle)\n    // \{\n    //   luminanceXYZ = vector_dot(D60toD65CAT, luminanceXYZ);\n    // \}\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 inputRGB = luminanceToEncoding3( encodingIn, luminanceRGB);\n\n\n    return inputRGB;\n\n  \}\n\n\n\n  float3 forwardTonescale( float3 inputJMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n\n    float3 outputJMh;\n\n    // if( ! applyTonecurve && ! applyHighlightDesat )\n    // \{\n    //   // nothing to do here except output input JMh\n    //   return outputJMh;\n    // \}\n\n    // float3 colorJMh = Izazbz_to_JMh(inputIzazbz, refWhiteIzazbz.x, 0);\n    \n    float3 monoJMh = float3(inputJMh.x,0.0f,0.0f);\n\n    float3 linearJMh = JMh_to_luminance_RGB(monoJMh);\n    float linear = linearJMh.x/referenceLuminance;\n\n    // float3 monoIzazbz = JMh_to_Izazbz(colorJMh, refWhiteIzazbz.x, 0);\n    // float3 monoXYZ = Izazbz_to_XYZ(monoIzazbz);\n\n    float luminanceTS = linear;\n\n    // switch for applying the different tonescale compression functions\n    if ( toneScaleMode == 0 )\n    \{\n      luminanceTS =  forwardSSTS(linear, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n    else if( toneScaleMode == 1 )\n    \{\n        luminanceTS = forwardMmTonescale(linear) * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        luminanceTS = forwardDanieleCompressionCurve(linear)  * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 3 )\n    \{\n        luminanceTS = pow(1.0f/2.2f,linear)*referenceLuminance;\n    \}\n\n\n\n    float3 tonemappedmonoJMh = luminance_RGB_to_JMh(float3(luminanceTS,luminanceTS,luminanceTS));\n    float3 tonemappedJMh = float3(tonemappedmonoJMh.x,inputJMh.y,inputJMh.z);\n    // float3 tonemappedJMh = float3(tonemappedmonoJMh.x,0.0f,0.0f);\n    // float3 tonemappedJMh = float3(inputJMh.x,inputJMh.y,inputJMh.z);\n\n    // return outputJMh;\n    if( applyTonecurve )\n    \{\n        outputJMh = tonemappedJMh;\n    \}\n    else\n    \{\n        outputJMh = inputJMh;\n    \}\n\n    // Apply highlight desat\n    float factM = highlightDesatFactor(linear, luminanceTS/referenceLuminance);\n    if( applyHighlightDesat )\n    \{\n      outputJMh.y = outputJMh.y * factM;\n    \}\n    else\n    \{\n      outputJMh.y = outputJMh.y;  \n    \}\n\n    return outputJMh;\n\n  \}\n\n\n  float3 inverseTonescale( float3 JMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 Izazbz = JMh_to_Izazbz(JMh, refWhiteIzazbz.x, 0);\n\n    float3 tonemappedJMh = JMh;\n\n    if( ! applyTonecurve && ! applyHighlightDesat )\n    \{\n      // nothing else to do here\n      return tonemappedJMh;\n    \}\n\n    float3 untonemappedColourJMh = tonemappedJMh;\n\n    \n    // float luminance = IzToLuminance(Izazbz.x);\n\n    float3 monoTonemappedJMh = float3(tonemappedJMh.x,0.0f,0.0f);\n    float3 monoTonemappedRGB = JMh_to_luminance_RGB(monoTonemappedJMh);\n    float3 newMonoTonemappedJMh = luminance_RGB_to_JMh(monoTonemappedRGB);\n    float luminance = monoTonemappedRGB.x;\n\n    float3 tonemappedRGB = JMh_to_luminance_RGB(tonemappedJMh);\n    float3 newTonemappedJMh = luminance_RGB_to_JMh(tonemappedRGB);\n\n    // newTonemappedJMh.x = newTonemappedJMh.x * 2.0f;\n\n\n    // Dummy value to init the var\n    float linear = 50.0f;\n    // swtich for testing out the MM tonescale from Jed\n    if( toneScaleMode == 1 )\n    \{\n        linear = inverseMmTonescale(luminance/mmScaleFactor);\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        linear = inverseDanieleCompressionCurve(luminance/mmScaleFactor);\n    \}\n    else\n    \{\n        linear = inverseSSTS(luminance, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n    linear = linear*referenceLuminance;\n  \n    if( applyTonecurve )\n    \{\n      float3 untonemappedMonoJMh = luminance_RGB_to_JMh(float3(linear,linear,linear));\n      untonemappedColourJMh = float3(untonemappedMonoJMh.x,tonemappedJMh.y,tonemappedJMh.z);\n    \}\n \n\n    // Apply highlight desat\n    // I think there is bug here if you apply desat, but no tonecurve in the forward direction.\n    float factM = highlightDesatFactor(linear/referenceLuminance, luminance/referenceLuminance);\n    if( applyHighlightDesat && applyTonecurve )\n    \{\n      untonemappedColourJMh.y = untonemappedColourJMh.y / factM;\n    \}\n\n\n    return  untonemappedColourJMh;\n  \}\n\n\n  // compress the ZCAM JM values into the limiting gamut by projecting them towards a focus point beyond the achromatic axis\n  // in order to avoid the gamut compression to also compress black and white tones towards the focus point\n  // (which would result in lifed blacks and crushed highlights)\n  // we offset the focus further away from the achromatic axis the closer the lightness of a sample is to the zero or the limitJmax value\n  // a far away focus point means the compression vector becomes close to orthogonal to the lightness axis preserving black & white lightness\n  // the 'distanceGainCalcJ' paramter should be set to inputJMh.x for the forward direction\n  // and to the best guess of the original, uncompressed values for the inverse direction\n  // this is used for iteratively converging on the original, uncompressed value of J which would have gotten obfuscated by the forward transform\n  float3 compressGamut( float3 inputJMh, int invert, float distanceGainCalcJ )\n  \{\n    if( ! applyGamutCompression )\n    \{\n      return inputJMh;\n    \}\n\n    float sstsMidJ = XYZ_to_JMh( refWhite * sstsLuminance.y, refWhite, d65White, viewingConditions ).x;\n    float2 JMinput = float2(inputJMh.x, inputJMh.y);\n    float2 JMcusp = cuspFromTable( inputJMh.z);\n\n    float focusJ = lerp(JMcusp.x, sstsMidJ, cuspMidBlend);\n\n    float focusDistanceGain = 1.0f;\n\n    if( distanceGainCalcJ > focusJ )\n    \{\n      focusDistanceGain = (limitJmax - focusJ) / max(0.0001f, (limitJmax - min(limitJmax, distanceGainCalcJ)));\n    \}\n    else\n    \{\n      focusDistanceGain = (focusJ) / max(0.0001f, distanceGainCalcJ); \n    \}\n\n    float2 JMfocus = float2( focusJ, -JMcusp.y*focusDistanceClamped*focusDistanceGain );\n    float2 vecToFocus = (JMfocus - JMinput);\n    float2 achromaticIntercept = float2(JMfocus.x - (((JMinput.x-JMfocus.x) / (JMinput.y-JMfocus.y))*JMfocus.y), 0.0f);\n\n    // to reduce the number of expensive boundary finding iterations needed\n    // we taking an educated guess at a good starting step size\n    // based on how far the sample is either above or below the gamut cusp\n    float cuspToTipRatio;\n    if( JMinput.x > JMcusp.x )\n    \{\n      cuspToTipRatio = (JMinput.x - JMcusp.x) / (limitJmax - JMcusp.x);\n    \}\n    else\n    \{\n      cuspToTipRatio = (JMcusp.x - JMinput.x) / (JMcusp.x);\n    \}\n\n    float startStepSize = lerp(JMcusp.y / 3.0f, 0.1f, cuspToTipRatio);\n    float2 JMboundary = findBoundary(JMinput, JMfocus,  inputJMh.z, refWhite, d65White, XYZ_to_RGB_limit, smoothCusps, boundarySolvePrecision, startStepSize);\n    float normFact = 1.0f / max(0.0001f, length(JMboundary - achromaticIntercept));\n    float v = length(JMinput-achromaticIntercept) * normFact;\n    float vCompressed = compressPowerP(v, compressionFuncParams.x, compressionFuncParams.y, compressionFuncParams.z, invert);\n    float2 JMcompressed = 0.0f;\n    // hack to stop nan values after compression\n    if (JMinput.y != 0.0f)\n    \{\n      JMcompressed = achromaticIntercept + normalize(JMinput-achromaticIntercept)*vCompressed/normFact;\n    \}\n    else\n    \{\n      JMcompressed = JMinput;\n    \}\n    return float3(JMcompressed.x, JMcompressed.y, inputJMh.z);\n  \}\n\n\n  // apply the forward gamut compression to the limiting primaries\n  float3 compressGamutForward( float3 JMh )\n  \{\n    float3 JMhcompressed = compressGamut( JMh, 0, JMh.x );\n    // Hack to deal with weird zero values on output\n    // JMhcompressed.x = min(300.0f,JMhcompressed.x);\n    return JMhcompressed;\n  \}\n\n\n  // apply the inverse gamut compression\n  // and iterate a given number of times to reconstruct the original J value\n  float3 compressGamutInverse( float3 JMh )\n  \{\n    float3 JMhuncompressed;\n    float distanceGainCalcJ = JMh.x;\n\n    for( int i = 0; i < inverseSolverIterations; ++i )\n    \{\n      JMhuncompressed = compressGamut( JMh, 1, distanceGainCalcJ );\n      distanceGainCalcJ = JMhuncompressed.x;\n    \}\n\n    return JMhuncompressed;\n  \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    zcam_L_A = referenceLuminance * backgroundLuminance / 100.0f;\n    zcam_F_b = sqrt(backgroundLuminance/referenceLuminance);\n    zcam_F_L = 0.171f*spow(zcam_L_A, 1.0f/3.0f) * (1.0f-exp(-48.0f/9.0f*zcam_L_A));\n\n    if( discountIlluminant )\n    \{\n      cat_adaptDegree = 1.0f;\n    \}\n    else\n    \{\n      float viewingConditionsCoeff = 1.0f;\n\n      if( viewingConditions == 0 )\n      \{\n        viewingConditionsCoeff = 0.8f;\n      \}\n      else if( viewingConditions == 1 )\n      \{\n        viewingConditionsCoeff = 0.9f;\n      \}\n      else if( viewingConditions == 2 )\n      \{\n        viewingConditionsCoeff = 1.0f;\n      \}\n\n      cat_adaptDegree = viewingConditionsCoeff * (1.0f - (1.0f / 3.6f) * exp((-zcam_L_A - 42.0f) / 92.0f));\n    \}\n\n    zcam_cb  = 1.15f;\n    zcam_cg  = 0.66f;\n    zcam_c1  = 3424.0f / spow(2.0f,12.0f);\n    zcam_c2  = 2413.0f / spow(2.0f, 7.0f);\n    zcam_c3  = 2392.0f / spow(2.0f, 7.0f);\n    zcam_eta = 2610.0f / spow(2.0f,14.0f);\n    // zcam_rho = 1.7f * 2323.0f / pow(2.0f,5.0f);\n    zcam_luminance_shift = 1.0f / (-0.20151000f + 1.12064900f + 0.05310080f);\n\n    zcam_viewing_conditions_coeff = 1.0f;\n\n    if( viewingConditions == 0 )\n    \{\n      zcam_viewing_conditions_coeff = 0.525f;\n    \}\n    else if( viewingConditions == 1 )\n    \{\n      zcam_viewing_conditions_coeff = 0.59f;\n    \}\n    else if( viewingConditions == 2 )\n    \{\n      zcam_viewing_conditions_coeff = 0.69f;\n    \}\n\n    st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);\n    st2084_m_2=2523.0f / 4096.0f * 128.0f;\n    st2084_c_1=3424.0f / 4096.0f;\n    st2084_c_2=2413.0f / 4096.0f * 32.0f;\n    st2084_c_3=2392.0f / 4096.0f * 32.0f;\n    st2084_m_1_d = 1.0f / st2084_m_1;\n    st2084_m_2_d = 1.0f / st2084_m_2;\n    st2084_L_p = 10000.0f;\n\n    ssts_min_stop_sdr =  -6.5f;\n    ssts_max_stop_sdr =   6.5f;\n    ssts_min_stop_rrt = -15.0f;\n    ssts_max_stop_rrt =  18.0f;\n    ssts_min_lum_sdr = 0.02f;\n    ssts_max_lum_sdr = 48.0f;\n    ssts_min_lum_rrt = 0.0001f;\n    ssts_max_lum_rrt = 10000.0f;\n    ssts_n_knots_low = 4;\n    ssts_n_knots_high = 4;\n\n    ssts_minTable = float4(log10(ssts_min_lum_rrt), ssts_min_stop_rrt, log10(ssts_min_lum_sdr), ssts_min_stop_sdr);\n    ssts_maxTable = float4(log10(ssts_max_lum_sdr), ssts_max_stop_sdr, log10(ssts_max_lum_rrt), ssts_max_stop_rrt);\n    ssts_bendsLow = float4(ssts_min_stop_rrt, 0.18f, ssts_min_stop_sdr, 0.35f);\n    ssts_bendsHigh = float4(ssts_max_stop_sdr, 0.89f, ssts_max_stop_rrt, 0.90f);\n\n    float ssts_m1_data\[]=\{ 0.5f,-1.0f, 0.5f,\n                          -1.0f, 1.0f, 0.0f,\n                           0.5f, 0.5f, 0.0f \};\n    ssts_m1.setArray(ssts_m1_data);\n\n    ssts_min_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_minTable, log10(sstsLuminance.x)));\n    ssts_min_pt.y = sstsLuminance.x;\n    ssts_min_pt.z = 0.0f;\n\n    ssts_mid_pt = float3(0.18f, 4.8f, 1.55f);\n\n    ssts_max_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_maxTable, log10(sstsLuminance.z)));\n    ssts_max_pt.y = sstsLuminance.z;\n    ssts_max_pt.z = 0.0f;\n\n    ssts_knotIncLow  = (log10(ssts_mid_pt.x) - log10(ssts_min_pt.x)) / 3.0f;\n    ssts_knotIncHigh = (log10(ssts_max_pt.x) - log10(ssts_mid_pt.x)) / 3.0f;\n    ssts_pctLow  = lerp1D(ssts_bendsLow,  log2(ssts_min_pt.x / 0.18f));\n    ssts_pctHigh = lerp1D(ssts_bendsHigh, log2(ssts_max_pt.x / 0.18f));\n\n    \n    float ssts_coefsLow_data\[] = \{\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      log10(ssts_min_pt.y) + ssts_pctLow*(log10(ssts_mid_pt.y)-log10(ssts_min_pt.y)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    float sssts_coefsHigh_data\[] = \{\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      log10(ssts_mid_pt.y) + ssts_pctHigh*(log10(ssts_max_pt.y)-log10(ssts_mid_pt.y)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    ssts_coefsLow.setArray(ssts_coefsLow_data);\n    ssts_coefsHigh.setArray(sssts_coefsHigh_data);\n\n    ssts_paramMin = ssts_min_pt;\n    ssts_paramMid = ssts_mid_pt;\n    ssts_paramMax = ssts_max_pt;\n    ssts_expShift = log2(inverseSSTS(sstsLuminance.y, ssts_min_pt, ssts_paramMid, ssts_max_pt)) - log2(0.18f);\n    ssts_paramMin.x = spow(2.0f, (log(ssts_paramMin.x) / log(2.0f) - ssts_expShift));\n    ssts_paramMid.x = spow(2.0f, (log(0.18f          ) / log(2.0f) - ssts_expShift));\n    ssts_paramMax.x = spow(2.0f, (log(ssts_paramMax.x) / log(2.0f) - ssts_expShift));\n\n\n\n    float identity_matrix_data\[]=\{ 1.0f, 0.0f, 0.0f,\n                                   0.0f, 1.0f, 0.0f,\n                                   0.0f, 0.0f, 1.0f \};\n\n    float XYZ_to_LMS_Bradford_data\[]=\{ 0.8951f, 0.2664f,-0.1614f,\n                                      -0.7502f, 1.7135f, 0.0367f,\n                                       0.0389f,-0.0685f, 1.0296f \};\n\n    float XYZ_to_LMS_CAT02_data\[]=\{ 0.7328f, 0.4296f,-0.1624f,\n                                   -0.7036f, 1.6975f, 0.0061f,\n                                    0.0030f, 0.0136f, 0.9834f \};\n\n    float XYZ_to_LMS_ZCAM_data\[]=\{ 0.41478972f, 0.57999900f, 0.01464800f,\n                                  -0.20151000f, 1.12064900f, 0.05310080f,\n                                  -0.01660080f, 0.26480000f, 0.66847990f \};\n\n    float eps = 3.7035226210190005e-11f;\n    float LMS_to_Izazbz_data\[]=\{ 0.000000f, 1.0001f-eps , 0.000000f,\n                                 3.524000f,-4.066708f, 0.542708f,\n                                 0.199076f, 1.096799f,-1.295875f \};\n\n\n    identity_matrix.setArray(identity_matrix_data);\n    XYZ_to_LMS_Bradford.setArray(XYZ_to_LMS_Bradford_data);\n    XYZ_to_LMS_CAT02.setArray(XYZ_to_LMS_CAT02_data);\n    // XYZ_to_LMS_ZCAM.setArray(XYZ_to_LMS_ZCAM_data);\n    LMS_to_Izazbz.setArray(LMS_to_Izazbz_data);\n\n\n    // Blink does not seem to support initialising multidimensional arrays\n    // So instead of being able to index the matrix data directly from one\n    // we need to use long if/else statements to populate the\n    // input, limit & output primary matrices\n    // (maybe there is a better way?)\n\n    float XYZ_to_AP0_ACES_matrix_data\[]=\n    \{\n       1.0498110175f,  0.0000000000f, -0.0000974845f,\n      -0.4959030231f,  1.3733130458f,  0.0982400361f,\n       0.0000000000f,  0.0000000000f,  0.9912520182f\n    \};\n\n    float XYZ_to_AP1_ACES_matrix_data\[]=\n    \{\n       1.6410233797f, -0.3248032942f, -0.2364246952f,\n      -0.6636628587f,  1.6153315917f,  0.0167563477f,\n       0.0117218943f, -0.0082844420f,  0.9883948585f,\n    \};\n\n    float XYZ_to_Rec709_D65_matrix_data\[]=\n    \{\n       3.2409699419f, -1.5373831776f, -0.4986107603f,\n      -0.9692436363f,  1.8759675015f,  0.0415550574f,\n       0.0556300797f, -0.2039769589f,  1.0569715142f,\n    \};\n\n    float XYZ_to_Rec2020_D65_matrix_data\[]=\n    \{\n       1.7166511880f, -0.3556707838f, -0.2533662814f,\n      -0.6666843518f,  1.6164812366f,  0.0157685458f,\n       0.0176398574f, -0.0427706133f,  0.9421031212f,\n    \};\n\n    float XYZ_to_P3_D65_matrix_data\[]=\n    \{\n       2.4934969119f, -0.9313836179f, -0.4027107845f,\n      -0.8294889696f,  1.7626640603f,  0.0236246858f,\n       0.0358458302f, -0.0761723893f,  0.9568845240f,\n    \};\n\n    float XYZ_to_P3_DCI_matrix_data\[]=\n    \{\n       2.7253940305f, -1.0180030062f, -0.4401631952f,\n      -0.7951680258f,  1.6897320548f,  0.0226471906f,\n       0.0412418914f, -0.0876390192f,  1.1009293786f\n    \};\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    float Modified_CAT16_data\[]=\n    \{\n      0.656619, 0.342071, 0.00131062,\n      -0.222571, 1.10658, 0.115987,\n      -0.000634146, 0.05855, 0.942084,\n    \};\n\n\n    // populate the input primaries matrix\n    if( primariesIn == 0 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesIn == 1 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesIn == 2 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesIn == 3 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesIn == 4 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesIn == 5 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_input.setArray(identity_matrix_data);\n    \}\n\n    // populate the limiting primaries matrix\n    if( primariesLimit == 0 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 1 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 2 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesLimit == 3 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesLimit == 4 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesLimit == 5 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_limit.setArray(identity_matrix_data);\n    \}\n\n    // populate the output primaries matrix\n    if( primariesOut == 0 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesOut == 1 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesOut == 2 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesOut == 3 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesOut == 4 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesOut == 5 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_output.setArray(identity_matrix_data);\n    \}\n\n    RGB_to_XYZ_input = XYZ_to_RGB_input.invert();\n    RGB_to_XYZ_limit = XYZ_to_RGB_limit.invert();\n    RGB_to_XYZ_output = XYZ_to_RGB_output.invert();\n\n\n    float3x3 XYZ_to_RGB_sRGB;\n    XYZ_to_RGB_sRGB.setArray(XYZ_to_Rec709_D65_matrix_data);\n    float3 white(1.0f, 1.0f, 1.0f);\n\n    d65White = vector_dot(XYZ_to_RGB_sRGB.invert(), white);\n    inWhite = vector_dot(RGB_to_XYZ_input, white);\n    refWhite = vector_dot(RGB_to_XYZ_limit, white);\n\n    boundaryRGB = sstsLuminance.z / referenceLuminance;\n\n    if (catDataSelection == 0)\n    \{\n        CAT_CAT16.setArray(CAT_CAT16_data);\n    \}\n    else if (catDataSelection == 1)\n    \{\n        CAT_CAT16.setArray(Modified_CAT16_data);\n    \}\n    else if (catDataSelection == 2)\n    \{\n        CAT_CAT16 = RGBPrimsToXYZMatrix(rxy,gxy,bxy,wxy,1.0f,1);\n    \}\n\n\n    //\n    // solving the RGB cusp from JMh is very expensive\n    // instead we go the other way and start with a RGB cusp sweep\n    // which is easily calculated by converting via HSV (Hue, 1.0, 1.0)\n    // we then convert each cusp to JMh and add them to a table \n    //\n\n    gamutCuspTableSize = 360;\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      float hNorm = float(i) / (gamutCuspTableSize);\n      float3 RGB = HSV_to_RGB(float3(hNorm, 1.0f, 1.0f));\n      gamutCuspTableUnsorted\[i] = limit_RGB_to_JMh(RGB);\n    \}\n\n    int minhIndex = 0;\n    for( int i = 1; i < gamutCuspTableSize; ++i )\n    \{\n      if( gamutCuspTableUnsorted\[i].z <  gamutCuspTableUnsorted\[minhIndex].z)\n      \{\n        minhIndex = i;\n      \}\n    \}\n\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      gamutCuspTable\[i] = gamutCuspTableUnsorted\[(minhIndex+i)%gamutCuspTableSize];\n      \n    \}\n\n    // calculate the maximum expected J & M values for the given limit gamut\n    // these are used as limiting values for the gamut boundary searches\n\n    // limitJmax (asumed to match limitRGB white)\n    limitJmax = limit_RGB_to_JMh(float3(1.0f)).x;\n\n\n    // limitMmax (assumed to coincide with one of the RGBCMY corners of the limitRGB cube)\n    float3 gamutCornersTable\[6];\n    gamutCornersTable\[0] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 0.0f));\n    gamutCornersTable\[1] = limit_RGB_to_JMh(float3(1.0f, 1.0f, 0.0f));\n    gamutCornersTable\[2] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 0.0f));\n    gamutCornersTable\[3] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 1.0f));\n    gamutCornersTable\[4] = limit_RGB_to_JMh(float3(0.0f, 0.0f, 1.0f));\n    gamutCornersTable\[5] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 1.0f));\n\n    limitMmax = 0.0f;\n    for( int i = 0; i < 6; ++i )\n    \{\n      limitMmax = max(limitMmax, gamutCornersTable\[i].y);\n    \}\n\n    // ensure positive, non-zero focus depth\n    // to avoid the gamut boundary search vector becoming zero for achromatic colors\n    // which will cause the boundary search loop to continue forever and the node to hang\n    focusDistanceClamped = max(0.01f, focusDistance);\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    if( invert )\n    \{\n      float3 compressedJMh = output_RGB_to_JMh(srcRGB);\n      float3 uncompressedJMh = compressGamutInverse(compressedJMh);\n      float3 untonemappedJMh = inverseTonescale(uncompressedJMh);\n      dstRGB = JMh_to_input_RGB(untonemappedJMh);\n      diagnostic =  dstRGB;\n    \}\n    else\n    \{\n      // normal path\n      float3 JMh = input_RGB_to_JMh(srcRGB);\n      float3 tonemappedJMh = forwardTonescale(JMh);\n      float3 compressedJMh = compressGamutForward(tonemappedJMh);\n      dstRGB = JMh_to_output_RGB(compressedJMh);\n\n      // testing \n      // dstRGB = JMh_to_output_RGB(tonemappedJMh);\n\n      diagnostic =  dstRGB;\n    \}\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  DRT_CAM_Kernel_encodingIn {{parent.encoding_in}}
  DRT_CAM_Kernel_primariesIn {{parent.primaries_in}}
  DRT_CAM_Kernel_toneScaleMode {{parent.toneScaleMode}}
  DRT_CAM_Kernel_camMode {{parent.camMode}}
  DRT_CAM_Kernel_catType {{parent.cat_type}}
  DRT_CAM_Kernel_discountIlluminant {{parent.discount_illuminant}}
  DRT_CAM_Kernel_referenceLuminance {{parent.reference_luminance}}
  DRT_CAM_Kernel_backgroundLuminance {{parent.background_luminance}}
  DRT_CAM_Kernel_viewingConditions {{parent.viewing_conditions}}
  DRT_CAM_Kernel_applyTonecurve {{applyTonecurve}}
  DRT_CAM_Kernel_sstsLuminance {{parent.ssts_luminance.x} {parent.ssts_luminance.y} {parent.ssts_luminance.z}}
  DRT_CAM_Kernel_applyHighlightDesat {{parent.apply_highlight_desat}}
  DRT_CAM_Kernel_desatHighlights {{parent.desat_highlights}}
  DRT_CAM_Kernel_primariesLimit {{parent.primaries_limit}}
  DRT_CAM_Kernel_applyGamutCompression {{parent.apply_gamut_compression}}
  DRT_CAM_Kernel_cuspMidBlend {{parent.cusp_mid_blend}}
  DRT_CAM_Kernel_focusDistance {{parent.focus_distance}}
  DRT_CAM_Kernel_compressionFuncParams {{parent.compression_params.x} {parent.compression_params.y} {parent.compression_params.z}}
  DRT_CAM_Kernel_smoothCusps {{parent.smooth_cusps}}
  DRT_CAM_Kernel_boundarySolvePrecision {{parent.solve_precision}}
  DRT_CAM_Kernel_inverseSolverIterations {{parent.inverse_solver_iterations}}
  DRT_CAM_Kernel_encodingOut {{parent.encoding_out}}
  DRT_CAM_Kernel_primariesOut {{parent.primaries_out}}
  DRT_CAM_Kernel_clampOutput {{parent.clamp_output}}
  DRT_CAM_Kernel_invert {{parent.invert}}
  DRT_CAM_Kernel_XYZ_to_LMS_ZCAM {
      {{DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink1.preMatrix.matrix*matrixScaler}}
    }
  DRT_CAM_Kernel_zcam_rho {{"1.7 * 2523.0 / pow(2.0,5.0)"}}
  DRT_CAM_Kernel_Lp {{parent.ssts_luminance.z}}
  DRT_CAM_Kernel_su 2
  DRT_CAM_Kernel_c0 1.2
  DRT_CAM_Kernel_cs {{0.18**(1-DRT_CAM_Kernel_c0)}}
  DRT_CAM_Kernel_c1 1.1
  DRT_CAM_Kernel_p {{DRT_CAM_Kernel_c1*(0.9+0.05*DRT_CAM_Kernel_su)}}
  DRT_CAM_Kernel_w1 {{(0.595*DRT_CAM_Kernel_Lp/10000)**0.931+1.037}}
  DRT_CAM_Kernel_s1 {{DRT_CAM_Kernel_w1*DRT_CAM_Kernel_Lp/100}}
  DRT_CAM_Kernel_ex -0.26
  DRT_CAM_Kernel_eb 0.08
  DRT_CAM_Kernel_e0 {{2**(DRT_CAM_Kernel_ex+DRT_CAM_Kernel_eb*log(DRT_CAM_Kernel_s1)/log(2))}}
  DRT_CAM_Kernel_s0 {{(DRT_CAM_Kernel_s1/DRT_CAM_Kernel_e0)**(1/DRT_CAM_Kernel_c1)}}
  DRT_CAM_Kernel_fl 0.01
  DRT_CAM_Kernel_dch 0.55
  DRT_CAM_Kernel_sat {{max(1,1.125-0.00025*DRT_CAM_Kernel_Lp)}}
  DRT_CAM_Kernel_mmScaleFactor 100
  DRT_CAM_Kernel_n {{ssts_luminance.z}}
  DRT_CAM_Kernel_nr 100
  DRT_CAM_Kernel_g 1.1
  DRT_CAM_Kernel_w 0.84
  DRT_CAM_Kernel_t_1 0.075
  DRT_CAM_Kernel_catDataSelection {{parent.HellwigCam16Data}}
  DRT_CAM_Kernel_rxy {0.84 0.17}
  DRT_CAM_Kernel_gxy {-1.25 2.4}
  DRT_CAM_Kernel_bxy {0.14 -0.6}
  DRT_CAM_Kernel_wxy {0.3333333333 0.3333333333}
  DRT_CAM_Kernel_XYZ_w {95.05 100 108.88}
  DRT_CAM_Kernel_L_A 318.31
  DRT_CAM_Kernel_Y_b 20
  DRT_CAM_Kernel_L_B 0.1
  DRT_CAM_Kernel_surround {1 0.69 1}
  rebuild_finalise ""
  name BlinkScript1
  note_font "Bitstream Vera Sans"
  xpos -908
  ypos -184
  addUserKnob {20 User}
  addUserKnob {7 matrixScaler R 0 2}
  matrixScaler 0.99415
 }
set N3b3af000 [stack 0]
 Clamp {
  minimum_enable false
  maximum {{parent.parent.DRT_CAM_Blink1.ssts_luminance.z/100}}
  name Clamp1
  xpos -908
  ypos -114
  disable {{1-parent.clamp_output}}
 }
 Output {
  name Output1
  xpos -908
  ypos -10
 }
push $N3b3af000
 Multiply {
  value 0.01
  name Multiply1
  xpos -757
  ypos -139
 }
push $N3b3af800
 Colorspace {
  primary_in ACES
  colorspace_out sRGB
  primary_out DCI-P3
  name Colorspace1
  xpos -632
  ypos -195
 }
 Ramp {
  inputs 0
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {0 1556}
  name Ramp1
  xpos -480
  ypos -373
 }
 Ramp {
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {0 1556}
  color 140
  name Ramp6
  xpos -480
  ypos -341
 }
 Ramp {
  output {-rgba.red -rgba.green rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {2048 0}
  color 360
  name Ramp2
  xpos -480
  ypos -309
 }
 Expression {
  temp_name0 factor
  temp_expr0 4
  expr0 10
  expr2 int(b/factor)*factor
  name Expression2
  xpos -480
  ypos -277
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 0 3 rgba.alpha 0 3 rgba.green 0 1 rgba.green 0 1"
  name Shuffle1
  xpos -480
  ypos -253
  disable true
 }
 Multiply {
  channels {-rgba.red rgba.green -rgba.blue none}
  value {{frame-1}}
  name Multiply2
  xpos -480
  ypos -229
  disable true
 }
 Multiply {
  value {5 10 1 1}
  name Multiply4
  xpos -480
  ypos -205
  disable true
 }
 Reformat {
  type "to box"
  box_width 82
  box_height 1324
  box_fixed true
  resize distort
  name Reformat1
  xpos -480
  ypos -173
 }
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/nukeHellwig2022/hellwig2022_linearExtension.blink
  recompileCount 324
  ProgramGroup 1
  KernelDescription "2 \"hellwig2022\" iterate pixelWise e241ce45670a10e81f0fc5ad752b2a44bf7918d63eb7dceb30d062b6852c2d8f 2 \"src\" Read Point \"dst\" Write Point 12 \"direction\" Int 1 AAAAAA== \"catDataSelection\" Int 1 AAAAAA== \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"L_B\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== \"rxy\" Float 2 AAAAAAAAAAA= \"gxy\" Float 2 AAAAAAAAAAA= \"bxy\" Float 2 AAAAAAAAAAA= \"wxy\" Float 2 AAAAAAAAAAA= 12 \"direction\" 1 1 \"catDataSelection\" 1 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"L_B\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 \"rxy\" 2 1 \"gxy\" 2 1 \"bxy\" 2 1 \"wxy\" 2 1 3 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  kernelSource "\nkernel hellwig2022 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n\n    // the kernel parameters\n    int direction; // the direction of the convolution\n    int catDataSelection; // original vs modified CAT16 matrix\n\n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float L_B;\n    float3 surround;\n    bool discount_illuminant;\n\n    // xy coordintes for custom CAT matrix\n    float2 rxy;\n    float2 gxy;\n    float2 bxy;\n    float2 wxy;\n\n\n  local:\n    float HALF_MIN;\n    float HALF_MAX;\n\n    float3x3 CAT_CAT16;\n\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n        // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n    // this one initially returned -pow(abs(b), e) for negative b\n    // but this ended up producing undesirable results in some cases\n    // so now it just returns 0.0 instead\n    float spow( float base, float exponent )\n    \{\n        if(base < 0.0f && exponent != floor(exponent) )\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return pow(base, exponent); \n        \}\n    \}\n\n    float3 float3spow( float3 base, float exponent )\n    \{\n        return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n    \}\n\n    float3 float3sign( float3 v )\n    \{\n        return float3(sign(v.x), sign(v.y), sign(v.z));\n    \}\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    // convert radians to degrees\n    float degrees( float radians )\n    \{\n      return radians * 180.0f / PI;\n    \}\n\n    float abs( float a )\n    \{\n      return fabs(a);\n    \}\n\n    float3 float3abs( float3 a )\n    \{\n      return fabs(a);\n    \}\n  \n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n\n\n  float hue_angle( float a, float b )\n  \{\n    // \"\"\"\n    // Return the *hue* angle :math:`h` in degrees.\n\n    // Parameters\n    // ----------\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Hue* angle :math:`h` in degrees.\n\n    // Examples\n    // --------\n    // >>> a = -0.000624112068243\n    // >>> b = -0.000506270106773\n    // >>> hue_angle(a, b)  # doctest: +ELLIPSIS\n    // 219.0484326...\n    // \"\"\"\n\n    // a = as_float_array(a);\n    // b = as_float_array(b);\n\n    float h = degrees(atan2(b, a)) / 360;\n\n    return h;\n  \}\n\n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n  float radians(float a)\n  \{\n    return a * PI / 180.0f;\n  \}\n\n\n\n  float3x3  RGBPrimsToXYZMatrix(float2 rxy, float2 gxy, float2 bxy, float2 wxy,float Y, bool direction)\n  \{\n    // # given r g b chromaticities and whitepoint, convert RGB colors to XYZ\n    // # based on CtlColorSpace.cpp from the CTL source code : 77\n    // # param: xy - dict of chromaticity xy coordinates: rxy: float2(x, y) etc\n    // # param: Y - luminance of \"white\" - defaults to 1.0\n    // # param: inverse - calculate XYZ to RGB instead\n\n    float2 r = rxy;\n    float2 g = gxy;\n    float2 b = bxy;\n    float2 w = wxy;\n\n    float X = w.x * Y / w.y;\n    float Z = (1 - w.x - w.y) * Y / w.y;\n\n    // # Scale factors for matrix rows\n    float d = r.x * (b.y - g.y) + b.x * (g.y - r.y) + g.x * (r.y - b.y);\n\n    float Sr =    (X * (b.y - g.y) -      \\\n            g.x * (Y * (b.y - 1.0f) +  \\\n            b.y  * (X + Z)) +       \\\n            b.x  * (Y * (g.y - 1.0f) + \\\n            g.y * (X + Z))) / d ;\n    \n    float Sg =    (X * (r.y - b.y) +      \\\n            r.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) -        \\\n            b.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    float Sb =    (X * (g.y - r.y) -      \\\n            r.x * (Y * (g.y - 1.0f) +  \\\n            g.y * (X + Z)) +        \\\n            g.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    // # Assemble the matrix\n    float Mdata\[] =\n    \{\n            Sr * r.x, Sr * r.y, Sr * (1.0f - r.x - r.y),\n            Sg * g.x, Sg * g.y, Sg * (1.0f - g.x - g.y),\n            Sb * b.x, Sb * b.y, Sb * (1.0f - b.x - b.y),\n    \};\n\n    float MdataNukeOrder\[] = \{\n      Mdata\[0], Mdata\[3], Mdata\[6],\n      Mdata\[1], Mdata\[4], Mdata\[7],\n      Mdata\[2], Mdata\[5], Mdata\[8],\n    \};\n\n    float3x3 newMatrix;\n    newMatrix.setArray(MdataNukeOrder);\n\n    // create inverse matrix\n    float3x3 newMatrixInverse = newMatrix.invert();\n\n    // return forward or inverse matrix\n    if (direction == 0)\n    \{\n      return newMatrix;\n    \}\n    else if (direction == 1)\n    \{\n      return newMatrixInverse;\n    \}\n  \}\n\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n    //   \"\"\"\n    //   Return the achromatic response :math:`A` from given compressed\n    //   *CAM16* transform sharpened *RGB* array and :math:`N_\{bb\}` chromatic\n    //   induction factor for forward *Hellwig and Fairchild (2022)* implementation.\n\n    //   Parameters\n    //   ----------\n    //   RGB\n    //       Compressed *CAM16* transform sharpened *RGB* array.\n\n    //   Returns\n    //   -------\n    //   :class:`numpy.floating` or :class:`numpy.ndarray`\n    //       Achromatic response :math:`A`.\n\n    //   Examples\n    //   --------\n    //   >>> RGB = np.array(\[7.94634384, 7.94713791, 7.9488967])\n    //   >>> achromatic_response_forward(RGB)  # doctest: +ELLIPSIS\n    //   23.9322704...\n    //   \"\"\"\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n    // \"\"\"\n    // Return the *colourfulness* correlate :math:`M`.\n\n    // Parameters\n    // ----------\n    // N_c\n    //     Surround chromatic induction factor :math:`N_\{c\}`.\n    // e_t\n    //     Eccentricity factor :math:`e_t`.\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Colourfulness* correlate :math:`M`.\n\n    // Examples\n    // --------\n    // >>> N_c = 1\n    // >>> e_t = 1.13423124867\n    // >>> a = -0.00063418423001\n    // >>> b = -0.000479072513542\n    // >>> colourfulness_correlate(N_c, e_t, a, b)  # doctest: +ELLIPSIS\n    // 0.0387637...\n    // \"\"\"\n\n    // N_c = as_float_array(N_c)\n    // e_t = as_float_array(e_t)\n    // a = as_float_array(a)\n    // b = as_float_array(b)\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    // \"\"\"\n    // Return the degree of adaptation :math:`D` from given surround maximum\n    // degree of adaptation :math:`F` and adapting field *luminance* :math:`L_A`\n    // in :math:`cd/m^2`.\n\n    // Parameters\n    // ----------\n    // F\n    //     Surround maximum degree of adaptation :math:`F`.\n    // L_A\n    //     Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     Degree of adaptation :math:`D`.\n\n    // Examples\n    // --------\n    // >>> degree_of_adaptation(1.0, 318.31)  # doctest: +ELLIPSIS\n    // 0.9944687...\n    // \"\"\"\n\n    // F = as_float_array(F)\n    // L_A = as_float_array(L_A)\n\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n\n\n    // def d_post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n    //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n    \n    //     d_RGB_a = (\n    //         400\n    //         * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100)\n    //         / (F_L_RGB + 27.13) ** 2\n    //     )\n    \n    //     return d_RGB_a\n\n    // ** example\n        // (a**2 + b**2)\n        // (a * a + b * b);\n    \n\n\n\n        \n    // def post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n\n\n    //     RGB = as_float_array(RGB)\n    //     F_L = as_float_array(F_L)\n\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB) / 100, 0.42)\n    //     RGB_c = (400 * np.sign(RGB) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n\n    //     return RGB_c\n\n\n    float3 post_adaptation_non_linear_response_compression_forward(float3 RGB, float F_L)\n    \{\n        // RGB = as_float_array(RGB)\n        // F_L = as_float_array(F_L)\n    \n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB) / 100.0f, 0.42f);\n        float3 RGB_c = (400.0f * sign(RGB) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n    \n        return RGB_c;\n    \}\n\n    \n    float3 post_adaptation_non_linear_response_compression_inverse(float3 RGB,float F_L)\n    \{\n        // RGB = as_float_array(RGB)\n        // F_L = as_float_array(F_L)\n\n\n        // RGB_p = (\n        //     np.sign(RGB - 0.1)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)),\n        //         1 / 0.42,\n        //     )\n        // )\n\n\n        // RGB_p = ( np.sign(RGB - 0.1) * 100 / F_L\[..., np.newaxis] * spow( (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)), 1 / 0.42, ))\n\n        // older compression formula subbed in\n        // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n\n        // float3 RGB_p =  sign(RGB - 0.1f) * 100.0f / F_L * spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f);\n        float3 RGB_p =  (float3sign(RGB - 0.1f) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f) );\n        // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n        return RGB_p;\n    \}\n\n\n    // def d_post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n    //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n    \n    //     d_RGB_a = (  400 * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100) / (F_L_RGB + 27.13) ** 2  )\n    \n    //     return d_RGB_a\n    \n    \n    float3 d_post_adaptation_non_linear_response_compression_forward( float3 RGB, float F_L)\n    \{\n        float3 F_L_RGB = float3spow(F_L * RGB / 100.0f, 0.42f);\n        float F_L_100 = spow(F_L / 100.0f, 0.42f);\n    \n        // float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ (F_L_RGB + 27.13f) ** 2.0f );\n           float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ ( (F_L_RGB + 27.13f) *  (F_L_RGB + 27.13f) ));\n        //    d_RGB_a = d_RGB_a * d_RGB_a;\n\n        return d_RGB_a;\n    \}\n\n\n  float3 XYZ_to_Hellwig2022_linearExtension_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n    //     \"\"\"\n    //     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n    //     correlates from given *CIE XYZ* tristimulus values.\n\n    //     Parameters\n    //     ----------\n    //     XYZ\n    //         *CIE XYZ* tristimulus values of test sample / stimulus.\n    //     XYZ_w\n    //         *CIE XYZ* tristimulus values of reference white.\n    //     L_A\n    //         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n    //         to be 20% of the luminance of a white object in the scene).\n    //     Y_b\n    //         Luminous factor of background :math:`Y_b` such as\n    //         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n    //         light source and :math:`L_b` is the luminance of the background. For\n    //         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n    //         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n    //         approximate an :math:`L^*` of 50 is used.\n    //     surround\n    //         Surround viewing conditions induction factors.\n    //     discount_illuminant\n    //         Truth value indicating if the illuminant should be discounted.\n\n    //     Returns\n    //     -------\n    //     :class:`colour.CAM_Specification_Hellwig2022`\n    //         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n    //     Notes\n    //     -----\n    //     +------------+-----------------------+---------------+\n    //     | **Domain** | **Scale - Reference** | **Scale - 1** |\n    //     +============+=======================+===============+\n    //     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n    //     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | **Range**                           | **Scale - Reference** | **Scale - \\\n    // 1** |\n    //     +=====================================+=======================+===========\\\n    // ====+\n    //     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n\n    //     References\n    //     ----------\n    //     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n    //     Examples\n    //     --------\n    //     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n    //     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n    //     >>> L_A = 318.31\n    //     >>> Y_b = 20.0\n    //     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n    //     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n    //     ... # doctest: +ELLIPSIS\n    //     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n    // h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n    // H=275.5949861..., HC=None)\n    //     \"\"\"\n\n        XYZ = float3_to_domain_100(XYZ);\n        XYZ_w = float3_to_domain_100(XYZ_w);\n        float _X_w = XYZ_w.x ;\n        float Y_w = XYZ_w.y ;\n        float _Z_w = XYZ_w.z ;\n        // L_A = as_float_array(L_A)\n        // Y_b = as_float_array(Y_b)\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n        \n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 1\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB = vector_dot(MATRIX_16, XYZ)\n\n        float3 RGB = vector_dot(MATRIX_16, XYZ);\n        // float3 RGB = XYZ;\n\n        // # Step 2\n        // RGB_c = D_RGB * RGB\n        float3 RGB_c = D_RGB * RGB;\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n        // float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n        // // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        // float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L)\n        // RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // ) * (\n        //     RGB_c - L_B\n        // ) + post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // )\n        // RGB_a = np.where(RGB_c < L_B, RGB_a_l, RGB_a)\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        float3 RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L);\n        // float3 RGB_a = RGB_c;\n        float3 RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(L_B, F_L) * ( RGB_c - L_B) + post_adaptation_non_linear_response_compression_forward( L_B, F_L );\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_a_l.x: RGB_a.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_a_l.y: RGB_a.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_a_l.z: RGB_a.z;\n\n\n\n\n        // # Step 4\n        // # Converting to preliminary cartesian coordinates.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a = RGB_d.x ;\n        float G_a = RGB_d.y ;\n        float B_a = RGB_d.z ;\n        // a = R_a - 12 * G_a / 11 + B_a / 11\n        float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n        // b = (R_a + G_a - 2 * B_a) / 9\n        float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n        // # Computing the *hue* angle :math:`h`.\n        // h = np.degrees(np.arctan2(b, a)) % 360\n        // Unclear why this isnt matching the python version.\n        float h = mod(degrees(atan2(b, a)), 360.0f);\n\n        \n\n        // # Step 5\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n\n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Step 6\n        // # Computing achromatic responses for the stimulus.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a2 = RGB_a.x ;\n        float G_a2 = RGB_a.y ;\n        float B_a2 = RGB_a.z ;\n        // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n        float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n        // # Step 7\n        // # Computing the correlate of *Lightness* :math:`J`.\n        // with sdiv_mode():\n        //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n        float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n        // # Step 8\n        // # Computing the correlate of *brightness* :math:`Q`.\n        // with sdiv_mode():\n        //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n        float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n        // # Step 9\n        // # Computing the correlate of *colourfulness* :math:`M`.\n        // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n        float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n        // # Computing the correlate of *chroma* :math:`C`.\n        // with sdiv_mode():\n        //     C = 35 * sdiv(M, A_w)\n        float C = 35.0f * sdiv(M, A_w);\n\n\n        // # Computing the correlate of *saturation* :math:`s`.\n        // with sdiv_mode():\n        //     s = 100 * sdiv(M, Q)\n        float s = 100.0f * sdiv(M, Q);\n\n\n\n        // return XYZ_w;\n        // return RGB_w;\n        // return \{D,k,k4\};\n        // return \{F_L,n,z\};\n        // return RGB_c;\n        return \{J,M,h\};\n        // return XYZ;\n    \}\n\n    float3 Hellwig2022_linearExtension_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        // float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L)\n        // RGB_c_l = (\n        //     RGB_a\n        //     - post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) / (\n        //     d_post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) + L_B\n        // RGB_c = np.where(RGB_c < L_B, RGB_c_l, RGB_c)\n\n        // Adding 0.1 here seems to fix the inversion issue, not really clear on why I'm needing to do this\n        RGB_a = RGB_a + 0.1f;\n        float3 RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L);\n        // float3 RGB_c = RGB_a;\n        float3 RGB_c_l = ( RGB_a - post_adaptation_non_linear_response_compression_forward( L_B, F_L)) / (d_post_adaptation_non_linear_response_compression_forward( L_B, F_L)) + L_B;\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_c_l.x : RGB_c.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_c_l.y : RGB_c.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_c_l.z : RGB_c.z;\n\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_d / D_RGB;\n        \n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n\n        // return XYZ;\n        return XYZ;\n\n    \}\n\n\n    float3 Hellwig2022_JMh_to_linearJ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n\n        float P_p_2 = A;\n\n\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 Mono_A = vector_dot(panlrcm, float3(A, 0, 0)) / 1403.0f;\n\n\n        float linear_A = sign(Mono_A.x) * 100.0f / F_L * spow((27.13f * abs(Mono_A.x)) / (400.0f - abs(Mono_A.x)), 1.0f / 0.42f);\n        // float3 Mono_c = float3sign(Mono_a) * 100.0f / F_L * float3spow((27.13f * float3abs(Mono_a)) / (400.0f - float3abs(Mono_a)), 1.0f / 0.42f);\n\n        return \{linear_A,linear_A,linear_A\};\n\n    \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    float Modified_CAT16_data\[]=\n    \{\n      0.656619, 0.342071, 0.00131062,\n      -0.222571, 1.10658, 0.115987,\n      -0.000634146, 0.05855, 0.942084,\n    \};\n\n    if (catDataSelection == 0)\n    \{\n        CAT_CAT16.setArray(CAT_CAT16_data);\n    \}\n    else if (catDataSelection == 1)\n    \{\n        CAT_CAT16.setArray(Modified_CAT16_data);\n    \}\n    else if (catDataSelection == 2)\n    \{\n      CAT_CAT16 = RGBPrimsToXYZMatrix(rxy,gxy,bxy,wxy,1.0f,1);\n    \}\n\n\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    // diagnostic =  srcRGB;\n\n    // float3 surround(1.0f, 0.69f, 1.0f);\n    // float3 XYZ_w(95.05f, 100.00f, 108.88f);\n\n    if (direction == 0)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_linearExtension_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        dstRGB = JMh;\n    \}\n    else if (direction == 1)\n    \{\n        float3 XYZ_out = Hellwig2022_linearExtension_JMh_to_XYZ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n    else if (direction == 2)\n    \{\n      float3 linearJ = Hellwig2022_JMh_to_linearJ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n      dstRGB = linearJ;\n    \}\n    else if (direction == 3)\n    \{\n        float3 compressed = post_adaptation_non_linear_response_compression_forward(srcRGB,L_A);\n        float3 uncompressed = post_adaptation_non_linear_response_compression_inverse(compressed,L_A);\n        dstRGB = uncompressed;\n    \}\n    else if (direction == 4)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_linearExtension_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        float3 XYZ_out = Hellwig2022_linearExtension_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n\n\n    diagnostic = dstRGB;\n\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  rebuild ""
  hellwig2022_direction 1
  hellwig2022_catDataSelection 2
  hellwig2022_XYZ_w {95.05 100 108.88}
  hellwig2022_L_A 318.31
  hellwig2022_Y_b 20
  hellwig2022_L_B {{parent.BlinkScript1.DRT_CAM_Kernel_L_B}}
  hellwig2022_surround {1 0.69 1}
  hellwig2022_rxy {{parent.BlinkScript1.DRT_CAM_Kernel_rxy} {parent.BlinkScript1.DRT_CAM_Kernel_rxy}}
  hellwig2022_gxy {{parent.BlinkScript1.DRT_CAM_Kernel_gxy} {parent.BlinkScript1.DRT_CAM_Kernel_gxy}}
  hellwig2022_bxy {{parent.BlinkScript1.DRT_CAM_Kernel_bxy} {parent.BlinkScript1.DRT_CAM_Kernel_bxy}}
  hellwig2022_wxy {{parent.BlinkScript1.DRT_CAM_Kernel_wxy} {parent.BlinkScript1.DRT_CAM_Kernel_wxy}}
  rebuild_finalise ""
  name BlinkScript5
  label "\[python nuke.thisNode().knob('kernelSourceFile').value().split('/').pop(-1)]"
  xpos -480
  ypos -104
 }
 Group {
  name PlotChromaticity3
  xpos -480
  ypos -26
  addUserKnob {20 PlotChromaticity_tab l PlotChromaticity}
  addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
  use_gpu true
  addUserKnob {26 ""}
  addUserKnob {6 plot_input l "plot input" t "Enable plotting of the input pixels" +STARTLINE}
  plot_input true
  addUserKnob {41 input_gamut l gamut t "Set the gamut that the input colors are encoded in" -STARTLINE T GamutToXYZ.gamut}
  addUserKnob {4 diagram l in t "Choose the type of chromaticity diagram: \nCIE 1931 xy Chromaticity Diagram\nCIE 1976 u' v' Uniform Chromaticity Scale Diagram" -STARTLINE M {"CIE 1931 xy" "CIE 1976 u' v'" "" ""}}
  addUserKnob {6 enable_sample_color l "sample color" t "Enable plotting of the sampled color" +STARTLINE}
  enable_sample_color true
  addUserKnob {41 sample_color l color t "sample and plot selected color" T SampleColor.color}
  addUserKnob {22 follow_viewer l "follow viewer" t "Follow the selected viewer node. This causes this node to automatically connect to whatever the followed viewer is connected to.\n\nThis is useful if you want to have a 2nd viewer showing a chromaticity plot for whever you're looking at in your main viewer." T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to follow.')\nelse:\n    v\['knobChanged'].setValue('v = nuke.activeViewer().node()\\nif v and v.name() == nuke.thisNode().name():\\n    con = v.input(nuke.activeViewer().activeInput())\\n    plt = nuke.toNode(\"\{0\}\")\\n    plt.setInput(0, con)'.format(n.name()))" +STARTLINE}
  addUserKnob {22 unfollow_viewer l "unfollow viewer" -STARTLINE T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to unfollow.')\nelse:\n    v\['knobChanged'].setValue('')"}
  addUserKnob {26 plot_dimensions_label l " " T "<b>Chromaticity Diagram"}
  addUserKnob {3 resolution l " resolution" t "resolution to output"}
  resolution 2048
  addUserKnob {7 right_margin l "right margin" R 1 1.5}
  right_margin 1.1
  addUserKnob {7 left_margin l "left margin" R 0 0.2}
  left_margin 0.1
  addUserKnob {6 draw_spectral_locus l "spectrum locus" t "draw the spectrum locus: the boundary of color the human eye can see." +STARTLINE}
  draw_spectral_locus true
  addUserKnob {6 draw_line_of_purples l "line of purples" t "draw the \"line of purples\"" -STARTLINE}
  draw_line_of_purples true
  addUserKnob {6 draw_planckian_locus l "planckian locus" t "Display the planckian locus or the blackbody locus." +STARTLINE}
  draw_planckian_locus true
  addUserKnob {6 gamut_grid l "gamut grid" t "Display a gamut boundary with a grid or dot pattern" +STARTLINE}
  addUserKnob {41 gamut_gamutgrid l "" t "gamut for gamutgrid" -STARTLINE T RGBToXYZ_GamutGrid.gamut}
  addUserKnob {4 gamut_grid_style l style t "Choose the style to display the gamut plot" -STARTLINE M {grid dots "" "" "" ""}}
  addUserKnob {4 distribution l dist t "Which chromaticity space should the overlays be constructed in? \n\nYxy is familiar, but not very perceptually uniform.\n\nu'v' is designed to be more perceptually uniform." -STARTLINE M {"1931 Yxy" "1976 u'v'" "" ""}}
  addUserKnob {7 density t "Density of the grid or points" R 10 100}
  density 50
  addUserKnob {6 gamut_a l "gamut a" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_a_1 l "" -STARTLINE T RGBToXYZ_GamutA.gamut}
  addUserKnob {6 gamut_b l "gamut b" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_b_1 l "" -STARTLINE T RGBToXYZ_GamutB.gamut}
  addUserKnob {6 gamut_c l "gamut c" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_c_1 l "" -STARTLINE T RGBToXYZ_GamutC.gamut}
  addUserKnob {6 draw_pointers_gamut l "pointer's gamut" t "DrawPointer's gamut boundary" +STARTLINE}
  addUserKnob {6 draw_pointers_samples l "pointers sample colors" t "show the individual pointer gamut samples" -STARTLINE}
  addUserKnob {6 draw_macbeth_chart l "macbeth chart" t "draw a ColorChecker24 aka Macbeth Chart" +STARTLINE}
  addUserKnob {6 coordinate_system l "coordinate system" t "Draw CIE xy coordinate grid x and y axes" +STARTLINE}
  coordinate_system true
  addUserKnob {6 map_overlays_to_input_gamut l "map overlays to input gamut" t "This maps the overlays like the spectral locus, pointer's gamut, and the gamut overlay to the working gamut instead of keeping them as XYZ.\n\nFor example if the input gamut is ACEScg, these overlays will be mapped to that. Note that this can cause most of the overlays to be negative or highly saturated which might harm the visual appearance." +STARTLINE}
  map_overlays_to_input_gamut true
 }
  Group {
   inputs 0
   name GamutGrid1
   xpos -920
   ypos -201
   postage_stamp true
   addUserKnob {20 GamutGrid}
   addUserKnob {3 style}
   style {{!parent.gamut_grid_style}}
   addUserKnob {3 distribution -STARTLINE}
   distribution {{parent.distribution}}
   addUserKnob {7 density R 10 150}
   density {{parent.density}}
   addUserKnob {26 ""}
   addUserKnob {41 matrix T ColorMatrix.matrix}
   addUserKnob {12 wxy}
   wxy {{parent.RGBToXYZ_GamutGrid.wxy} {parent.RGBToXYZ_GamutGrid.wxy}}
  }
   ColorWheel {
    inputs 0
    format "512 512 0 0 512 512 1 square_512"
    centerSaturation 1
    fillFormat false
    area {-170 -158 682 670}
    name ColorWheel4
    xpos -260
    ypos -15
    postage_stamp false
   }
   Crop {
    box {0 0 {width} {height}}
    crop false
    name Crop2
    xpos -260
    ypos 27
   }
   Reformat {
    type scale
    scale {{max(parent.density/50,0.25)}}
    resize distort
    filter impulse
    pbb true
    name Reformat3
    xpos -260
    ypos 110
   }
set N3b332800 [stack 0]
push $N3b332800
   ContactSheet {
    inputs 2
    width {{width*columns}}
    height {{height/pixel_aspect*rows}}
    rows 1
    columns 2
    roworder TopBottom
    name ContactSheet2
    xpos -260
    ypos 169
   }
   Dot {
    name Dot1
    label " "
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -226
    ypos 246
   }
   ColorWheel {
    inputs 0
    format "512 512 0 0 512 512 1 square_512"
    fillFormat false
    area {40 40 472 472}
    name ColorWheel1
    xpos -40
    ypos -664
    postage_stamp false
   }
   Reformat {
    type scale
    scale {{max(parent.density/50,0.25)}}
    resize distort
    filter impulse
    pbb true
    name Reformat1
    xpos -40
    ypos -628
   }
   Crop {
    box {0 0 {width} {height}}
    reformat true
    name Crop1
    xpos -40
    ypos -602
   }
   Unpremult {
    name Unpremult1
    xpos -40
    ypos -526
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos -415
   }
   Colorspace {
    colorspace_in CIE-XYZ
    colorspace_out CIE-Yxy
    name Colorspace1
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -40
    ypos -341
   }
set N3b7a3c00 [stack 0]
   Dot {
    name Dot2
    label " "
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -556
    ypos -331
   }
   Expression {
    expr0 r
    expr1 "4*g / ( -2*g + 12*b + 3)"
    expr2 "9*b / ( -2*g + 12*b + 3)"
    name Expression5
    label "CIE Yxy to CIELuv"
    xpos -590
    ypos -304
    disable {{!parent.distribution}}
   }
   Expression {
    expr0 r
    expr1 "(-(degrees(atan2(g-white.x, b-white.y))-180)+270)%360/360"
    expr2 "hypot(g-white.x, b-white.y)"
    expr3 a
    name Expression3
    xpos -590
    ypos -261
    cached true
    addUserKnob {20 User}
    addUserKnob {12 white}
    white {{"parent.distribution ? 4*parent.wxy.x / ( -2 * parent.wxy.x + 12 * parent.wxy.y + 3) : parent.wxy"} {"parent.distribution ? 9*parent.wxy.y / ( -2*parent.wxy.x + 12*parent.wxy.y + 3) : parent.wxy"}}
   }
set N3b7a3000 [stack 0]
   Posterize {
    channels rgb
    Colors {{rint(parent.density/3*2)}}
    name Posterize1
    xpos -590
    ypos -191
   }
set N3b7a2c00 [stack 0]
push $N3b7a3000
   Dot {
    name Dot15
    xpos -446
    ypos -257
   }
   Copy {
    inputs 2
    from0 rgba.blue
    to0 rgba.blue
    name Copy1
    xpos -480
    ypos -154
   }
push $N3b7a2c00
push $N3b7a3000
   Dot {
    name Dot16
    xpos -666
    ypos -257
   }
   Copy {
    inputs 2
    from0 rgba.green
    to0 rgba.green
    name Copy2
    xpos -700
    ypos -153
   }
   ContactSheet {
    inputs 2
    width {{width*columns}}
    height {{height/pixel_aspect*rows}}
    rows 1
    columns 2
    center true
    roworder TopBottom
    name ContactSheet3
    xpos -590
    ypos -106
   }
   Expression {
    expr0 r
    expr1 cos(radians(g*360))*b+white.x
    expr2 sin(radians(g*360))*b+white.y
    expr3 a
    name Expression19
    xpos -590
    ypos -58
    cached true
    addUserKnob {20 User}
    addUserKnob {12 white}
    white {{parent.Expression3.white} {parent.Expression3.white}}
   }
   Expression {
    expr0 r
    expr1 "9*g / ( 6*g - 16*b + 12)"
    expr2 "4*b/ ( 6*g - 16*b + 12)"
    name Expression2
    label "CIELuv to CIE Yxy"
    xpos -590
    ypos -16
    disable {{!parent.distribution}}
   }
   Colorspace {
    colorspace_in CIE-Yxy
    colorspace_out CIE-XYZ
    name Colorspace2
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -590
    ypos 32
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    invert true
    name ColorMatrix1
    label "XYZ to RGB"
    xpos -590
    ypos 81
   }
   Clamp {
    channels rgba
    maximum_enable false
    name ClampMin2
    xpos -590
    ypos 119
   }
   Clamp {
    channels alpha
    minimum 1
    MinClampTo_enable true
    MaxClampTo_enable true
    name Clamp1
    xpos -590
    ypos 152
   }
   Premult {
    name Premult1
    xpos -590
    ypos 194
   }
   Merge2 {
    inputs 2
    operation under
    bbox B
    name Merge2
    xpos -590
    ypos 242
   }
   Fill {
    output alpha
    name Fill1
    xpos -590
    ypos 297
   }
   Dot {
    name Dot3
    label " GRID"
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -556
    ypos 378
   }
push $N3b332800
push $N3b7a3c00
   Expression {
    expr0 r
    expr1 "4*g / ( -2*g + 12*b + 3)"
    expr2 "9*b / ( -2*g + 12*b + 3)"
    name Expression4
    label "CIE Yxy to CIELuv"
    xpos -40
    ypos -280
    disable {{!parent.distribution}}
   }
   Expression {
    expr0 r
    expr1 rint(g*Colors)/Colors
    expr2 rint(b*Colors)/Colors
    expr3 a
    name Expression1
    label rint
    xpos -40
    ypos -232
    addUserKnob {20 User}
    addUserKnob {7 Colors R 1 256}
    Colors {{parent.density}}
   }
   Expression {
    expr0 r
    expr1 "9*g / ( 6*g - 16*b + 12)"
    expr2 "4*b/ ( 6*g - 16*b + 12)"
    name Expression6
    label "CIELuv to CIE Yxy"
    xpos -40
    ypos -184
    disable {{!parent.distribution}}
   }
   Colorspace {
    colorspace_in CIE-Yxy
    colorspace_out CIE-XYZ
    name Colorspace3
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -40
    ypos -112
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    invert true
    name ColorMatrix3
    label "XYZ to RGB"
    xpos -40
    ypos -57
   }
   Clamp {
    channels alpha
    minimum 1
    MinClampTo_enable true
    MaxClampTo_enable true
    name Clamp4
    xpos -40
   }
   Premult {
    name Premult2
    xpos -40
    ypos 55
   }
   Merge2 {
    inputs 2
    operation under
    bbox B
    name Merge1
    xpos -40
    ypos 110
   }
   Clamp {
    channels rgba
    maximum_enable false
    name ClampMin1
    xpos -40
    ypos 273
   }
   Dot {
    name Dot4
    label " DOTS"
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -6
    ypos 378
   }
   Switch {
    inputs 2
    which {{parent.style}}
    name Switch1
    xpos -257
    ypos 483
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    name ColorMatrix2
    label "RGB to XYZ"
    xpos -257
    ypos 560
   }
   Output {
    name Output
    xpos -257
    ypos 740
   }
   ColorWheel {
    inputs 0
    format "256 256 0 0 256 256 1 square_256"
    area {40 40 472 472}
    name ColorWheel2
    xpos -37
    ypos -705
    postage_stamp false
   }
  end_group
set N3b33a400 [stack 0]
  Group {
   name RGBToXYZ_GamutGrid
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1030
   ypos -184
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut ACEScg
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   centerSaturation 1
   fillFormat false
   area {-196 -184 708 696}
   name ColorWheel1
   xpos -920
   ypos 5
  }
  Crop {
   box {0 0 {width} {height}}
   name Crop1
   xpos -920
   ypos 87
  }
  BlackOutside {
   name BlackOutside3
   xpos -920
   ypos 134
  }
set N3b6cdc00 [stack 0]
  Group {
   name RGBToXYZ_GamutC
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1140
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut Rec709
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r+input.width} {parent.ReformatBox4.box_width-input.height}}
   name Position6
   xpos -1140
   ypos 254
  }
push $N3b6cdc00
  Group {
   name RGBToXYZ_GamutB
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1030
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut P3D65
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height*2}}
   name Position5
   xpos -1030
   ypos 254
  }
push $N3b6cdc00
  Group {
   name RGBToXYZ_GamutA
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -920
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut Rec2020
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
   name Position4
   xpos -920
   ypos 254
  }
push $N3b33a400
  Reformat {
   type scale
   scale 0.8
   turn true
   filter impulse
   black_outside true
   name Reformat2
   xpos -920
   ypos -129
  }
  BlackOutside {
   name BlackOutside2
   xpos -920
   ypos -106
  }
  Position {
   translate {{Rectangle1.area.r} {parent.Position3.translate.y-input.height}}
   name Position2
   xpos -920
   ypos -81
  }
  Group {
   inputs 0
   name ColorChecker24_After_November_2014
   label "CIE XYZ D50"
   xpos -920
   ypos -352
   addUserKnob {20 colorchecker_tab l "ColorChecker24 - After November 2014"}
   addUserKnob {3 patch_resolution}
   patch_resolution 48
  }
   Group {
    inputs 0
    name bluish_green
    selected true
    xpos 622
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.30451114 0.4143554688 0.344352688 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "bluish green"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 6
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue_flower
    xpos 512
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2419823988 0.2287175998 0.3282104382 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "blue flower"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 5
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name foliage
    xpos 402
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1114392339 0.1346792679 0.05239320311 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob foliage
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 4
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue_sky
    xpos 292
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1652470004 0.1785519348 0.2546024121 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "blue sky"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 3
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name light_skin
    xpos 180
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3811104477 0.336202304 0.1852590702 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "light skin"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 2
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 63
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 135
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name dark_skin
    xpos 70
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1136398927 0.09832436105 0.047793811 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "dark skin"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 1
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 290
     ypos 63
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 290
     ypos 158
    }
    Output {
     name Output
     xpos 290
     ypos 230
    }
   end_group
   Group {
    inputs 0
    name orange_yellow
    xpos 622
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.4769723742 0.4293377578 0.06005041429 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "orange yellow"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 12
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name yellow_green
    xpos 512
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3427379502 0.4331759409 0.08330791241 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "yellow green"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 11
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name purple
    xpos 401
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.08353888545 0.06276662955 0.1042075686 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob purple
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 10
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name moderate_red
    xpos 290
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2915036416 0.188999956 0.09736350318 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "moderate red"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 9
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name purplish_blue
    xpos 180
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1200518326 0.1091090233 0.2874447494 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "purplish blue"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 8
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name orange
    xpos 74
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.4073691399 0.3126416159 0.05130591012 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob orange
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 7
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name cyan
    xpos 622
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1247966941 0.180609913 0.2913392383 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob cyan
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 18
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name magenta
    xpos 512
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.299122798 0.1895114577 0.2213469194 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob magenta
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 17
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name yellow
    xpos 399
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.5888922356 0.5992976803 0.07077420003 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob yellow
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 16
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 182
    }
   end_group
   Group {
    inputs 0
    name red
    xpos 292
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2143728424 0.127800835 0.03868150726 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob red
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 15
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name green
    xpos 182
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1413517689 0.2233437582 0.07287461742 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob green
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 14
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue
    xpos 72
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.06809095613 0.05596214063 0.2077405936 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob blue
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 13
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name black_2
    xpos 623
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.03042544265 0.03151319431 0.02656724434 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "black 2 (1.5 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 24
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_3
    xpos 512
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.08448968042 0.08817234828 0.07391630753 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 3.5 (1.05 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 23
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_5
    xpos 403
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1835495863 0.1906228754 0.1566717383 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 5 (.70 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 22
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_6
    xpos 292
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3495921991 0.3648652066 0.3013565492 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 6.5 (.44 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 21
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_8
    xpos 179
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.5665335579 0.5899709702 0.4828473821 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 8 (.23 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 20
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name white_9
    xpos 70
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.8436985288 0.8806903203 0.6936778752 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "white 9.5 (.05 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 19
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 134
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   ContactSheet {
    inputs 24
    width {{"rint(parent.patch_resolution * 6 + gap * 7)"}}
    height {{"rint(parent.patch_resolution * 4 + gap * 5)"}}
    rows 4
    columns 6
    startframe 1
    endframe 1
    name ContactSheet
    xpos 620
    ypos 206
   }
   Unpremult {
    name Unpremult1
    xpos 620
    ypos 278
   }
   Output {
    name Output
    xpos 620
    ypos 446
   }
  end_group
  BlackOutside {
   name BlackOutside4
   xpos -920
   ypos -298
  }
  Position {
   translate {{parent.Reformat1.box_width*3+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
   name Position7
   xpos -920
   ypos -273
  }
  Constant {
   inputs 0
   format "256 256 0 0 256 256 1 square_256"
   name Constant5
   xpos -700
   ypos -1354
   postage_stamp false
  }
  Dot {
   name Dot25
   xpos -666
   ypos -1302
  }
set N3b7ea000 [stack 0]
  Dot {
   name Dot27
   xpos -1546
   ypos -1302
  }
  Reformat {
   type "to box"
   box_width {{parent.Reformat1.box_width}}
   box_height 100
   box_fixed true
   name ReformatBox1
   xpos -1580
   ypos -994
  }
  Ramp {
   p0 {0 0}
   p1 {{input.width} 0}
   color {{p1}}
   name Ramp3
   xpos -1580
   ypos -898
  }
  ColorLookup {
   lut {master {}
     red {curve}
     green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
     blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
     alpha {}}
   name ColorLookup7
   label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
   xpos -1580
   ypos -790
  }
  Colorspace {
   colorspace_in CIE-Yxy
   primary_in "Adobe (1998)"
   colorspace_out CIE-XYZ
   name Colorspace12
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -1580
   ypos -688
  }
  Fill {
   output alpha
   name Fill5
   xpos -1580
   ypos -639
  }
  BlackOutside {
   name BlackOutside7
   xpos -1580
   ypos -562
  }
  Position {
   translate {6 {parent.Position1.translate.y-input.height}}
   name Position3
   xpos -1580
   ypos -538
  }
  Dot {
   name Dot15
   xpos -1546
   ypos -414
  }
push $N3b7ea000
  Reformat {
   type "to box"
   box_width 2048
   box_height 2048
   box_fixed true
   name ReformatBox4
   xpos -700
   ypos -1258
  }
  Expression {
   temp_name0 n
   temp_expr0 input.width/8
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 x/width*(1-y/height)
   channel3 alpha
   expr3 1
   name Expression7
   xpos -700
   ypos -1209
  }
  Dot {
   name Dot10
   xpos -666
   ypos -1158
  }
set N3bb92400 [stack 0]
  Dot {
   name Dot26
   xpos -886
   ypos -1158
  }
set N3bb92000 [stack 0]
  Dot {
   name Dot23
   xpos -1106
   ypos -1158
  }
set N3bb91c00 [stack 0]
  Dot {
   name Dot12
   xpos -1326
   ypos -1158
  }
  Mirror2 {
   flip true
   flop true
   name Mirror2_1
   xpos -1360
   ypos -1042
  }
  Reformat {
   type "to box"
   box_width 512
   box_height {{box_width}}
   box_fixed true
   name Reformat1
   xpos -1360
   ypos -994
  }
  Gamma {
   channels rgb
   value 2
   name Gamma1
   xpos -1360
   ypos -898
  }
  Multiply {
   channels rgb
   value 8000
   name Multiply1
   label "\[value value]"
   xpos -1360
   ypos -811
  }
  ColorLookup {
   lut {master {}
     red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
     green {curve R 0.6589999795 x50 0.6542205811 0.6484853029 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6457066536 0.6532088518 0.6575522423 0.6589999795}
     blue {curve R 0.3160000145 x50 0.324739933 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
     alpha {}}
   name ColorLookup5
   label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
   xpos -1360
   ypos -775
  }
  Multiply {
   channels rgb
   value {0.31 1 1 1}
   name Multiply2
   label "dim boundary"
   xpos -1360
   ypos -725
  }
  Colorspace {
   colorspace_in CIE-Yxy
   primary_in "Adobe (1998)"
   colorspace_out CIE-XYZ
   name Colorspace5
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -1360
   ypos -688
  }
  Fill {
   output alpha
   name Fill4
   xpos -1360
   ypos -639
  }
  BlackOutside {
   name BlackOutside1
   xpos -1360
   ypos -562
  }
  Position {
   translate {6 {ReformatBox4.box_width-input.width}}
   name Position1
   xpos -1360
   ypos -538
  }
  Dot {
   name Dot24
   xpos -1326
   ypos -486
  }
push $N3bb91c00
  Reformat {
   type "to box"
   box_width {{parent.Reformat1.box_width}}
   box_height 100
   box_fixed true
   name ReformatBox2
   xpos -1140
   ypos -994
  }
  Expression {
   temp_name0 n
   temp_expr0 input.width/8
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 x/width*(1-y/height)
   channel3 alpha
   expr3 1
   name Expression1
   xpos -1140
   ypos -898
  }
set N3bb55800 [stack 0]
  Dot {
   name Dot8
   xpos -996
   ypos -894
  }
  ColorLookup {
   lut {master {curve L 0 s0 t0.9499999881 C k x0.308139503 1 s0}
     red {}
     green {}
     blue {}
     alpha {}}
   name ColorLookup1
   xpos -1030
   ypos -849
  }
  Dot {
   name Dot14
   xpos -996
   ypos -750
  }
push $N3bb55800
  Multiply {
   channels rgb
   value 269
   name Multiply5
   label "\[value value]"
   xpos -1140
   ypos -856
  }
  ColorLookup {
   lut {master {}
     red {curve C 1.8783474 1.85965741 1.8410753 1.82260251 1.80424976 1.78602886 1.76794314 1.75000143 1.73221421 1.71458244 1.69711792 1.67982578 1.66271067 1.6457777 1.62903571 1.6124835 1.59613538 1.57998943 1.56404996 1.54832447 1.5328095 1.51751649 1.50244594 1.48759735 1.47297573 1.45858264 1.44442391 1.43049574 1.41680288 1.40334678 1.39012623 1.37714779 1.36440396 1.35190022 1.33963728 1.32761216 1.31582856 1.30428183 1.29297352 1.28190565 1.27107596 1.2604804 1.25012183 1.23999798 1.23010659 1.22044563 1.21101499 1.20181489 1.19284034 1.18408906 1.17556167 1.16725397 1.15916491 1.15129638 1.14363372 1.13618886 1.12895167 1.12192106 1.11509454 1.10846853 1.10204577 1.09580922 1.08977199 1.08392429 1.07826447 1.07278681 1.06749392 1.06237841 1.05743873 1.05267084 1.04807138 1.04364109 1.03937256 1.03526449 1.03131545 1.02751946 1.02387333 1.02037668 1.01702523 1.01381445 1.01074362 1.00780725 1.00500631 1.00233305 0.99978602 0.99736285 0.9950608 0.99287677 0.99080539 0.98884678 0.98699367 0.9852494 0.98361033 0.98206747 0.98062134 0.97926998 0.97800934 0.97683728 0.97575116 0.97474778 0.97382426 0.97297859 0.97220623 0.97150886 0.97087657 0.97031689 0.96981871 0.96938527 0.96900952 0.96869147 0.96842706 0.96821606 0.96805781 0.96794283 0.96787858 0.96785843 0.96787864 0.96793604 0.96803701 0.96817231 0.96833968 0.96854311 0.96877253 0.96903455 0.96932232 0.96963543 0.96997368 0.97033387 0.97071254 0.9711163 0.97153723 0.97197378 0.97242606 0.97289121 0.97337079 0.97386622 0.97437072 0.97488332 0.97540969 0.97594237 0.97647977 0.97702706 0.97757769 0.97813445 0.97869468 0.97925854 0.97982538 0.98039114 0.98096472 0.98153675 0.98210776 0.98267955 0.98325121 0.98382008 0.98438704 0.9849571 0.98552132 0.98608243 0.98664182 0.98719966 0.98775077 0.98829895 0.98884273 0.98938417 0.98991877 0.9904511 0.99097681 0.99149919 0.99201453 0.99252397 0.99303031 0.99353105 0.99402624 0.99451613 0.99499857 0.99547589 0.99594522 0.99641174 0.99687338 0.99732745 0.99777603 0.9982177 0.99865389 0.999084 0.99950838 0.99992663 1.00033772 1.00074494 1.00114489 1.00153947 1.00192833 1.00231075 1.00268865 1.00305855 1.00342607 1.00378489 1.00413895 1.00448751 1.00483036 1.00517035 1.00550389 1.00583148 1.00615203 1.00646758 1.00678015 1.00708604 1.00738645 1.00768471 1.00797844 1.0082655 1.00854778 1.00882483 1.00909901 1.00936711 1.00963116 1.00989032 1.0101465 1.01039672 1.01064491 1.01088691 1.0111258 1.01135957 1.01158977 1.01181614 1.01203847 1.01225793 1.01247287 1.01268291 1.01289058 1.01309609 1.01329684 1.01349473 1.0136888 1.0138787 1.01406395 1.01424909 1.01442885 1.01460576 1.01478052 1.01495218 1.01512218 1.01528883 1.01545072 1.01561022 1.01576698 1.01592219 1.01607502 1.01622343 1.01636875 1.0165143 1.01665616 1.01679492 1.0169313 1.01706588 1.01719737 1.01732695 1.01745498 1.01757956 1.01770294 1.01782393 1.01794255 1.0180583 1.01817465 1.01828551 1.01839495 1.01850486 1.01861191 1.01871693 1.01882088 1.01891339}
     green {curve C 1}
     blue {curve C 0.00879261 0.00962762 0.010532 0.01151017 0.01256675 0.01370643 0.01493413 0.01625487 0.01767381 0.01919618 0.02082733 0.02257277 0.02443803 0.02642871 0.02855051 0.03080913 0.0332104 0.0357601 0.03846392 0.04132775 0.04435719 0.04755813 0.05093599 0.05449668 0.0582453 0.0621875 0.06632853 0.07067341 0.07522713 0.07999477 0.08498063 0.09018957 0.09562518 0.10129225 0.10719412 0.11333443 0.11971687 0.12634411 0.133219 0.14034435 0.14772213 0.15535444 0.16324303 0.17138906 0.179794 0.18845794 0.197382 0.20656651 0.21601067 0.22571453 0.23567709 0.24589771 0.25637382 0.26710594 0.2780903 0.28932518 0.30080822 0.3125369 0.32450783 0.33671761 0.34916404 0.36183971 0.37474373 0.38787127 0.40121818 0.41477671 0.42854655 0.44251823 0.45668846 0.47105014 0.48559928 0.50033116 0.5152359 0.5303098 0.5455451 0.56093836 0.5764783 0.59215891 0.60797763 0.62392306 0.63999057 0.65616876 0.6724565 0.68884456 0.70532417 0.72188419 0.73852479 0.7552371 0.77200818 0.78883314 0.80570388 0.82261622 0.83956301 0.8565321 0.87351894 0.89051074 0.90751225 0.92450547 0.94148719 0.95845115 0.97538745 0.99229181 1.00915313 1.02597356 1.04273522 1.05944169 1.07608175 1.09265125 1.10914159 1.12555146 1.14187002 1.15809321 1.1742171 1.190238 1.20614767 1.22194457 1.23762202 1.2531724 1.26859927 1.28389311 1.29905295 1.31407428 1.32895291 1.34368753 1.35827363 1.3727088 1.38699389 1.40111876 1.41508293 1.42889357 1.44254065 1.45602405 1.46934104 1.48249614 1.49548101 1.50830269 1.5209527 1.53343177 1.54574537 1.5578897 1.56985986 1.5816654 1.59329891 1.60476208 1.61605716 1.62718153 1.63813758 1.64892519 1.65955138 1.67000985 1.68030369 1.69043732 1.70040607 1.71021223 1.71985734 1.72934508 1.73867714 1.74785423 1.75688136 1.76575518 1.77447391 1.78304338 1.79146802 1.79975164 1.80788386 1.81587982 1.82373333 1.83144975 1.83902776 1.84647095 1.85378456 1.86096811 1.86802399 1.87495112 1.88175035 1.88842535 1.89497983 1.90141833 1.90774179 1.91394711 1.92004013 1.92602086 1.93188739 1.93765306 1.94330883 1.94886208 1.95430994 1.95965815 1.96490622 1.97005856 1.97511387 1.98007631 1.98494554 1.98972344 1.99441445 1.99901712 2.00353193 2.00796437 2.01231384 2.01658392 2.02076721 2.02487659 2.02890825 2.03286695 2.03675175 2.04056406 2.04430199 2.04797506 2.05157685 2.05511236 2.0585804 2.06198287 2.06532407 2.06860161 2.07181907 2.07497644 2.07807779 2.0811162 2.08409977 2.08702946 2.08990335 2.09272337 2.09549189 2.0982089 2.10087585 2.10349345 2.10606146 2.1085825 2.11105394 2.11348104 2.11586332 2.11820364 2.12050176 2.12275648 2.12496805 2.127141 2.12927723 2.13136625 2.13341999 2.13543844 2.13741732 2.13936305 2.1412704 2.1431427 2.14498401 2.14678812 2.14856291 2.1503005 2.15200949 2.15368938 2.15533352 2.15695238 2.15853977 2.16009951 2.16162968 2.16313291 2.16460824 2.16605687 2.16747928 2.16887903 2.17024994 2.1715951 2.17291784 2.17421341 2.17548871 2.17674041 2.17797112 2.17918396 2.18036819 2.18143296}
     alpha {}}
   name ColorLookup3
   label "Planckian Locus 0-269"
   xpos -1140
   ypos -808
  }
  Multiply {
   inputs 1+1
   channels rgb
   value 0
   maskChannelMask rgba.red
   invert_mask true
   name Multiply3
   label dim
   xpos -1140
   ypos -760
  }
  BlackOutside {
   name BlackOutside6
   xpos -1140
   ypos -706
  }
  Position {
   translate {6 {parent.Position2.translate.y-input.height}}
   name Position8
   xpos -1140
   ypos -682
  }
  Dot {
   name Dot28
   xpos -1106
   ypos -654
  }
push $N3bb92000
  Dot {
   name Dot4
   xpos -886
   ypos -1086
  }
set N3baf6c00 [stack 0]
  Rectangle {
   replace true
   area {0 0 6 {height}}
   name Rectangle1
   xpos -810
   ypos -1089
  }
  BlackOutside {
   name BlackOutside5
   xpos -810
   ypos -1041
  }
push $N3baf6c00
  Radial {
   inputs 1+1
   replace true
   area {-5422 -3542 7470 5590}
   softness 0
   ramp linear
   color {0.0719 0.02604 0.0001 1}
   p1 {0 0}
   color0 {0.039378 0.001097 0.188331 1}
   p0 {0 2048}
   name Radial1
   xpos -920
   ypos -1041
  }
  Dot {
   name Dot9
   xpos -886
   ypos -894
  }
push $N3bb92400
  Gamma {
   channels rgba
   value 0.5
   name Gamma2
   xpos -700
   ypos -1120
  }
  Expression {
   temp_name0 start
   temp_expr0 360
   temp_name1 end
   temp_expr1 830
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 r*(end-start)+start
   channel1 none
   channel2 none
   expr3 1
   name Expression2
   label "360nm to 830nm"
   xpos -700
   ypos -1096
  }
  ColorLookup {
   lut {master {}
     red {curve x360 0.0001299 C 0.00014585 0.0001638 0.000184 0.00020669 0.0002321 0.00026073 0.00029307 0.00032939 0.00036991 0.0004149 0.00046416 0.00051899 0.00058185 0.00065523 0.0007416 0.00084503 0.00096453 0.00109495 0.00123115 0.001368 0.00150205 0.00164233 0.00180238 0.00199576 0.002236 0.00253539 0.0028926 0.00330083 0.00375324 0.004243 0.00476239 0.00533005 0.00597871 0.00674112 0.00765 0.00875137 0.01002888 0.0114217 0.01286901 0.01431 0.01570443 0.01714744 0.01878122 0.02074801 0.02319 0.02620736 0.02978248 0.03388092 0.03846824 0.04351 0.0489956 0.0550226 0.0617188 0.069212 0.07763 0.08695811 0.09717672 0.1084063 0.1207672 0.13438 0.1493582 0.16539571 0.1819831 0.19861101 0.21477 0.23018681 0.24487969 0.25877729 0.27180791 0.28389999 0.29494381 0.3048965 0.31378731 0.32164541 0.3285 0.3343513 0.33921009 0.34312129 0.3461296 0.34828001 0.3495999 0.3501474 0.35001299 0.349287 0.34806001 0.34637329 0.34426239 0.3418088 0.3390941 0.3362 0.33319771 0.33004111 0.32663569 0.32288679 0.31869999 0.3140251 0.30888399 0.3032904 0.2972579 0.29080001 0.28397009 0.27672139 0.2689178 0.26042271 0.2511 0.2408475 0.2298512 0.2184072 0.2068115 0.19536 0.18421359 0.1733273 0.16268811 0.1522833 0.14210001 0.1321786 0.1225696 0.1132752 0.1042979 0.09564 0.08729955 0.07930804 0.07171776 0.06458099 0.05795001 0.05186211 0.04628152 0.04115088 0.03641283 0.03201 0.0279172 0.0241444 0.020687 0.0175404 0.0147 0.01216179 0.00991996 0.00796724 0.00629635 0.0049 0.00377717 0.00294532 0.00242488 0.00223629 0.0024 0.00292552 0.00383656 0.00517484 0.00698208 0.0093 0.01214949 0.01553588 0.01947752 0.02399277 0.0291 0.03481485 0.04112016 0.04798504 0.05537861 0.06327 0.07163501 0.08046224 0.08973996 0.09945645 0.1096 0.1201674 0.1311145 0.1423679 0.15385421 0.1655 0.17725711 0.18914001 0.2011694 0.21336579 0.2257499 0.2383209 0.2510668 0.26399219 0.2771017 0.2904 0.30389121 0.31757259 0.33143839 0.3454828 0.35969999 0.37408391 0.3886396 0.4033784 0.41831151 0.43344989 0.44879529 0.46433601 0.480064 0.49597129 0.51205009 0.52829587 0.54469162 0.56120938 0.57782149 0.59450001 0.6112209 0.62797582 0.64476019 0.66156971 0.67839998 0.69523919 0.7120586 0.72882837 0.7455188 0.76209998 0.77854317 0.79482561 0.81092638 0.82682478 0.84249997 0.85793251 0.87308162 0.88789439 0.90231812 0.9163 0.9297995 0.94279838 0.95527762 0.96721792 0.97860003 0.9893856 0.99954879 1.00908923 1.01800644 1.02629995 1.03398275 1.04098594 1.04718804 1.05246675 1.05669999 1.05979443 1.06179917 1.06280684 1.0629096 1.06219995 1.06073523 1.05844355 1.05522442 1.05097675 1.04560006 1.03903687 1.03136074 1.02266622 1.0130477 1.00259995 0.99136752 0.97933137 0.96649158 0.9528479 0.93839997 0.92319399 0.90724403 0.89050198 0.87291998 0.85444993 0.83508402 0.814946 0.794186 0.77295399 0.75139999 0.72958362 0.70758879 0.68560219 0.66381037 0.64240003 0.62151492 0.6011138 0.58110517 0.56139767 0.54189998 0.52259952 0.50354642 0.4847436 0.46619391 0.4479 0.42986131 0.41209799 0.39464399 0.37753329 0.3608 0.34445629 0.32851681 0.31301919 0.29800111 0.28349999 0.26954481 0.25611839 0.2431896 0.2307272 0.21870001 0.2070971 0.19592319 0.1851708 0.1748323 0.1649 0.1553667 0.14623 0.13749 0.1291467 0.1212 0.1136397 0.106465 0.09969044 0.09333061 0.0874 0.08190096 0.07680428 0.07207712 0.06768664 0.0636 0.05980685 0.05628216 0.05297104 0.04981861 0.04677 0.04378405 0.04087536 0.03807264 0.03540461 0.0329 0.03056419 0.02838056 0.02634484 0.02445275 0.0227 0.02108429 0.01959988 0.01823732 0.01698717 0.01584 0.01479064 0.01383132 0.01294868 0.0121292 0.01135916 0.01062935 0.00993885 0.00928842 0.00867885 0.00811092 0.00758239 0.00708875 0.00662731 0.00619541 0.00579035 0.00540983 0.00505258 0.00471751 0.00440351 0.00410946 0.00383391 0.00357575 0.00333434 0.00310907 0.00289933 0.00270435 0.00252302 0.00235417 0.00219662 0.00204919 0.00191096 0.00178144 0.00166011 0.00154646 0.00143997 0.00134004 0.00124628 0.00115847 0.00107643 0.00099995 0.00092874 0.00086243 0.00080075 0.0007434 0.00069008 0.00064052 0.0005945 0.00055186 0.00051243 0.00047602 0.00044245 0.00041151 0.00038298 0.00035665 0.0003323 0.00030976 0.00028889 0.00026954 0.00025157 0.00023483 0.00021917 0.00020453 0.00019084 0.00017807 0.00016615 0.00015502 0.00014462 0.00013491 0.00012585 0.00011741 0.00010955 0.00010222 9.539e-05 8.902e-05 8.308e-05 7.751e-05 7.231e-05 6.746e-05 6.293e-05 5.871e-05 5.477e-05 5.11e-05 4.768e-05 4.449e-05 4.151e-05 3.873e-05 3.614e-05 3.372e-05 3.146e-05 2.935e-05 2.738e-05 2.552e-05 2.379e-05 2.218e-05 2.067e-05 1.927e-05 1.797e-05 1.675e-05 1.562e-05 1.456e-05 1.357e-05 1.265e-05 1.18e-05 1.1e-05 1.025e-05 9.56e-06 8.91e-06 8.31e-06 7.75e-06 7.22e-06 6.73e-06 6.28e-06 5.85e-06 5.46e-06 5.09e-06 4.74e-06 4.42e-06 4.12e-06 3.84e-06 3.58e-06 3.34e-06 3.11e-06 2.9e-06 2.71e-06 2.52e-06 2.35e-06 2.19e-06 2.04e-06 1.91e-06 1.78e-06 1.66e-06 1.54e-06 1.44e-06 1.34e-06 S 1.25e-06}
     green {curve x360 3.92e-06 C 4.39e-06 4.93e-06 5.53e-06 6.21e-06 6.97e-06 7.81e-06 8.77e-06 9.84e-06 1.104e-05 1.239e-05 1.389e-05 1.556e-05 1.744e-05 1.958e-05 2.202e-05 2.484e-05 2.804e-05 3.153e-05 3.522e-05 3.9e-05 4.283e-05 4.691e-05 5.159e-05 5.718e-05 6.4e-05 7.234e-05 8.221e-05 9.351e-05 0.00010614 0.00012 0.00013498 0.00015149 0.00017021 0.00019182 0.000217 0.00024691 0.00028124 0.00031852 0.00035727 0.000396 0.00043371 0.00047302 0.00051788 0.00057222 0.00064 0.00072456 0.0008255 0.00094116 0.00106988 0.00121 0.00136209 0.00153075 0.00172037 0.00193532 0.00218 0.0024548 0.002764 0.0031178 0.0035264 0.004 0.00454624 0.00515932 0.00582928 0.00654616 0.0073 0.00808651 0.00890872 0.00976768 0.01066443 0.0116 0.01257317 0.01358272 0.01462968 0.01571509 0.01684 0.01800736 0.01921448 0.02045392 0.02171824 0.023 0.02429461 0.02561024 0.02695857 0.02835125 0.0298 0.03131083 0.03288368 0.03452112 0.03622571 0.038 0.03984667 0.041768 0.043766 0.04584267 0.048 0.05024368 0.05257304 0.05498056 0.05745872 0.06 0.06260197 0.06527752 0.06804208 0.07091109 0.0739 0.077016 0.0802664 0.0836668 0.0872328 0.09098 0.09491755 0.09904584 0.1033674 0.1078846 0.1126 0.117532 0.1226744 0.12799279 0.1334528 0.13902 0.1446764 0.1504693 0.15646189 0.1627177 0.1693 0.1762431 0.18355811 0.1912735 0.19941799 0.20802 0.2171199 0.2267345 0.2368571 0.2474812 0.2586 0.2701849 0.28229389 0.2950505 0.30857801 0.32300001 0.33840209 0.35468581 0.37169859 0.3892875 0.4073 0.42562991 0.44430959 0.4633944 0.48293951 0.50300002 0.52356929 0.54451197 0.56568998 0.58696532 0.60820001 0.6293456 0.65030682 0.67087519 0.69084239 0.70999998 0.72818518 0.74546361 0.76196939 0.7778368 0.79320002 0.80811042 0.82249618 0.83630681 0.8494916 0.86199999 0.87381083 0.88496238 0.89549363 0.90544319 0.91485012 0.92373478 0.93209243 0.93992257 0.94722521 0.954 0.9602561 0.96600741 0.97126061 0.97602248 0.98030001 0.98409241 0.98741817 0.99031281 0.99281162 0.99495012 0.99671078 0.99809831 0.99911201 0.99974817 1 0.99985671 0.99930459 0.99832553 0.99689871 0.995 0.9926005 0.98974258 0.98644441 0.98272407 0.97860003 0.97408372 0.96917123 0.96385682 0.95813489 0.95200002 0.94545043 0.93849921 0.93116277 0.92345762 0.91540003 0.90700638 0.89827722 0.8892048 0.8797816 0.87 0.85986131 0.849392 0.83862197 0.82758129 0.81629997 0.80479473 0.793082 0.781192 0.76915473 0.75700003 0.74475408 0.73242241 0.7200036 0.70749652 0.69489998 0.68221921 0.66947162 0.65667439 0.64384478 0.63099998 0.61815548 0.60531437 0.59247559 0.57963789 0.5668 0.5539611 0.54113722 0.5283528 0.51563227 0.50300002 0.4904688 0.47803041 0.46567759 0.4534032 0.44119999 0.42908001 0.417036 0.40503201 0.39303201 0.38100001 0.36891839 0.3568272 0.34477681 0.33281761 0.32100001 0.30933809 0.2978504 0.28659359 0.27562451 0.26499999 0.25476319 0.2448896 0.2353344 0.22605281 0.21699999 0.20816161 0.1995488 0.1911552 0.1829744 0.175 0.1672235 0.15964641 0.1522776 0.1451259 0.1382 0.1315003 0.1250248 0.1187792 0.1127691 0.107 0.1014762 0.09618864 0.09112296 0.08626485 0.0816 0.07712064 0.07282552 0.06871008 0.06476976 0.061 0.05739621 0.05395504 0.05067376 0.04754965 0.04458 0.04175872 0.03908496 0.03656384 0.03420048 0.032 0.02996261 0.02807664 0.02632936 0.02470805 0.0232 0.02180077 0.02050112 0.01928108 0.01812069 0.017 0.01590379 0.01483718 0.01381068 0.01283478 0.01192 0.01106831 0.01027339 0.00953331 0.00884616 0.00821 0.00762378 0.00708542 0.00659148 0.00613848 0.005723 0.00534306 0.0049958 0.0046764 0.00438007 0.004102 0.00383845 0.0035891 0.00335422 0.00313409 0.002929 0.00273814 0.00255988 0.00239324 0.00223728 0.002091 0.00195359 0.00182458 0.00170358 0.00159019 0.001484 0.0013845 0.00129127 0.00120409 0.00112274 0.001047 0.00097659 0.00091111 0.00085013 0.00079324 0.00074 0.00069008 0.00064331 0.0005995 0.00055845 0.00052 0.00048391 0.00045005 0.00041835 0.00038872 0.0003611 0.00033538 0.00031144 0.00028917 0.00026845 0.0002492 0.0002313 0.00021469 0.00019929 0.00018505 0.0001719 0.00015978 0.0001486 0.0001383 0.00012879 0.00012 0.00011186 0.00010432 9.734e-05 9.085e-05 8.48e-05 7.915e-05 7.386e-05 6.892e-05 6.43e-05 6e-05 5.598e-05 5.223e-05 4.872e-05 4.545e-05 4.24e-05 3.956e-05 3.692e-05 3.445e-05 3.215e-05 3e-05 2.799e-05 2.611e-05 2.436e-05 2.272e-05 2.12e-05 1.978e-05 1.845e-05 1.722e-05 1.606e-05 1.499e-05 1.399e-05 1.305e-05 1.218e-05 1.136e-05 1.06e-05 9.89e-06 9.22e-06 8.59e-06 8.01e-06 7.47e-06 6.96e-06 6.49e-06 6.05e-06 5.64e-06 5.26e-06 4.9e-06 4.57e-06 4.26e-06 3.97e-06 3.7e-06 3.45e-06 3.22e-06 3e-06 2.8e-06 2.61e-06 2.43e-06 2.27e-06 2.11e-06 1.97e-06 1.84e-06 1.71e-06 1.6e-06 1.49e-06 1.39e-06 1.29e-06 1.21e-06 1.12e-06 1.05e-06 9.8e-07 9.1e-07 8.5e-07 7.9e-07 7.4e-07 6.9e-07 6.4e-07 6e-07 5.6e-07 5.2e-07 4.8e-07 S 4.5e-07}
     blue {curve x360 0.0006061 C 0.00068088 0.00076515 0.00086001 0.00096659 0.001086 0.00122059 0.00137273 0.00154358 0.00173429 0.001946 0.00217778 0.00243581 0.00273195 0.00307806 0.003486 0.00397523 0.00454088 0.00515832 0.00580291 0.00645 0.00708322 0.00774549 0.00850115 0.00941454 0.01054999 0.0119658 0.01365587 0.01558805 0.01773015 0.02005001 0.02251136 0.02520288 0.02827972 0.03189704 0.03621 0.04143771 0.04750372 0.05411988 0.06099803 0.06785001 0.07448632 0.08136156 0.08915364 0.09854048 0.1102 0.1246133 0.1417017 0.16130351 0.1832568 0.20739999 0.23369209 0.26261139 0.29477459 0.33079851 0.37130001 0.4162091 0.4654642 0.51969481 0.5795303 0.64560002 0.71848381 0.79671329 0.87784588 0.95943898 1.0390501 1.11536729 1.18849707 1.25812328 1.32392955 1.38559997 1.44263518 1.49480355 1.54219031 1.58488071 1.62295997 1.65640485 1.68529594 1.70987451 1.73038209 1.74705994 1.76004458 1.76962328 1.77626371 1.78043342 1.78260004 1.78296816 1.78169978 1.77919817 1.7758671 1.77210998 1.76825893 1.76403904 1.7589438 1.75246632 1.74409997 1.73355949 1.7208581 1.70593691 1.68873715 1.66919994 1.64752865 1.62341273 1.59602225 1.56452799 1.52810001 1.4861114 1.43952155 1.38987994 1.33873618 1.28763998 1.23742235 1.18782425 1.13876104 1.09014797 1.04190004 0.99419761 0.94734728 0.90145308 0.8566193 0.81295007 0.77051729 0.7294448 0.68991357 0.65210491 0.61619997 0.58232862 0.55041617 0.52033758 0.49196729 0.46518001 0.4399246 0.41618359 0.39388219 0.3729459 0.35330001 0.33485779 0.31755209 0.30133751 0.28616861 0.27200001 0.25881711 0.2464838 0.2347718 0.2234533 0.2123 0.20116919 0.19011959 0.1792254 0.1685608 0.1582 0.1481383 0.1383758 0.1289942 0.1200751 0.1117 0.1039048 0.09666748 0.08998272 0.08384531 0.07824999 0.07320899 0.06867816 0.06456784 0.06078835 0.05725001 0.05390435 0.05074664 0.04775276 0.04489859 0.04216 0.03950728 0.03693564 0.03445836 0.03208872 0.02984 0.02771181 0.02569444 0.02378716 0.02198925 0.0203 0.01871805 0.01724036 0.01586364 0.01458461 0.0134 0.01230723 0.01130188 0.01037792 0.00952931 0.00875 0.0080352 0.0073816 0.0067854 0.0062428 0.00575 0.0053036 0.0048998 0.0045342 0.0042024 0.0039 0.0036232 0.0033706 0.0031414 0.0029348 0.00275 0.0025852 0.0024386 0.0023094 0.0021968 0.0021 0.00201773 0.0019482 0.0018898 0.00184093 0.0018 0.00176627 0.0017378 0.0017112 0.00168307 0.00165 0.00161013 0.0015644 0.0015136 0.00145853 0.0014 0.00133667 0.00127 0.001205 0.00114667 0.0011 0.0010688 0.0010494 0.0010356 0.0010212 0.001 0.00096864 0.00092992 0.00088688 0.00084256 0.0008 0.00076096 0.00072368 0.00068592 0.00064544 0.0006 0.00054787 0.0004916 0.0004354 0.00038347 0.00034 0.00030725 0.00028316 0.00026544 0.00025181 0.00024 0.00022955 0.00022064 0.00021196 0.00020219 0.00019 0.00017421 0.00015564 0.00013596 0.00011685 0.0001 8.613e-05 7.46e-05 6.5e-05 5.693e-05 5e-05 4.416e-05 3.948e-05 3.572e-05 3.264e-05 3e-05 2.765e-05 2.556e-05 2.364e-05 2.181e-05 2e-05 1.813e-05 1.62e-05 1.42e-05 1.213e-05 1e-05 7.73e-06 5.4e-06 3.2e-06 1.33e-06 0 0 0 0 0 0 0 0 S 0}
     alpha {}}
   name ColorLookup4
   label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
   xpos -700
   ypos -1030
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeLineOfPurples
   xpos -700
   ypos -897
   disable {{!parent.draw_line_of_purples}}
  }
  Fill {
   color {0 0 0 1}
   name Disable_SpectralLocus
   xpos -700
   ypos -826
   disable {{parent.draw_spectral_locus}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePlanckianLocus
   xpos -700
   ypos -658
   disable {{!parent.draw_planckian_locus}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePointerGamut
   xpos -700
   ypos -489
   disable {{!parent.draw_pointers_gamut}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePointerGamut_Samples
   xpos -700
   ypos -417
   disable {{!draw_pointers_samples}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeMacbeth
   xpos -700
   ypos -273
   disable {{!parent.draw_macbeth_chart}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutGrid
   xpos -700
   ypos -81
   disable {{!parent.gamut_grid}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutA
   xpos -700
   ypos 255
   disable {{!parent.gamut_a}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutB
   xpos -700
   ypos 279
   disable {{!parent.gamut_b}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutC
   xpos -700
   ypos 303
   disable {{!parent.gamut_c}}
  }
  Dot {
   name Dot2
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -666
   ypos 450
  }
set N3be96000 [stack 0]
  Dot {
   name Dot5
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 450
  }
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace6
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -590
   ypos 488
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression5
   label "CIE Yxy to CIELuv"
   xpos -590
   ypos 536
   disable {{!parent.diagram}}
  }
  Dot {
   name Dot11
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 618
  }
push $N3be96000
  ColorMatrix {
   matrix {
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix1
   label "XYZ to working"
   xpos -700
   ypos 488
   disable {{!map_overlays_to_input_gamut}}
  }
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity_grid\" iterate pixelWise b2e7b5f8a89bdb0629aa8cc2eae387ef3436f24cb0af642eeba41235874506c4 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 6 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== \"draw_axes\" Bool 1 AA== \"grid_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== 6 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 \"draw_axes\" 1 1 \"grid_color\" 4 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity_grid : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n  bool draw_axes;\n  float4 grid_color;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  void draw_grid() \{\n    // grid width in pixels. expresses a 0 to 1 range in CIE xy\n    float grid_width = 1.0f * outsize + offset;\n    // draw grid lines\n    float i = offset;\n    while (i <= grid_width && i > 0.0f) \{\n      write_aa(offset, i, grid_color);\n      write_aa(i, offset, grid_color);\n      i += 1.0;\n    \}\n    // cross-hatching interval in pixels\n    float hatch_interval = (grid_width - offset) * 0.1f;\n    // cross-hatch length in pixels\n    float hatch_width = outsize * 0.01f;\n    i = offset;\n    while (i <= grid_width) \{\n      i += hatch_interval;\n      float j = 0.0;\n      while (j <= hatch_width/2) \{\n        write_aa(offset+j, i, grid_color);\n        write_aa(offset-j, i, grid_color);\n        write_aa(i, offset+j, grid_color);\n        write_aa(i, offset-j, grid_color);\n        j += 1.0;\n      \}\n    \}\n  \}\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n\n    // draw CIExy coordinate system axes\n    if (draw_axes && pos.x == 0 && pos.y == 0) \{\n      draw_grid();\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_grid_padding {{parent.PlotChromaticities.PlotChromaticity_padding}}
   PlotChromaticity_grid_left_margin {{parent.PlotChromaticities.PlotChromaticity_left_margin}}
   PlotChromaticity_grid_tolerance 0.8
   PlotChromaticity_grid_antialias true
   PlotChromaticity_grid_draw_axes {{parent.coordinate_system}}
   PlotChromaticity_grid_grid_color {0.15 0 0.005 1}
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotInput2
   xpos -700
   ypos 608
  }
  FrameHold {
   firstFrame 1
   name FrameHold1
   xpos -700
   ypos 680
   cached true
  }
  Dot {
   name Dot3
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -666
   ypos 762
  }
  Input {
   inputs 0
   name Input
   xpos 620
   ypos -1426
  }
  AddChannels {
   name AddChannels1
   xpos 620
   ypos -1360
  }
  Reformat {
   type "to box"
   box_width {{parent.resolution}}
   box_height {{box_width}}
   box_fixed true
   box_pixel_aspect {{input.pixel_aspect}}
   resize distort
   filter impulse
   name OutputFormat
   xpos 620
   ypos -1282
   disable {{!parent.resample_input}}
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name CropBBox
   xpos 620
   ypos -1257
  }
  Dot {
   name Dot7
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 654
   ypos 162
  }
set N3be26800 [stack 0]
  Constant {
   inputs 0
   channels rgb
   color {0 0 0 1}
   format "256 256 0 0 256 256 1 square_256"
   name Constant2
   xpos 400
   ypos 38
   postage_stamp false
  }
  Reformat {
   type "to box"
   box_width {{parent.resolution}}
   box_height {{box_width}}
   box_fixed true
   box_pixel_aspect {{input.pixel_aspect}}
   resize distort
   filter impulse
   name OutputFormat1
   xpos 400
   ypos 64
   disable {{!parent.resample_input}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0]"}}
   name Switch1
   xpos 400
   ypos 158
  }
  Fill {
   output rgb
   color 0.18
   name SampleColor
   xpos 290
   ypos 158
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop2
   xpos 290
   ypos 184
  }
  Fill {
   output alpha
   name Fill3
   xpos 290
   ypos 224
  }
  Dot {
   name Dot6
   xpos 324
   ypos 282
  }
set N3be24c00 [stack 0]
  ColorMatrix {
   matrix {
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
     }
   name ColorMatrix4
   label "working to XYZ"
   xpos 180
   ypos 272
  }
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace1
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos 180
   ypos 320
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression6
   label "CIE Yxy to CIELuv"
   xpos 180
   ypos 368
   disable {{!parent.diagram}}
  }
push $N3be24c00
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity_sample\" iterate pixelWise 20e14b615a937bac78c1a771cbdfd10cc7c5fb6c487f65d0bb2d6633e404b958 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 3 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== 3 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity_sample : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  void process(int2 pos) \{\n    // only process the first pixel\n    if (pos.x > 0 && pos.y > 0) return;\n\n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    int2 p = int2(round(out_coord.x), round(out_coord.y));\n    if (dst.bounds.inside(p.x, p.y)) \{\n      for (int k=0; k<3; k++) \{\n        dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n      \}\n      dst(p.x, p.y, 3) = 1.0f;\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_sample_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
   PlotChromaticity_sample_left_margin {{parent.left_margin}}
   PlotChromaticity_sample_tolerance 1
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotChromaticities1
   xpos 290
   ypos 368
  }
  Dot {
   name Dot22
   xpos 324
   ypos 450
  }
set N3bdcf400 [stack 0]
  Dilate {
   channels rgba
   size {{Output.width/2048}}
   name Dilate1
   label "\[value size]"
   xpos 290
   ypos 488
  }
set N3bdcf000 [stack 0]
  Dilate {
   channels rgba
   size {{Output.width/2048*2}}
   name Dilate2
   label "\[value size]"
   xpos 180
   ypos 488
  }
push $N3bdcf400
  Dot {
   name Dot21
   xpos -6
   ypos 450
  }
  FilterErode {
   channels rgba
   size {{-Output.width/2048/5}}
   filter triangle
   name FilterErode1
   label "\[value size]"
   xpos -40
   ypos 489
  }
set N3bdce400 [stack 0]
  Dilate {
   channels rgba
   size {0 {parent.Dilate3.size.w}}
   name Dilate4
   label "\[value size]"
   xpos -40
   ypos 584
  }
push $N3bdce400
  Dilate {
   channels rgba
   size {{Output.width*plus_size/100} 0}
   name Dilate3
   label "\[value size]"
   xpos 70
   ypos 488
   addUserKnob {20 User}
   addUserKnob {7 plus_size R 0 4}
   plus_size 0.8
  }
  Merge2 {
   inputs 2
   operation screen
   bbox B
   name Merge9
   xpos 70
   ypos 591
  }
  Merge2 {
   inputs 2
   operation stencil
   bbox B
   name Merge10
   xpos 180
   ypos 591
  }
  Group {
   name HueRotate
   xpos 180
   ypos 639
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -24
   }
   Unpremult {
    name Unpremult1
    xpos -40
    ypos 15
   }
   Colorspace {
    colorspace_out HSV
    name Colorspace1
    xpos -40
    ypos 72
   }
   Add {
    channels {rgba.red -rgba.green -rgba.blue none}
    value 0.5
    name Add1
    xpos -40
    ypos 111
   }
   Fill {
    output {-rgba.red -rgba.green rgba.blue none}
    name Fill1
    xpos -40
    ypos 147
   }
   Colorspace {
    colorspace_in HSV
    name Colorspace2
    xpos -40
    ypos 183
   }
   Premult {
    name Premult1
    xpos -40
    ypos 231
   }
   Output {
    name Output1
    xpos -40
    ypos 302
   }
  end_group
push $N3bdcf000
  Merge2 {
   inputs 2
   bbox B
   name Merge8
   xpos 290
   ypos 638
  }
  Dot {
   name Dot20
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 324
   ypos 690
  }
push $N3be26800
  Dot {
   name Dot1
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 764
   ypos 162
  }
  Group {
   name GamutToXYZ
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos 730
   ypos 247
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace2
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos 730
   ypos 296
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression4
   label "CIE Yxy to CIELuv"
   xpos 730
   ypos 344
   disable {{!parent.diagram}}
  }
  Dot {
   name Dot13
   label " Pos"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 764
   ypos 546
  }
push $N3be26800
  Dot {
   name Dot16
   label " Col"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 654
   ypos 450
  }
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity\" iterate pixelWise 3e86399c7642fe5c35c23528a644f88a8bf13f967de084ae6842f8be55098c6b 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 4 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== 4 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
   PlotChromaticity_left_margin {{parent.left_margin}}
   PlotChromaticity_tolerance 2
   PlotChromaticity_antialias true
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotChromaticities
   xpos 620
   ypos 536
   disable {{!parent.plot_input}}
  }
  Fill {
   color 0
   name BLACK
   tile_color 0x111111ff
   xpos 620
   ypos 591
   disable {{parent.plot_input}}
  }
  Merge2 {
   inputs 2
   bbox B
   name Merge7
   xpos 620
   ypos 686
   disable {{!parent.enable_sample_color}}
  }
  Merge2 {
   inputs 2
   name Merge1
   xpos 620
   ypos 758
  }
  Output {
   name Output
   xpos 620
   ypos 1046
  }
 end_group
end_group
set N3b410800 [stack 0]
push $Nc4fe7400
Group {
 name DRT_ZCAM_IzMh_Blink4
 label "Input: \[value encoding_in] / \[value primaries_in]\nLimit: \[value primaries_limit] / \[value ssts_luminance.2]nits\nOutput: \[value encoding_out] / \[value primaries_out]\n\[value toneScaleMode]\n\nBodged XYZ_to_LMS_ZCAM matrix\n"
 note_font "Bitstream Vera Sans"
 xpos 120
 ypos 77
 addUserKnob {20 User}
 addUserKnob {26 input_div l Input}
 addUserKnob {4 encoding_in l encoding t "the input log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 "" ""}}
 addUserKnob {4 primaries_in l primaries t "the input primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {4 cat_type l "CAT Type" t "the chromatic adaptation transform to use for converting between white points" M {None "XYZ Scaling" Bradford CAT02 Zhai2018 ""}}
 cat_type Zhai2018
 addUserKnob {26 tonescale_div l Tonescale}
 addUserKnob {4 toneScaleMode l "ToneScale Mode" M {SSTS MMSDC "Daniele Compression Curve" ""}}
 toneScaleMode "Daniele Compression Curve"
 addUserKnob {6 applyTonecurve l "apply Tonecurve" t "toggle the SingleStageToneScale transform" +STARTLINE}
 applyTonecurve true
 addUserKnob {13 ssts_luminance l "SSTS luminance" t "min, mid & peak luminance values in Cd/sqm as parameters for the SSTS"}
 ssts_luminance {1e-06 10 100}
 addUserKnob {26 ssts_luminance_label l " " -STARTLINE T "min / mid / peak"}
 addUserKnob {6 apply_highlight_desat l "apply highlight desat" t "toggle de-saturating the highlights above SSTS mid luminance based on how much the SSTS has compressed them" +STARTLINE}
 addUserKnob {7 desat_highlights l "desat highlights" t "the amount of desaturation applied to the highlights" R 0 5}
 desat_highlights 3.5
 addUserKnob {26 gamut_mapping_div l "Gamut Mapping"}
 addUserKnob {6 apply_gamut_compression l "apply gamut compression " t "toggle the gamut compression towards the limiting primaries" +STARTLINE}
 apply_gamut_compression true
 addUserKnob {4 primaries_limit l primaries t "the limiting primaries of the gamut to which to compress to" M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI ""}}
 primaries_limit sRGB/Rec.709-D65
 addUserKnob {6 discount_illuminant l "discount illuminant (Zhai2018 only)" t "disable the degree of adaptation model for the Zhai2018 CAT\nthis is only effective if the limiting primaries do not use a D65 white point" -STARTLINE}
 discount_illuminant true
 addUserKnob {7 cusp_mid_blend l "cusp to mid blend" t "blend the lightness (J) of the focal point of the compression between the lightness of the gamut cusp at the given hue (0.0)  and the mid luminance of the SSTS (1.0)"}
 cusp_mid_blend 0.5
 addUserKnob {26 cusp_mid_blend_label l " " -STARTLINE T "gamut cusp (0) to SSTS mid (1)"}
 addUserKnob {7 focus_distance l "focus distance" t "the distance from the achromatic axis of the focal point of the compression where 0.0 is at the achromatic axis and 1.0 the distance of the gamut cusp at the given hue but on the opposite side of the achomatic axis" R 0 2}
 focus_distance 0.5
 addUserKnob {26 focus_depth_label l " " -STARTLINE T "achromatic (0) to cusp opposite (1)"}
 addUserKnob {13 compression_params l compression t "the threshold, limit and power parameters for the PowerP compression function\nvalues below the threshold will not be compressed and values at the limit will be compressed towards the gamut boundary while the power values defines the shape of the curve"}
 compression_params {0.75 1.2 1.2}
 addUserKnob {26 compression_params_label l " " -STARTLINE T "threshold / limit / power"}
 addUserKnob {7 smooth_cusps l "smooth cusps" t "the amount by how much to smooth the edges and corners of the limiting gamut cube, except the black & white corners."}
 addUserKnob {3 solve_precision l "solve precision" t "the number of iterations used for finding the gamut boundary using the interval bisection method"}
 solve_precision 10
 addUserKnob {3 inverse_solver_iterations l "inverse solver iterations" t "the number of iterations used for finding the original J & M values when applying the inverse gamut compression"}
 inverse_solver_iterations 10
 addUserKnob {26 output_div l Output}
 addUserKnob {4 encoding_out l encoding t "the output log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 ""}}
 encoding_out sRGB
 addUserKnob {4 primaries_out l primaries t "the output primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 primaries_out P3-D65
 addUserKnob {4 viewing_conditions l "viewing conditions" t "the ZCAM viewing conditions" M {dark dim average ""}}
 addUserKnob {7 reference_luminance l "reference luminance" t "the ZCAM reference luminance in Cd/sqm" R 0 200}
 reference_luminance 100
 addUserKnob {7 background_luminance l "background luminance" t "the ZCAM background luminance in Cd/sqm" R 0 100}
 background_luminance 10
 addUserKnob {6 clamp_output l "clamp output" t "clamp the output values between 0,0 and 1.0" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 _1 l "" +STARTLINE T "Daniele Curve Params"}
 addUserKnob {41 DRT_ZCAM_Kernel_n l n T BlinkScript1.DRT_ZCAM_Kernel_n}
 addUserKnob {41 DRT_ZCAM_Kernel_nr l nr T BlinkScript1.DRT_ZCAM_Kernel_nr}
 addUserKnob {41 DRT_ZCAM_Kernel_g l g T BlinkScript1.DRT_ZCAM_Kernel_g}
 addUserKnob {41 DRT_ZCAM_Kernel_w l w T BlinkScript1.DRT_ZCAM_Kernel_w}
 addUserKnob {41 DRT_ZCAM_Kernel_t_1 l t_1 T BlinkScript1.DRT_ZCAM_Kernel_t_1}
 addUserKnob {26 ""}
 addUserKnob {26 direction_div l Direction}
 addUserKnob {6 invert t "apply the pseudo-inverse transform" +STARTLINE}
 addUserKnob {26 blink_kernel_div l "Blink Kernel"}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
}
 Input {
  inputs 0
  name Input1
  xpos -908
  ypos -294
 }
set N3bd02c00 [stack 0]
 Viewer {
  frame_range 1-16090
  gl_buffer_depth half-float
  name Viewer1
  xpos -638
  ypos -250
 }
push $N3bd02c00
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/ZCAM_DRT_v013.blink
  recompileCount 316
  ProgramGroup 1
  KernelDescription "2 \"DRT_ZCAM_Kernel\" iterate pixelWise 3ff7422ea5817a82c30711c8f3157c7781768779c78e0edbf2f4722eb69208db 2 \"src\" Read Point \"dst\" Write Point 47 \"encodingIn\" Int 1 AAAAAA== \"primariesIn\" Int 1 AAAAAA== \"toneScaleMode\" Int 1 AAAAAA== \"catType\" Int 1 AAAAAA== \"discountIlluminant\" Bool 1 AA== \"referenceLuminance\" Float 1 AAAAAA== \"backgroundLuminance\" Float 1 AAAAAA== \"viewingConditions\" Int 1 AAAAAA== \"applyTonecurve\" Bool 1 AA== \"sstsLuminance\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"applyHighlightDesat\" Bool 1 AA== \"desatHighlights\" Float 1 AAAAAA== \"primariesLimit\" Int 1 AAAAAA== \"applyGamutCompression\" Bool 1 AA== \"cuspMidBlend\" Float 1 AAAAAA== \"focusDistance\" Float 1 AAAAAA== \"compressionFuncParams\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"smoothCusps\" Float 1 AAAAAA== \"boundarySolvePrecision\" Int 1 AAAAAA== \"inverseSolverIterations\" Int 1 AAAAAA== \"encodingOut\" Int 1 AAAAAA== \"primariesOut\" Int 1 AAAAAA== \"clampOutput\" Bool 1 AA== \"invert\" Bool 1 AA== \"XYZ_to_LMS_ZCAM\" Float 9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_rho\" Float 1 AAAAAA== \"Lp\" Float 1 AAAAAA== \"su\" Float 1 AAAAAA== \"c0\" Float 1 AAAAAA== \"cs\" Float 1 AAAAAA== \"c1\" Float 1 AAAAAA== \"p\" Float 1 AAAAAA== \"w1\" Float 1 AAAAAA== \"s1\" Float 1 AAAAAA== \"ex\" Float 1 AAAAAA== \"eb\" Float 1 AAAAAA== \"e0\" Float 1 AAAAAA== \"s0\" Float 1 AAAAAA== \"fl\" Float 1 AAAAAA== \"dch\" Float 1 AAAAAA== \"sat\" Float 1 AAAAAA== \"mmScaleFactor\" Float 1 AAAAAA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== 47 \"encodingIn\" 1 1 \"primariesIn\" 1 1 \"toneScaleMode\" 1 1 \"catType\" 1 1 \"discountIlluminant\" 1 1 \"referenceLuminance\" 1 1 \"backgroundLuminance\" 1 1 \"viewingConditions\" 1 1 \"applyTonecurve\" 1 1 \"sstsLuminance\" 3 1 \"applyHighlightDesat\" 1 1 \"desatHighlights\" 1 1 \"primariesLimit\" 1 1 \"applyGamutCompression\" 1 1 \"cuspMidBlend\" 1 1 \"focusDistance\" 1 1 \"compressionFuncParams\" 3 1 \"smoothCusps\" 1 1 \"boundarySolvePrecision\" 1 1 \"inverseSolverIterations\" 1 1 \"encodingOut\" 1 1 \"primariesOut\" 1 1 \"clampOutput\" 1 1 \"invert\" 1 1 \"XYZ_to_LMS_ZCAM\" 9 1 \"zcam_rho\" 1 1 \"Lp\" 1 1 \"su\" 1 1 \"c0\" 1 1 \"cs\" 1 1 \"c1\" 1 1 \"p\" 1 1 \"w1\" 1 1 \"s1\" 1 1 \"ex\" 1 1 \"eb\" 1 1 \"e0\" 1 1 \"s0\" 1 1 \"fl\" 1 1 \"dch\" 1 1 \"sat\" 1 1 \"mmScaleFactor\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 70 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"zcam_L_A\" Float 1 1 AAAAAA== \"zcam_F_b\" Float 1 1 AAAAAA== \"zcam_F_L\" Float 1 1 AAAAAA== \"zcam_cb\" Float 1 1 AAAAAA== \"zcam_cg\" Float 1 1 AAAAAA== \"zcam_c1\" Float 1 1 AAAAAA== \"zcam_c2\" Float 1 1 AAAAAA== \"zcam_c3\" Float 1 1 AAAAAA== \"zcam_eta\" Float 1 1 AAAAAA== \"zcam_luminance_shift\" Float 1 1 AAAAAA== \"zcam_viewing_conditions_coeff\" Float 1 1 AAAAAA== \"cat_adaptDegree\" Float 1 1 AAAAAA== \"st2084_m_1\" Float 1 1 AAAAAA== \"st2084_m_2\" Float 1 1 AAAAAA== \"st2084_c_1\" Float 1 1 AAAAAA== \"st2084_c_2\" Float 1 1 AAAAAA== \"st2084_c_3\" Float 1 1 AAAAAA== \"st2084_m_1_d\" Float 1 1 AAAAAA== \"st2084_m_2_d\" Float 1 1 AAAAAA== \"st2084_L_p\" Float 1 1 AAAAAA== \"ssts_min_stop_sdr\" Float 1 1 AAAAAA== \"ssts_max_stop_sdr\" Float 1 1 AAAAAA== \"ssts_min_stop_rrt\" Float 1 1 AAAAAA== \"ssts_max_stop_rrt\" Float 1 1 AAAAAA== \"ssts_min_lum_sdr\" Float 1 1 AAAAAA== \"ssts_max_lum_sdr\" Float 1 1 AAAAAA== \"ssts_min_lum_rrt\" Float 1 1 AAAAAA== \"ssts_max_lum_rrt\" Float 1 1 AAAAAA== \"ssts_n_knots_low\" Int 1 1 AAAAAA== \"ssts_n_knots_high\" Int 1 1 AAAAAA== \"ssts_m1\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_minTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_maxTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsLow\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsHigh\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_min_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_mid_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_max_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_knotIncLow\" Float 1 1 AAAAAA== \"ssts_knotIncHigh\" Float 1 1 AAAAAA== \"ssts_pctLow\" Float 1 1 AAAAAA== \"ssts_pctHigh\" Float 1 1 AAAAAA== \"ssts_coefsLow\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_coefsHigh\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_expShift\" Float 1 1 AAAAAA== \"ssts_paramMin\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMid\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMax\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"identity_matrix\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_Bradford\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_CAT02\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"LMS_to_Izazbz\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"d65White\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"inWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"refWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"boundaryRGB\" Float 1 1 AAAAAA== \"limitJmax\" Float 1 1 AAAAAA== \"limitMmax\" Float 1 1 AAAAAA== \"gamutCuspTableSize\" Int 1 1 AAAAAA== \"gamutCuspTableUnsorted\" FloatgamutCuspTable\" FloatfocusDistanceClamped\" Float 1 1 AAAAAA=="
  kernelSource "\nkernel DRT_ZCAM_Kernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    //\n    // Input Parameters\n    //\n\n    // Encoding of the Input Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingIn;\n\n    // Primaries of the Input Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesIn;\n\n\n    // Tonescale mode\n    // 0: SSTS\n    // 1: MMSDC\n    // 2: Daniele Compression Curve\n    int toneScaleMode;\n\n    //\n    // ZCAM Paramters\n    //\n\n    // Chomatic Adaptation Transform to Use\n    // 0: None\n    // 1: XYZ Scaling\n    // 2: Bradford\n    // 3: CAT02\n    // 4: Zhai2018 (two-step)\n    int catType;\n\n    // Disable Degree of Adaptation Model for Zhai2018 CAT\n    // This is only effective if the limit primaries have a non-D65 white point\n    // since the input conversion is assumed to be fully adapted\n    // and the output conversion does not apply a CAT\n    bool discountIlluminant;\n\n    // Reference Luminance in Cd/sqm\n    float referenceLuminance;\n\n    // Background Luminance in Cd/sqm\n    float backgroundLuminance;\n\n    // Viewing Conditions (for output)\n    // 0: Dark\n    // 1: Dim\n    // 2: Average\n    int viewingConditions;\n\n    //\n    // SSTS Parameters\n    //\n\n    // Toggle SSTS Tone Mapping\n    bool applyTonecurve;\n    \n    // SSTS Luminances Min/Mid/Peak\n    float3 sstsLuminance;\n\n    // Toggle Highlight De-Saturation\n    bool applyHighlightDesat;\n\n    // Scale the De-Saturation Applied to the Highlights\n    float desatHighlights;\n\n    //\n    // Gamut Mapping Parameters\n    //\n\n    // Primaries of the Target Gamut\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesLimit;\n\n\n    // Toggle Gamut Compression\n    bool applyGamutCompression;\n\n    // Blend Between Compressing towards\n    // Target Gamut Cusp Luminance (0.0)\n    // and SSTS Mid Luminance (1.0)\n    float cuspMidBlend;\n\n    // the distance of the compression focal point\n    // from the achromatic axis\n    // normalised to the distance of the gamut cusp\n    float focusDistance;\n\n    // Gamut Compression Fuction Parameters\n    // Threshold / Limit / Power\n    float3 compressionFuncParams;\n\n    // How much the edges of the target RGB cube are smoothed when finding the gamut boundary \n    // in order to reduce visible contours at the gamut cusps\n    float smoothCusps;\n\n    // When solving for the target gamut boundary\n    // how many search interval halving steps to perform\n    int boundarySolvePrecision;\n\n    // Number of iterations to converge on the uncompressed J value \n    // Because of the compression focus point changes depending on the J value of the uncompressed sample\n    // we cannot perfectly invert it since the original J value has now been changed by the forward compression\n    // we can converge on a reasonable approximation of the original J value by iterating the inverse compression\n    // although this is quite an expensive operation\n    int inverseSolverIterations;\n\n    //\n    // Output Parameters\n    //\n\n    // Encoding of the Output Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingOut;\n\n    // Primaries of the Output Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesOut;\n\n    // Clamp output values to 0.0 - 1.0\n    bool clampOutput;\n\n    //\n    // Extra Parameters\n    //\n\n    // Toggle Inverse Transform\n    bool invert;\n\n    float3x3 XYZ_to_LMS_ZCAM;\n    float zcam_rho;\n\n\n    // Tonescale select\n    // bool mmTonescaleMode;\n    // OpenDRT tonescale parameters\n    float Lp;\n    float su;\n    float c0;\n    float cs;\n    float c1;\n    float p;\n    float w1;\n    float s1;\n    float ex;\n    float eb;\n    float e0;\n    float s0;\n    float fl;\n    float dch;\n    float sat;\n    float mmScaleFactor;\n\n    // DanieleCompressionCurve tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n  local:\n\n    // constants\n    float HALF_MIN;\n    float HALF_MAX;\n\n    // ZCAM vars\n    float zcam_L_A;\n    float zcam_F_b;\n    float zcam_F_L;\n    float zcam_cb;\n    float zcam_cg;\n    float zcam_c1;\n    float zcam_c2;\n    float zcam_c3;\n    float zcam_eta;\n    // float zcam_rho;\n    float zcam_luminance_shift;\n    float zcam_viewing_conditions_coeff;\n\n    // CAT vars\n    float cat_adaptDegree;\n\n\n    // ST2084 vars\n    float st2084_m_1;\n    float st2084_m_2;\n    float st2084_c_1;\n    float st2084_c_2;\n    float st2084_c_3;\n    float st2084_m_1_d;\n    float st2084_m_2_d;\n    float st2084_L_p;\n\n    // SSTS constants\n    float ssts_min_stop_sdr;\n    float ssts_max_stop_sdr;\n    float ssts_min_stop_rrt;\n    float ssts_max_stop_rrt;\n    float ssts_min_lum_sdr;\n    float ssts_max_lum_sdr;\n    float ssts_min_lum_rrt;\n    float ssts_max_lum_rrt;\n    int ssts_n_knots_low;\n    int ssts_n_knots_high;\n    float3x3 ssts_m1;\n\n    // SSTS tables\n    // using the float4 type to store the two 2D vectors\n    // because Blink does not support generic array assignments\n    float4 ssts_minTable;\n    float4 ssts_maxTable;\n    float4 ssts_bendsLow;\n    float4 ssts_bendsHigh;\n\n    // SSTS parameters\n    float3 ssts_min_pt;\n    float3 ssts_mid_pt;\n    float3 ssts_max_pt;\n    float ssts_knotIncLow;\n    float ssts_knotIncHigh;\n    float ssts_pctLow;\n    float ssts_pctHigh;\n\n    // using the float3x3 type to store the array of 6 coefficients\n    // because Blink does not support generic array assignments\n    float3x3 ssts_coefsLow;\n    float3x3 ssts_coefsHigh;\n\n    float ssts_expShift;\n    float3 ssts_paramMin;\n    float3 ssts_paramMid;\n    float3 ssts_paramMax;\n\n\n    // matrix vars\n    float3x3 identity_matrix;\n    float3x3 XYZ_to_LMS_Bradford;\n    float3x3 XYZ_to_LMS_CAT02;\n    // float3x3 XYZ_to_LMS_ZCAM;\n    float3x3 LMS_to_Izazbz;\n\n    float3x3 XYZ_to_RGB_input;\n    float3x3 XYZ_to_RGB_limit;\n    float3x3 XYZ_to_RGB_output;\n\n    float3x3 RGB_to_XYZ_input;\n    float3x3 RGB_to_XYZ_limit;\n    float3x3 RGB_to_XYZ_output;\n\n    // white points\n    float3 d65White;\n    float3 inWhite;\n    float3 refWhite;\n\n    // the maximum RGB value of the limiting gamut\n    float boundaryRGB;\n\n    // the maximum lightness value of the limiting gamut\n    float limitJmax;\n\n    // the maximum colorfulness value of the limiting gamut\n    float limitMmax;\n\n    // the 1D LUT used for quickly findig the approximate limiting gamut cusp JMh coordinates\n    // the samples are spaced by HSV hue increments of the limiting RGB gamut\n    // so to find the correct entry for a given ZCAM hue (h) value \n    // one must search the table entries for the matching entry.z component\n    int gamutCuspTableSize;\n\n    // the 'gamutCuspTableUnsorted' table is populated\n    // in increments of H of the limiting gamut HSV space starting at H=0.0\n    // since it is unlikely that HSV.H=0 and JMh.h=0 line up\n    // the entries are then wrap-around shifted\n    // so that the 'gamutCuspTable' starts with the lowest JMh.h value\n    // both tables need to be declared here since temporary array variables\n    // in the init() fuction seem to crash Nuke on some systems\n    float3 gamutCuspTableUnsorted\[360];\n    float3 gamutCuspTable\[360];\n\n    // local version of the public focusDistance parameter\n    // this one will be clamped to a value > 0.0\n    float focusDistanceClamped;\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially returned -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n  // convert radians to degrees\n  float degrees( float radians )\n  \{\n    return radians * 180.0f / PI;\n  \}\n\n\n  // convert degrees to radians\n  float radians( float degrees )\n  \{\n    return degrees / 180.0f * PI;\n  \}\n\n\n  // \"PowerP\" compression function (also used in the ACES Reference Gamut Compression transform)\n  // values of v above  'treshold' are compressed by a 'power' function\n  // so that an input value of 'limit' results in an output of 1.0\n  float compressPowerP( float v, float threshold, float limit, float power, int inverse )\n  \{\n    float s = (limit-threshold)/pow(pow((1.0f-threshold)/(limit-threshold),-power)-1.0f,1.0f/power);\n\n    float vCompressed;\n\n    if( inverse )\n    \{\n      vCompressed = (v<threshold||limit<1.0001f||v>threshold+s)?v:threshold+s*pow(-(pow((v-threshold)/s,power)/(pow((v-threshold)/s,power)-1.0f)),1.0f/power);\n    \}\n    else\n    \{\n      vCompressed = (v<threshold||limit<1.0001f)?v:threshold+s*((v-threshold)/s)/(pow(1.0f+pow((v-threshold)/s,power),1.0f/power));\n    \}\n\n    return vCompressed;\n  \}\n\n  // Two-Stage chromatic adaptation transforms as proposed by Zhai, Q., & Luo, M. R. (2018)\n  // https://opg.optica.org/oe/fulltext.cfm?uri=oe-26-6-7724\n  // https://github.com/colour-science/colour/blob/e5fa0790adcc3e5df5fa42ddf2bb75214c8cf59c/colour/adaptation/zhai2018.py\n  float3 CAT_Zhai2018( float3 XYZ_b, float3 XYZ_wb, float3 XYZ_wd, float D_b, float D_d, float3x3 M)\n  \{\n    float3 XYZ_wo = 100.0f;\n    float3 RGB_b = vector_dot(M, XYZ_b);\n    float3 RGB_wb = vector_dot(M, XYZ_wb);\n    float3 RGB_wd = vector_dot(M, XYZ_wd);\n    float3 RGB_wo = vector_dot(M, XYZ_wo);\n    \n    float3 D_RGB_b = D_b * (XYZ_wb.y / XYZ_wo.y) * (RGB_wo / RGB_wb) + 1 - D_b;\n    float3 D_RGB_d = D_d * (XYZ_wd.y / XYZ_wo.y) * (RGB_wo / RGB_wd) + 1 - D_d;\n    float3 D_RGB = D_RGB_b / D_RGB_d;\n    \n    float3 RGB_d = D_RGB * RGB_b;\n    float3 XYZ_d = vector_dot(M.invert(), RGB_d);\n    \n    return XYZ_d;\n  \}\n\n  // apply chromatic adaptation transform to 'XYZ' from 'XYZ_ws' to 'XYZ_wd' white points\n  // 'type' selects the cone fundamentals matrix (except for Zhai2018 which uses a 2-stage tranforms based on CATO2 fundamentals)\n  // 'adaptDegree' sets the degree of adaptation for the Zhai2018 model\n  float3 apply_CAT( float3 XYZ, float3 XYZ_ws, float3 XYZ_wd, int type, float adaptDegree )\n  \{\n    float3x3 XYZ_to_LMS;\n\n    if( type == 1 )\n    \{\n      // XYZ Scaling\n      XYZ_to_LMS = identity_matrix;\n    \}\n    else if( type == 2 )\n    \{\n      // Bradford\n      XYZ_to_LMS = XYZ_to_LMS_Bradford;\n    \}\n    else if( type == 3 )\n    \{\n      // CAT02\n      XYZ_to_LMS = XYZ_to_LMS_CAT02;\n    \}\n    else if( type == 4 )\n    \{\n      // Zhai2018\n      return CAT_Zhai2018(XYZ, XYZ_ws, XYZ_wd, adaptDegree, adaptDegree, XYZ_to_LMS_CAT02);\n    \}\n    else\n    \{\n      // None\n      return XYZ;\n    \}\n\n    float3 LMS_ws = vector_dot(XYZ_to_LMS, XYZ_ws);\n    float3 LMS_wd = vector_dot(XYZ_to_LMS, XYZ_wd);\n\n    // if(LMS_ws.x == 0.0f)\n    // \{\n    //   LMS_ws.x = 0.000001f;\n    // \}\n    // if(LMS_ws.y == 0.0f)\n    // \{\n    //   LMS_ws.y = 0.000001f;\n    // \}\n    // if(LMS_ws.z == 0.0f)\n    // \{\n    //   LMS_ws.z = 0.000001f;\n    // \}\n\n    float3x3 Mscale = identity_matrix;\n    Mscale\[0]\[0] = LMS_wd.x / LMS_ws.x;\n    Mscale\[1]\[1] = LMS_wd.y / LMS_ws.y;\n    Mscale\[2]\[2] = LMS_wd.z / LMS_ws.z;\n\n    float3x3 M = XYZ_to_LMS.invert() * Mscale * XYZ_to_LMS;\n\n    return vector_dot(M, XYZ);\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM intermediate Izazbz colorspace\n  float3 XYZ_to_Izazbz( float3 XYZD65 )\n  \{\n    float3 XYZpD65 = XYZD65;\n    XYZpD65.x = zcam_cb * XYZD65.x - (zcam_cb - 1.0f) * XYZD65.z;\n    XYZpD65.y = zcam_cg * XYZD65.y - (zcam_cg - 1.0f) * XYZD65.x;\n    float3 LMS = vector_dot(XYZ_to_LMS_ZCAM, XYZpD65);\n    float3 LMSp = 0.0f;\n    LMSp.x = spow( ( zcam_c1 + zcam_c2 * spow((LMS.x/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.x/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.y = spow( ( zcam_c1 + zcam_c2 * spow((LMS.y/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.y/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.z = spow( ( zcam_c1 + zcam_c2 * spow((LMS.z/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.z/10000.0f),zcam_eta) ), zcam_rho);\n    float3 Izazbz = vector_dot(LMS_to_Izazbz, LMSp);\n    // return float3(LMS_to_Izazbz\[0]\[0], LMS_to_Izazbz\[0]\[1], LMS_to_Izazbz\[0]\[2]);\n    return Izazbz;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to XYZ tristimulus values\n  float3 Izazbz_to_XYZ( float3 Izazbz )\n  \{\n    float3 LMSp = vector_dot(LMS_to_Izazbz.invert(), Izazbz);\n    float3 LMS = 0.0f;\n    LMS.x = 10000.0f*spow((zcam_c1-spow(LMSp.x,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.x,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.y = 10000.0f*spow((zcam_c1-spow(LMSp.y,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.y,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.z = 10000.0f*spow((zcam_c1-spow(LMSp.z,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.z,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    float3 XYZpD65 = vector_dot(XYZ_to_LMS_ZCAM.invert(), LMS);\n    float3 XYZD65 = XYZpD65;\n    XYZD65.x = (XYZpD65.x+(zcam_cb-1.0f)*XYZpD65.z)/zcam_cb;\n    XYZD65.y = (XYZpD65.y+(zcam_cg-1.0f)*XYZD65.x)/zcam_cg;\n    return XYZD65;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 Izazbz_to_JMh( float3 Izazbz, float refWhiteIz, int viewingConditions )\n  \{\n    float3 JMh = 0.0f;\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n\n    JMh.z = fmod(degrees(atan2(Izazbz.z,Izazbz.y))+360.0f,360.0f);\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float Qz  = 2700.0f * spow(Izazbz.x,   (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    JMh.x = 100.0f * (Qz / Qzw);\n    JMh.y = 100.0f * spow((spow(Izazbz.y, 2.0f) + spow(Izazbz.z, 2.0f)), 0.37f) * ((spow(ez, 0.068f) * pow(zcam_F_L, 0.2f)) / (pow(zcam_F_b, 0.1f) * pow(refWhiteIz, 0.78f)));\n\n    return JMh;\n    // return float3(Qz, Qzw, JMh.z);\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to the ZCAM intermediate Izazbz colorspace\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 JMh_to_Izazbz( float3 JMh, float refWhiteIz, int viewingConditions )\n  \{\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n    float Qzm = spow(zcam_F_s, 2.2f) * spow(zcam_F_b, 0.5f) * spow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / spow(zcam_F_b, 0.12f)) * Qzm;\n    float Izp = spow(zcam_F_b, 0.12f) / (1.6f * zcam_F_s);\n    float Izd = 2700.0f * 100.0f * Qzm;\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float hzr = radians(JMh.z);\n    float Czp = spow((JMh.y * spow(refWhiteIz, 0.78f) * spow(zcam_F_b, 0.1f)) / (100.0f * spow(ez, 0.068f) * spow(zcam_F_L, 0.2f)), 50.0f / 37.0f);\n\n    return float3( spow((JMh.x * Qzw) / Izd, Izp), Czp * cos(hzr), Czp * sin(hzr));\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 XYZ_to_ZCAM_JMh( float3 XYZ, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    return Izazbz_to_JMh(XYZ_to_Izazbz(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree)), refWhiteIzazbz.x, viewingConditions);\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to XYZ tristimulus values\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 ZCAM_JMh_to_XYZ( float3 JMh, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    return apply_CAT(Izazbz_to_XYZ(JMh_to_Izazbz(JMh, refWhiteIzazbz.x, viewingConditions)), d65White, refWhite, catType, cat_adaptDegree);\n  \}\n\n\n  // check if the 3D point 'v' is inside a cube with the dimensions cubeSize x cubeSize x cubeSize \n  // the 'smoothing' parameter rounds off the edges and corners of the cube with the exception of the 0,0,0 and cubeSize x cubeSize x cubeSize corners\n  // a smoothing value of 0.0 applies no smoothing and 1.0 the maximum amount (smoothing values > 1.0 result in undefined behavior )\n  int isInsideCube( float3 v, float cubeSize, float smoothing)\n  \{\n    float3 normv = v / cubeSize;\n\n    float minv = min(normv.x, min(normv.y, normv.z));\n    float maxv = max(normv.x, max(normv.y, normv.z));\n\n    if( smoothing <= 0.0f )\n    \{\n      // when not smoothing we can use a much simpler test\n      if(minv < 0.0f || maxv > 1.0f)\n      \{\n        return 0;\n      \}\n\n      return 1;\n    \}\n\n    float3 clamped = normv;\n\n    float radius = smoothing/2.0f;\n\n    radius = clamp(radius*maxv*(1.0f-minv), 0.0f, radius);\n\n    clamped.x = clamp(normv.x, radius, 1.0f-radius);\n    clamped.y = clamp(normv.y, radius, 1.0f-radius);\n    clamped.z = clamp(normv.z, radius, 1.0f-radius);\n\n\n    if( length(normv - clamped ) > radius)\n    \{\n      return 0;\n    \}\n\n    return 1;\n  \}\n\n  // convert ACEScct encoded values to linear\n  float ACEScct_to_linear( float v )\n  \{\n    return v > 0.155251141552511f ? spow( 2.0f, v * 17.52f - 9.72f) : (v - 0.0729055341958355f) / 10.5402377416545f;\n  \}\n\n  // encode linear values as ACEScct\n  float linear_to_ACEScct( float v )\n  \{\n    return v > 0.0078125f ? (log2(v) + 9.72f) / 17.52f : 10.5402377416545f * v + 0.0729055341958355f;\n  \}\n\n\n  // convert sRGB gamma encoded values to linear\n  float sRGB_to_linear( float v )\n  \{\n    return v < 0.04045f ? v / 12.92f : spow((v + 0.055f) / 1.055f, 2.4f);\n  \}\n\n  // encode linear values as sRGB gamma\n  float linear_to_sRGB( float v )\n  \{\n    return v <= 0.0031308f ? 12.92f * v : 1.055 * (spow(v, 1.0f / 2.4f)) - 0.055f;\n  \}\n\n  // convert ST2084 PQ encoded values to linear\n  float ST2084_to_linear( float v )\n  \{\n    float V_p = spow(v, st2084_m_2_d);\n    return spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p;\n  \}\n\n  // encode linear values as ST2084 PQ\n  float linear_to_ST2084( float v )\n  \{\n    float Y_p = spow(max(0.0f, v) / st2084_L_p, st2084_m_1);\n\n    return spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);\n  \}\n\n  // decode value 'v' with the inverse of the selected encoding fuction to luminance\n  float encodingToLuminance(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return ACEScct_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return sRGB_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v, 2.4f) * referenceLuminance;\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v, 2.6f) * referenceLuminance;\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return ST2084_to_linear(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v * referenceLuminance;\n    \}\n  \}\n\n  // decode the components of a 3D vector 'v' with the inverse of the selected encoding fuction to luminance\n  float3 encodingToLuminance3(int encoding, float3 v)\n  \{\n    float3 lin;\n    lin.x = encodingToLuminance(encoding, v.x);\n    lin.y = encodingToLuminance(encoding, v.y);\n    lin.z = encodingToLuminance(encoding, v.z);\n\n    return lin;\n  \}\n\n  // encode the linear luminance value 'v' with the encoding fuction selected by 'encoding'\n  float luminanceToEncoding(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return linear_to_ACEScct(v / referenceLuminance);\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return linear_to_sRGB(v / referenceLuminance);\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v / referenceLuminance, 1.0f/2.4f);\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v / referenceLuminance, 1.0f/2.6f);\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return linear_to_ST2084(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v / referenceLuminance;\n    \}\n  \}\n\n  // encode the linear luminance value components of a 3D vector 'v' with the encoding fuction selected by 'encoding'\n  float3 luminanceToEncoding3(int encoding, float3 v)\n  \{\n    float3 enc;\n    enc.x = luminanceToEncoding(encoding, v.x);\n    enc.y = luminanceToEncoding(encoding, v.y);\n    enc.z = luminanceToEncoding(encoding, v.z);\n\n    return enc;\n  \}\n\n\n  // convert RGB values in the input colorspace to the ZCAM intermediate Izazbz colorspace\n  float3 input_RGB_to_Izazbz(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    return XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n  \}\n\n\n  // convert values in the ZCAM intermediate Izazbz colorspace to RGB values in the input colorspace\n  float3 Izazbz_to_input_RGB(float3 Izazbz)\n  \{\n    float3 luminanceXYZ = Izazbz_to_XYZ(Izazbz);\n    luminanceXYZ = apply_CAT(luminanceXYZ, d65White, inWhite, catType, 1.0f);\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 RGB = luminanceToEncoding3(encodingIn, luminanceRGB);\n    return RGB;\n  \}\n\n  // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 output_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n    float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n    float3 JMh = XYZ_to_ZCAM_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n  float3 JMh_to_output_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = ZCAM_JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n    if( clampOutput )\n    \{\n      outputRGB = clamp3(outputRGB, 0.0f, 1.0f);\n    \}\n\n    return outputRGB;\n  \}\n\n\n  // convert linear RGB values with the limiting primaries to ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 limit_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = RGB * boundaryRGB *referenceLuminance;\n    float3 XYZ = vector_dot(RGB_to_XYZ_limit, luminanceRGB);\n    float3 JMh = XYZ_to_ZCAM_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to linear RGB values with the limiting primaries\n  float3 JMh_to_limit_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = ZCAM_JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 RGB = luminanceRGB / boundaryRGB / referenceLuminance;\n    return RGB;\n  \}\n\n\n  // convert HSV cylindrical projection values to RGB\n  float3 HSV_to_RGB( float3 HSV )\n  \{\n    float C = HSV.z*HSV.y;\n    float X = C*(1.0f-fabs(fmod(HSV.x*6.0f,2.0f)-1.0f));\n    float m = HSV.z-C;\n\n    float3 RGB;\n    RGB.x = (HSV.x<1.0f/6.0f?  C :HSV.x<2.0f/6.0f?  X :HSV.x<3.0f/6.0f?0.0f:HSV.x<4.0f/6.0f?0.0f:HSV.x<5.0f/6.0f?  X :  C )+m;\n    RGB.y = (HSV.x<1.0f/6.0f?  X :HSV.x<2.0f/6.0f?  C :HSV.x<3.0f/6.0f?  C :HSV.x<4.0f/6.0f?  X :HSV.x<5.0f/6.0f?0.0f:0.0f)+m;\n    RGB.z = (HSV.x<1.0f/6.0f?0.0f:HSV.x<2.0f/6.0f?0.0f:HSV.x<3.0f/6.0f?  X :HSV.x<4.0f/6.0f?  C :HSV.x<5.0f/6.0f?  C :  X )+m;\n    return RGB;\n  \}\n\n\n  // convert RGB to HSV cylindrical projection values\n  float3 RGB_to_HSV( float3 RGB )\n  \{\n    float cmax = max(RGB.x,max(RGB.y,RGB.z));\n    float cmin = min(RGB.x,min(RGB.y,RGB.z));\n    float delta = cmax-cmin;\n\n    float3 HSV;\n    HSV.x = delta==0.0f?0.0f:cmax==RGB.x?(fmod((RGB.y-RGB.z)/delta+6.0f,6.0f))/6.0f:cmax==RGB.y?(((RGB.z-RGB.x)/delta+2.0f)/6.0f):(((RGB.x-RGB.y)/delta+4.0f)/6.0f);\n    HSV.y = cmax == 0.0f ? 0.0f : delta / cmax;\n    HSV.z = cmax;\n    return HSV;\n  \}\n\n\n  // retrieve the JM coordinates of the limiting gamut cusp at the hue slice 'h'\n  // cusps are very expensive to compute\n  // and the DRT is only using them for lightness mapping\n  // which does not require a high degree of accuracy\n  // so instead we use a pre-computed table of cusp points\n  // sampled at 1 degree hue intervals of the the RGB target gamut\n  // and lerp between them to get the approximate J & M values\n  float2 cuspFromTable(float h)\n  \{\n\n    float3 lo;\n    float3 hi;\n\n    if( h <= gamutCuspTable\[0].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      lo.z = lo.z-360.0f;\n      hi = gamutCuspTable\[0];\n    \}\n    else if( h >= gamutCuspTable\[gamutCuspTableSize-1].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      hi = gamutCuspTable\[0];\n      hi.z = hi.z+360.f;\n    \}\n    else\n    \{\n      for(int i = 1; i < gamutCuspTableSize; ++i)\n      \{\n        if( h <= gamutCuspTable\[i].z )\n        \{\n          lo = gamutCuspTable\[i-1];\n          hi = gamutCuspTable\[i];\n          break;\n        \}\n      \}\n    \}\n\n    float t = (h - lo.z) / (hi.z - lo.z);\n\n    float cuspJ = lerp(lo.x, hi.x, t);\n    float cuspM = lerp(lo.y, hi.y, t);\n\n    return float2(cuspJ,cuspM);\n  \}\n\n\n  // find the JM coordinates of the smoothed boundary of the limiting gamut in ZCAM at the hue slice 'h' \n  // by searching along the line defined by 'JMSource' and 'JMFocus'\n  // the function will search outwards from where the line intersects the achromatic axis with a staring incement of 'startStepSize'\n  // once the boundary has been crossed it will search in the opposite direction with half the step size\n  // and will repeat this as as many times as is set by the 'precision' paramter\n  float2 findBoundary(float2 JMSource, float2 JMFocus, float h, float3 XYZw, float3 XYZd65, float3x3 XYZ_to_RGB, float smoothing, int precision, float startStepSize )\n  \{\n\n    float2 achromaticIntercept = float2(JMFocus.x - (((JMSource.x-JMFocus.x) / (JMSource.y-JMFocus.y))*JMFocus.y), 0.0f);\n\n    if( achromaticIntercept.x <= 0.0f || achromaticIntercept.x >= limitJmax )\n    \{\n       return achromaticIntercept;\n    \}\n\n\n    float stepSize = startStepSize;\n    float2 unitVector = normalize(achromaticIntercept - JMFocus);\n    float2 JMtest = achromaticIntercept;\n    int searchOutwards = 1;\n\n    for( int i = 0; i < precision; ++i )\n    \{\n\n      while( 1 )\n      \{\n        JMtest = JMtest + unitVector * stepSize;\n        int inside = isInsideCube( vector_dot(XYZ_to_RGB, ZCAM_JMh_to_XYZ( float3(JMtest.x, JMtest.y, h), XYZw, XYZd65, viewingConditions ) / referenceLuminance ), boundaryRGB, smoothing);\n\n        if( searchOutwards )\n        \{\n          if( JMtest.x < 0.0f || JMtest.x > limitJmax || JMtest.y > limitMmax || !inside )\n          \{\n            searchOutwards = 0;\n            stepSize = -fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n        else\n        \{\n          if( JMtest.y < 0.0f || inside )\n          \{\n            searchOutwards = 1;\n            stepSize = fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n      \}\n    \}\n\n\n    float2 JMboundary = float2( clamp(JMtest.x, 0.0f, limitJmax), clamp(JMtest.y, 0.0f, limitMmax) );\n\n    return JMboundary;\n  \}\n\n\n  // apply the forward ACES SingleStageToneScale (SSTS) transform to the linear 'x' input value and return a luminance value\n  float forwardSSTS(float x, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    // Check for negatives or zero before taking the log. If negative or zero,\n    // set to HALF_MIN.\n    float logx = log10( max(x, HALF_MIN )); \n\n    float logy;\n\n    if( logx <= log10(minPt.x) )\n    \{ \n        logy = logx * minPt.z + ( log10(minPt.y) - minPt.z * log10(minPt.x) );\n    \}\n    else if(( logx > log10(minPt.x) ) && ( logx < log10(midPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(minPt.x)) / (log10(midPt.x) - log10(minPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsLow\[j/3]\[j%3], ssts_coefsLow\[(j+1)/3]\[(j+1)%3], ssts_coefsLow\[(j+2)/3]\[(j+2)%3]);\n        float3 monomials( t * t, t, 1.0f );\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else if(( logx >= log10(midPt.x) ) && ( logx < log10(maxPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(midPt.x)) / (log10(maxPt.x) - log10(midPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsHigh\[j/3]\[j%3], ssts_coefsHigh\[(j+1)/3]\[(j+1)%3], ssts_coefsHigh\[(j+2)/3]\[(j+2)%3]); \n        float3 monomials(t * t, t, 1.0f);\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else\n    \{\n        logy = logx * maxPt.z + ( log10(maxPt.y) - maxPt.z * log10(maxPt.x) );\n    \}\n\n    return spow(10.0f,logy);\n  \}\n\n// Michalis Menton Dual Spring Curve\n  float forwardMmTonescale(float x)\n  \{\n      float tc = 0.0f;\n      if (x<0.18)\n      \{\n          tc = cs*spow(x,c0);\n      \}\n      else\n      \{\n          tc = c0*(x-0.18)+0.18;\n      \}\n      \n      float ts = s1*spow((tc/(s0+tc)),p);\n      float tf = ts*ts/(ts+fl);\n      float ccf = spow(s0/(x+s0),dch)*sat;\n\n      return tf;\n  \}\n\n  float inverseMmTonescale(float x)\n  \{\n\n      float tf = (x+sqrt(x*(4*fl+x)))/2;\n      float ts = s0/(spow((s1/tf),(1/p))-1);\n      float tc = 0.0f;\n      if (ts<0.18)\n      \{\n          tc = spow((ts/cs),(1/c0));\n      \}\n      else\n      \{\n          tc = (ts-0.18)/c0+0.18;\n      \}\n      float ccf = spow(s0/(tc+s0),dch)*sat;\n\n      return tc;\n  \}\n\n  // Daniele's Compression Curve\n  // https://www.desmos.com/calculator/fihdxfot6s\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Scale Data\n    //   x = x / n;\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n      \n      //  Scale Data\n    //   h = h * n;\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n        float m0 = n / nr;\n        float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n        float s_1 = w * pow(m,1.0f/g);\n        \n        // inverted version of forwardDanieleCompressionCurve\n\n\n\n        // // Scale Data\n        //  x = x / n;\n\n        float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n        float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n        // // Rescale data down\n        // x = x * n;\n\n      return new_x;\n  \}\n\n\n\n  \n  // apply the inverse ACES SingleStageToneScale (SSTS) transfomr to the 'x' luminance value and return an linear value\n  float inverseSSTS(float y, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    float KNOT_INC_LOW  = (log10(midPt.x) - log10(minPt.x)) / 3.0f;\n    float KNOT_INC_HIGH = (log10(maxPt.x) - log10(midPt.x)) / 3.0f;\n\n    // KNOT_Y is luminance of the spline at each knot\n    float KNOT_Y_LOW\[4];\n\n   for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_LOW\[i] = ( ssts_coefsLow\[i/3]\[i%3] + ssts_coefsLow\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float KNOT_Y_HIGH\[ 4];\n\n    for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_HIGH\[i] = ( ssts_coefsHigh\[i/3]\[i%3] + ssts_coefsHigh\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float logy = log10( max(y, 0.0000000001f));\n\n    float logx;\n\n    if( logy <= log10(minPt.y) )\n    \{\n        logx = log10(minPt.x);\n\n    \}\n    else if( (logy > log10(minPt.y)) && (logy <= log10(midPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy > KNOT_Y_LOW\[0] && logy <= KNOT_Y_LOW\[1])\n        \{\n          cf.x = ssts_coefsLow\[0]\[0];\n          cf.y = ssts_coefsLow\[0]\[1];\n          cf.z = ssts_coefsLow\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_LOW\[1] && logy <= KNOT_Y_LOW\[2])\n        \{\n          cf.x = ssts_coefsLow\[0]\[1];\n          cf.y = ssts_coefsLow\[0]\[2];\n          cf.z = ssts_coefsLow\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_LOW\[2] && logy <= KNOT_Y_LOW\[3])\n        \{\n          cf.x = ssts_coefsLow\[0]\[2];\n          cf.y = ssts_coefsLow\[1]\[0];\n          cf.z = ssts_coefsLow\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(minPt.x) + ( t + j) * KNOT_INC_LOW;\n\n    \}\n    else if( (logy > log10(midPt.y)) && (logy < log10(maxPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy >= KNOT_Y_HIGH\[0] && logy <= KNOT_Y_HIGH\[1])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[0];\n          cf.y = ssts_coefsHigh\[0]\[1];\n          cf.z = ssts_coefsHigh\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_HIGH\[1] && logy <= KNOT_Y_HIGH\[2])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[1];\n          cf.y = ssts_coefsHigh\[0]\[2];\n          cf.z = ssts_coefsHigh\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_HIGH\[2] && logy <= KNOT_Y_HIGH\[3])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[2];\n          cf.y = ssts_coefsHigh\[1]\[0];\n          cf.z = ssts_coefsHigh\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(midPt.x) + ( t + j) * KNOT_INC_HIGH;\n\n    \}\n    else\n    \{\n        logx = log10(maxPt.x);\n\n    \}\n\n    return spow(10.0f, logx);\n  \}\n\n\n  // convert Iz to luminance\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float IzToLuminance( float Iz )\n  \{\n    float V_p = spow(Iz, 1.0f / zcam_rho);\n    float luminance = spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p * zcam_luminance_shift;\n    return luminance;\n  \}\n\n\n  // convert luminance to Iz\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float luminanceToIz( float luminance )\n  \{\n    float Y_p = spow((luminance/zcam_luminance_shift) / st2084_L_p, st2084_m_1);\n    float Iz = spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), zcam_rho);\n    return Iz;\n  \}\n\n\n  // calculate a scale factor for colorfulness\n  // based on the difference between the original and tone scaled (TS) Iz values\n  // we are only interested in the differences above mid grey\n  // so we first offset the original Iz values to align 18% it with the mid point of the IzTS value\n  float highlightDesatFactor( float Iz, float IzTS )\n  \{\n\n    float linear = IzToLuminance(Iz) / referenceLuminance;\n\n    // no highlight desat below SSTS mid point\n    if( linear < 0.18f )\n    \{\n      return 1.0f;\n    \}\n\n    float IzMid   = luminanceToIz(0.18f * referenceLuminance);\n    float IzMidTS = luminanceToIz(sstsLuminance.y);\n\n    float IzAligned = Iz + IzMidTS - IzMid;\n\n    float desatFactor = 1.0f - clamp( compressPowerP( (log10(max(HALF_MIN, IzAligned)) - log10(max(HALF_MIN, IzTS))) * desatHighlights, compressionFuncParams.x, HALF_MAX, compressionFuncParams.z, 0 ), 0.0f, 1.0f);\n\n    return desatFactor;\n  \}\n\n\n  float3 forwardTonescale( float3 inputIzazbz )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n\n    if( ! applyTonecurve && ! applyHighlightDesat )\n    \{\n      // nothing to do here except converting to JMh\n      return Izazbz_to_JMh(inputIzazbz, refWhiteIzazbz.x, 0);\n    \}\n\n    float linear = IzToLuminance(inputIzazbz.x) / referenceLuminance;\n\n    float luminanceTS = 50.0f;\n\n    // switch for applying the different tonescale compression functions\n    if( toneScaleMode == 1 )\n    \{\n        luminanceTS = forwardMmTonescale(linear) * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        luminanceTS = forwardDanieleCompressionCurve(linear)  * mmScaleFactor;\n    \}\n    else\n    \{\n        luminanceTS =  forwardSSTS(linear, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n\n    float IzTS = luminanceToIz(luminanceTS);\n\n    float3 outputIzazbz = inputIzazbz;\n\n    if( applyTonecurve )\n    \{\n      outputIzazbz.x = IzTS;\n    \}\n\n    // convert the result to JMh\n    float3 outputJMh = Izazbz_to_JMh(outputIzazbz, refWhiteIzazbz.x, 0);\n\n    if( applyHighlightDesat )\n    \{\n      float factM = highlightDesatFactor(inputIzazbz.x, IzTS);\n      outputJMh.y = outputJMh.y * factM;\n    \}\n\n    return outputJMh;\n  \}\n\n\n  float3 inverseTonescale( float3 JMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    float3 Izazbz = JMh_to_Izazbz(JMh, refWhiteIzazbz.x, 0);\n\n    if( ! applyTonecurve && ! applyHighlightDesat )\n    \{\n      // nothing else to do here\n      return Izazbz;\n    \}\n\n    float luminance = IzToLuminance(Izazbz.x);\n\n    // Dummy value to init the var\n    float linear = 50.0f;\n    // swtich for testing out the MM tonescale from Jed\n    if( toneScaleMode == 1 )\n    \{\n        linear = inverseMmTonescale(luminance/mmScaleFactor);\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        linear = inverseDanieleCompressionCurve(luminance/mmScaleFactor);\n    \}\n    else\n    \{\n        linear = inverseSSTS(luminance, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n \n    \n    \n    float Iz = luminanceToIz(linear*referenceLuminance);\n\n    if( applyHighlightDesat )\n    \{\n      float factM = highlightDesatFactor(Iz, Izazbz.x);\n      JMh.y = JMh.y / factM;\n      Izazbz = JMh_to_Izazbz(JMh, refWhiteIzazbz.x, 0);\n      luminance = IzToLuminance(Izazbz.x);\n      if( toneScaleMode == 1 )\n      \{\n        linear = inverseMmTonescale(luminance/mmScaleFactor);\n      \}\n      else if( toneScaleMode == 2 )\n      \{\n        linear = inverseDanieleCompressionCurve(luminance/mmScaleFactor);\n      \}\n      else\n      \{\n        linear = inverseSSTS(luminance, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n      \}\n      Iz = luminanceToIz(linear*referenceLuminance);\n    \}\n\n    if( applyTonecurve )\n    \{\n      Izazbz.x = Iz;\n    \}\n\n    return Izazbz;\n  \}\n\n\n  // compress the ZCAM JM values into the limiting gamut by projecting them towards a focus point beyond the achromatic axis\n  // in order to avoid the gamut compression to also compress black and white tones towards the focus point\n  // (which would result in lifed blacks and crushed highlights)\n  // we offset the focus further away from the achromatic axis the closer the lightness of a sample is to the zero or the limitJmax value\n  // a far away focus point means the compression vector becomes close to orthogonal to the lightness axis preserving black & white lightness\n  // the 'distanceGainCalcJ' paramter should be set to inputJMh.x for the forward direction\n  // and to the best guess of the original, uncompressed values for the inverse direction\n  // this is used for iteratively converging on the original, uncompressed value of J which would have gotten obfuscated by the forward transform\n  float3 compressGamut( float3 inputJMh, int invert, float distanceGainCalcJ )\n  \{\n    if( ! applyGamutCompression )\n    \{\n      return inputJMh;\n    \}\n\n    float sstsMidJ = XYZ_to_ZCAM_JMh( refWhite * sstsLuminance.y, refWhite, d65White, viewingConditions ).x;\n    float2 JMinput = float2(inputJMh.x, inputJMh.y);\n    float2 JMcusp = cuspFromTable( inputJMh.z);\n\n    float focusJ = lerp(JMcusp.x, sstsMidJ, cuspMidBlend);\n\n    float focusDistanceGain = 1.0f;\n\n    if( distanceGainCalcJ > focusJ )\n    \{\n      focusDistanceGain = (limitJmax - focusJ) / max(0.0001f, (limitJmax - min(limitJmax, distanceGainCalcJ)));\n    \}\n    else\n    \{\n      focusDistanceGain = (focusJ) / max(0.0001f, distanceGainCalcJ); \n    \}\n\n    float2 JMfocus = float2( focusJ, -JMcusp.y*focusDistanceClamped*focusDistanceGain );\n    float2 vecToFocus = (JMfocus - JMinput);\n    float2 achromaticIntercept = float2(JMfocus.x - (((JMinput.x-JMfocus.x) / (JMinput.y-JMfocus.y))*JMfocus.y), 0.0f);\n\n    // to reduce the number of expensive boundary finding iterations needed\n    // we taking an educated guess at a good starting step size\n    // based on how far the sample is either above or below the gamut cusp\n    float cuspToTipRatio;\n    if( JMinput.x > JMcusp.x )\n    \{\n      cuspToTipRatio = (JMinput.x - JMcusp.x) / (limitJmax - JMcusp.x);\n    \}\n    else\n    \{\n      cuspToTipRatio = (JMcusp.x - JMinput.x) / (JMcusp.x);\n    \}\n\n    float startStepSize = lerp(JMcusp.y / 3.0f, 0.1f, cuspToTipRatio);\n    float2 JMboundary = findBoundary(JMinput, JMfocus,  inputJMh.z, refWhite, d65White, XYZ_to_RGB_limit, smoothCusps, boundarySolvePrecision, startStepSize);\n    float normFact = 1.0f / max(0.0001f, length(JMboundary - achromaticIntercept));\n    float v = length(JMinput-achromaticIntercept) * normFact;\n    float vCompressed = compressPowerP(v, compressionFuncParams.x, compressionFuncParams.y, compressionFuncParams.z, invert);\n    float2 JMcompressed = 0.0f;\n    // hack to stop nan values after compression\n    if (JMinput.y != 0.0f)\n    \{\n      JMcompressed = achromaticIntercept + normalize(JMinput-achromaticIntercept)*vCompressed/normFact;\n    \}\n    else\n    \{\n      JMcompressed = JMinput;\n    \}\n    return float3(JMcompressed.x, JMcompressed.y, inputJMh.z);\n  \}\n\n\n  // apply the forward gamut compression to the limiting primaries\n  float3 compressGamutForward( float3 JMh )\n  \{\n    float3 JMhcompressed = compressGamut( JMh, 0, JMh.x );\n    // Hack to deal with weird zero values on output\n    // JMhcompressed.x = min(300.0f,JMhcompressed.x);\n    return JMhcompressed;\n  \}\n\n\n  // apply the inverse gamut compression\n  // and iterate a given number of times to reconstruct the original J value\n  float3 compressGamutInverse( float3 JMh )\n  \{\n    float3 JMhuncompressed;\n    float distanceGainCalcJ = JMh.x;\n\n    for( int i = 0; i < inverseSolverIterations; ++i )\n    \{\n      JMhuncompressed = compressGamut( JMh, 1, distanceGainCalcJ );\n      distanceGainCalcJ = JMhuncompressed.x;\n    \}\n\n    return JMhuncompressed;\n  \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    zcam_L_A = referenceLuminance * backgroundLuminance / 100.0f;\n    zcam_F_b = sqrt(backgroundLuminance/referenceLuminance);\n    zcam_F_L = 0.171f*spow(zcam_L_A, 1.0f/3.0f) * (1.0f-exp(-48.0f/9.0f*zcam_L_A));\n\n    if( discountIlluminant )\n    \{\n      cat_adaptDegree = 1.0f;\n    \}\n    else\n    \{\n      float viewingConditionsCoeff = 1.0f;\n\n      if( viewingConditions == 0 )\n      \{\n        viewingConditionsCoeff = 0.8f;\n      \}\n      else if( viewingConditions == 1 )\n      \{\n        viewingConditionsCoeff = 0.9f;\n      \}\n      else if( viewingConditions == 2 )\n      \{\n        viewingConditionsCoeff = 1.0f;\n      \}\n\n      cat_adaptDegree = viewingConditionsCoeff * (1.0f - (1.0f / 3.6f) * exp((-zcam_L_A - 42.0f) / 92.0f));\n    \}\n\n    zcam_cb  = 1.15f;\n    zcam_cg  = 0.66f;\n    zcam_c1  = 3424.0f / spow(2.0f,12.0f);\n    zcam_c2  = 2413.0f / spow(2.0f, 7.0f);\n    zcam_c3  = 2392.0f / spow(2.0f, 7.0f);\n    zcam_eta = 2610.0f / spow(2.0f,14.0f);\n    // zcam_rho = 1.7f * 2323.0f / pow(2.0f,5.0f);\n    zcam_luminance_shift = 1.0f / (-0.20151000f + 1.12064900f + 0.05310080f);\n\n    zcam_viewing_conditions_coeff = 1.0f;\n\n    if( viewingConditions == 0 )\n    \{\n      zcam_viewing_conditions_coeff = 0.525f;\n    \}\n    else if( viewingConditions == 1 )\n    \{\n      zcam_viewing_conditions_coeff = 0.59f;\n    \}\n    else if( viewingConditions == 2 )\n    \{\n      zcam_viewing_conditions_coeff = 0.69f;\n    \}\n\n    st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);\n    st2084_m_2=2523.0f / 4096.0f * 128.0f;\n    st2084_c_1=3424.0f / 4096.0f;\n    st2084_c_2=2413.0f / 4096.0f * 32.0f;\n    st2084_c_3=2392.0f / 4096.0f * 32.0f;\n    st2084_m_1_d = 1.0f / st2084_m_1;\n    st2084_m_2_d = 1.0f / st2084_m_2;\n    st2084_L_p = 10000.0f;\n\n    ssts_min_stop_sdr =  -6.5f;\n    ssts_max_stop_sdr =   6.5f;\n    ssts_min_stop_rrt = -15.0f;\n    ssts_max_stop_rrt =  18.0f;\n    ssts_min_lum_sdr = 0.02f;\n    ssts_max_lum_sdr = 48.0f;\n    ssts_min_lum_rrt = 0.0001f;\n    ssts_max_lum_rrt = 10000.0f;\n    ssts_n_knots_low = 4;\n    ssts_n_knots_high = 4;\n\n    ssts_minTable = float4(log10(ssts_min_lum_rrt), ssts_min_stop_rrt, log10(ssts_min_lum_sdr), ssts_min_stop_sdr);\n    ssts_maxTable = float4(log10(ssts_max_lum_sdr), ssts_max_stop_sdr, log10(ssts_max_lum_rrt), ssts_max_stop_rrt);\n    ssts_bendsLow = float4(ssts_min_stop_rrt, 0.18f, ssts_min_stop_sdr, 0.35f);\n    ssts_bendsHigh = float4(ssts_max_stop_sdr, 0.89f, ssts_max_stop_rrt, 0.90f);\n\n    float ssts_m1_data\[]=\{ 0.5f,-1.0f, 0.5f,\n                          -1.0f, 1.0f, 0.0f,\n                           0.5f, 0.5f, 0.0f \};\n    ssts_m1.setArray(ssts_m1_data);\n\n    ssts_min_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_minTable, log10(sstsLuminance.x)));\n    ssts_min_pt.y = sstsLuminance.x;\n    ssts_min_pt.z = 0.0f;\n\n    ssts_mid_pt = float3(0.18f, 4.8f, 1.55f);\n\n    ssts_max_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_maxTable, log10(sstsLuminance.z)));\n    ssts_max_pt.y = sstsLuminance.z;\n    ssts_max_pt.z = 0.0f;\n\n    ssts_knotIncLow  = (log10(ssts_mid_pt.x) - log10(ssts_min_pt.x)) / 3.0f;\n    ssts_knotIncHigh = (log10(ssts_max_pt.x) - log10(ssts_mid_pt.x)) / 3.0f;\n    ssts_pctLow  = lerp1D(ssts_bendsLow,  log2(ssts_min_pt.x / 0.18f));\n    ssts_pctHigh = lerp1D(ssts_bendsHigh, log2(ssts_max_pt.x / 0.18f));\n\n    \n    float ssts_coefsLow_data\[] = \{\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      log10(ssts_min_pt.y) + ssts_pctLow*(log10(ssts_mid_pt.y)-log10(ssts_min_pt.y)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    float sssts_coefsHigh_data\[] = \{\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      log10(ssts_mid_pt.y) + ssts_pctHigh*(log10(ssts_max_pt.y)-log10(ssts_mid_pt.y)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    ssts_coefsLow.setArray(ssts_coefsLow_data);\n    ssts_coefsHigh.setArray(sssts_coefsHigh_data);\n\n    ssts_paramMin = ssts_min_pt;\n    ssts_paramMid = ssts_mid_pt;\n    ssts_paramMax = ssts_max_pt;\n    ssts_expShift = log2(inverseSSTS(sstsLuminance.y, ssts_min_pt, ssts_paramMid, ssts_max_pt)) - log2(0.18f);\n    ssts_paramMin.x = spow(2.0f, (log(ssts_paramMin.x) / log(2.0f) - ssts_expShift));\n    ssts_paramMid.x = spow(2.0f, (log(0.18f          ) / log(2.0f) - ssts_expShift));\n    ssts_paramMax.x = spow(2.0f, (log(ssts_paramMax.x) / log(2.0f) - ssts_expShift));\n\n\n\n    float identity_matrix_data\[]=\{ 1.0f, 0.0f, 0.0f,\n                                   0.0f, 1.0f, 0.0f,\n                                   0.0f, 0.0f, 1.0f \};\n\n    float XYZ_to_LMS_Bradford_data\[]=\{ 0.8951f, 0.2664f,-0.1614f,\n                                      -0.7502f, 1.7135f, 0.0367f,\n                                       0.0389f,-0.0685f, 1.0296f \};\n\n    float XYZ_to_LMS_CAT02_data\[]=\{ 0.7328f, 0.4296f,-0.1624f,\n                                   -0.7036f, 1.6975f, 0.0061f,\n                                    0.0030f, 0.0136f, 0.9834f \};\n\n    float XYZ_to_LMS_ZCAM_data\[]=\{ 0.41478972f, 0.57999900f, 0.01464800f,\n                                  -0.20151000f, 1.12064900f, 0.05310080f,\n                                  -0.01660080f, 0.26480000f, 0.66847990f \};\n\n    float eps = 3.7035226210190005e-11f;\n    float LMS_to_Izazbz_data\[]=\{ 0.000000f, 1.0001f-eps , 0.000000f,\n                                 3.524000f,-4.066708f, 0.542708f,\n                                 0.199076f, 1.096799f,-1.295875f \};\n\n\n    identity_matrix.setArray(identity_matrix_data);\n    XYZ_to_LMS_Bradford.setArray(XYZ_to_LMS_Bradford_data);\n    XYZ_to_LMS_CAT02.setArray(XYZ_to_LMS_CAT02_data);\n    // XYZ_to_LMS_ZCAM.setArray(XYZ_to_LMS_ZCAM_data);\n    LMS_to_Izazbz.setArray(LMS_to_Izazbz_data);\n\n\n    // Blink does not seem to support initialising multidimensional arrays\n    // So instead of being able to index the matrix data directly from one\n    // we need to use long if/else statements to populate the\n    // input, limit & output primary matrices\n    // (maybe there is a better way?)\n\n    float XYZ_to_AP0_ACES_matrix_data\[]=\n    \{\n       1.0498110175f,  0.0000000000f, -0.0000974845f,\n      -0.4959030231f,  1.3733130458f,  0.0982400361f,\n       0.0000000000f,  0.0000000000f,  0.9912520182f\n    \};\n\n    float XYZ_to_AP1_ACES_matrix_data\[]=\n    \{\n       1.6410233797f, -0.3248032942f, -0.2364246952f,\n      -0.6636628587f,  1.6153315917f,  0.0167563477f,\n       0.0117218943f, -0.0082844420f,  0.9883948585f,\n    \};\n\n    float XYZ_to_Rec709_D65_matrix_data\[]=\n    \{\n       3.2409699419f, -1.5373831776f, -0.4986107603f,\n      -0.9692436363f,  1.8759675015f,  0.0415550574f,\n       0.0556300797f, -0.2039769589f,  1.0569715142f,\n    \};\n\n    float XYZ_to_Rec2020_D65_matrix_data\[]=\n    \{\n       1.7166511880f, -0.3556707838f, -0.2533662814f,\n      -0.6666843518f,  1.6164812366f,  0.0157685458f,\n       0.0176398574f, -0.0427706133f,  0.9421031212f,\n    \};\n\n    float XYZ_to_P3_D65_matrix_data\[]=\n    \{\n       2.4934969119f, -0.9313836179f, -0.4027107845f,\n      -0.8294889696f,  1.7626640603f,  0.0236246858f,\n       0.0358458302f, -0.0761723893f,  0.9568845240f,\n    \};\n\n    float XYZ_to_P3_DCI_matrix_data\[]=\n    \{\n       2.7253940305f, -1.0180030062f, -0.4401631952f,\n      -0.7951680258f,  1.6897320548f,  0.0226471906f,\n       0.0412418914f, -0.0876390192f,  1.1009293786f\n    \};\n\n    // populate the input primaries matrix\n    if( primariesIn == 0 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesIn == 1 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesIn == 2 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesIn == 3 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesIn == 4 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesIn == 5 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_input.setArray(identity_matrix_data);\n    \}\n\n    // populate the limiting primaries matrix\n    if( primariesLimit == 0 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 1 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 2 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesLimit == 3 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesLimit == 4 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesLimit == 5 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_limit.setArray(identity_matrix_data);\n    \}\n\n    // populate the output primaries matrix\n    if( primariesOut == 0 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesOut == 1 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesOut == 2 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesOut == 3 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesOut == 4 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesOut == 5 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_output.setArray(identity_matrix_data);\n    \}\n\n    RGB_to_XYZ_input = XYZ_to_RGB_input.invert();\n    RGB_to_XYZ_limit = XYZ_to_RGB_limit.invert();\n    RGB_to_XYZ_output = XYZ_to_RGB_output.invert();\n\n\n    float3x3 XYZ_to_RGB_sRGB;\n    XYZ_to_RGB_sRGB.setArray(XYZ_to_Rec709_D65_matrix_data);\n    float3 white(1.0f, 1.0f, 1.0f);\n\n    d65White = vector_dot(XYZ_to_RGB_sRGB.invert(), white);\n    inWhite = vector_dot(RGB_to_XYZ_input, white);\n    refWhite = vector_dot(RGB_to_XYZ_limit, white);\n\n    boundaryRGB = sstsLuminance.z / referenceLuminance;\n\n\n    //\n    // solving the RGB cusp from JMh is very expensive\n    // instead we go the other way and start with a RGB cusp sweep\n    // which is easily calculated by converting via HSV (Hue, 1.0, 1.0)\n    // we then convert each cusp to JMh and add them to a table \n    //\n\n    gamutCuspTableSize = 360;\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      float hNorm = float(i) / (gamutCuspTableSize);\n      float3 RGB = HSV_to_RGB(float3(hNorm, 1.0f, 1.0f));\n      gamutCuspTableUnsorted\[i] = limit_RGB_to_JMh(RGB);\n    \}\n\n    int minhIndex = 0;\n    for( int i = 1; i < gamutCuspTableSize; ++i )\n    \{\n      if( gamutCuspTableUnsorted\[i].z <  gamutCuspTableUnsorted\[minhIndex].z)\n      \{\n        minhIndex = i;\n      \}\n    \}\n\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      gamutCuspTable\[i] = gamutCuspTableUnsorted\[(minhIndex+i)%gamutCuspTableSize];\n      \n    \}\n\n    // calculate the maximum expected J & M values for the given limit gamut\n    // these are used as limiting values for the gamut boundary searches\n\n    // limitJmax (asumed to match limitRGB white)\n    limitJmax = limit_RGB_to_JMh(float3(1.0f)).x;\n\n\n    // limitMmax (assumed to coincide with one of the RGBCMY corners of the limitRGB cube)\n    float3 gamutCornersTable\[6];\n    gamutCornersTable\[0] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 0.0f));\n    gamutCornersTable\[1] = limit_RGB_to_JMh(float3(1.0f, 1.0f, 0.0f));\n    gamutCornersTable\[2] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 0.0f));\n    gamutCornersTable\[3] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 1.0f));\n    gamutCornersTable\[4] = limit_RGB_to_JMh(float3(0.0f, 0.0f, 1.0f));\n    gamutCornersTable\[5] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 1.0f));\n\n    limitMmax = 0.0f;\n    for( int i = 0; i < 6; ++i )\n    \{\n      limitMmax = max(limitMmax, gamutCornersTable\[i].y);\n    \}\n\n    // ensure positive, non-zero focus depth\n    // to avoid the gamut boundary search vector becoming zero for achromatic colors\n    // which will cause the boundary search loop to continue forever and the node to hang\n    focusDistanceClamped = max(0.01f, focusDistance);\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    if( invert )\n    \{\n      float3 JMh = output_RGB_to_JMh(srcRGB);\n      JMh = compressGamutInverse(JMh);\n      float3 inputIzazbz = inverseTonescale(JMh);\n      dstRGB = Izazbz_to_input_RGB(inputIzazbz);\n      diagnostic =  dstRGB;\n    \}\n    else\n    \{\n      float3 inputIzazbz = input_RGB_to_Izazbz(srcRGB);\n      float3 JMh = forwardTonescale(inputIzazbz);\n      JMh = compressGamutForward(JMh);\n      dstRGB = JMh_to_output_RGB(JMh);\n      // diagnostic = Izazbz_to_JMh(inputIzazbz, 0.31334f, 0);\n      diagnostic =  dstRGB;\n    \}\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  DRT_ZCAM_Kernel_encodingIn {{parent.encoding_in}}
  DRT_ZCAM_Kernel_primariesIn {{parent.primaries_in}}
  DRT_ZCAM_Kernel_toneScaleMode {{parent.toneScaleMode}}
  DRT_ZCAM_Kernel_catType {{parent.cat_type}}
  DRT_ZCAM_Kernel_discountIlluminant {{parent.discount_illuminant}}
  DRT_ZCAM_Kernel_referenceLuminance {{parent.reference_luminance}}
  DRT_ZCAM_Kernel_backgroundLuminance {{parent.background_luminance}}
  DRT_ZCAM_Kernel_viewingConditions {{parent.viewing_conditions}}
  DRT_ZCAM_Kernel_applyTonecurve {{applyTonecurve}}
  DRT_ZCAM_Kernel_sstsLuminance {{parent.ssts_luminance.x} {parent.ssts_luminance.y} {parent.ssts_luminance.z}}
  DRT_ZCAM_Kernel_applyHighlightDesat {{parent.apply_highlight_desat}}
  DRT_ZCAM_Kernel_desatHighlights {{parent.desat_highlights}}
  DRT_ZCAM_Kernel_primariesLimit {{parent.primaries_limit}}
  DRT_ZCAM_Kernel_applyGamutCompression {{parent.apply_gamut_compression}}
  DRT_ZCAM_Kernel_cuspMidBlend {{parent.cusp_mid_blend}}
  DRT_ZCAM_Kernel_focusDistance {{parent.focus_distance}}
  DRT_ZCAM_Kernel_compressionFuncParams {{parent.compression_params.x} {parent.compression_params.y} {parent.compression_params.z}}
  DRT_ZCAM_Kernel_smoothCusps {{parent.smooth_cusps}}
  DRT_ZCAM_Kernel_boundarySolvePrecision {{parent.solve_precision}}
  DRT_ZCAM_Kernel_inverseSolverIterations {{parent.inverse_solver_iterations}}
  DRT_ZCAM_Kernel_encodingOut {{parent.encoding_out}}
  DRT_ZCAM_Kernel_primariesOut {{parent.primaries_out}}
  DRT_ZCAM_Kernel_clampOutput {{parent.clamp_output}}
  DRT_ZCAM_Kernel_invert {{parent.invert}}
  DRT_ZCAM_Kernel_XYZ_to_LMS_ZCAM {
      {{DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler}}
      {{DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler}}
      {{DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler} {DRT_ZCAM_IzMh_Blink4.preMatrix.matrix*matrixScaler}}
    }
  DRT_ZCAM_Kernel_zcam_rho {{"1.7 * 2523.0 / pow(2.0,5.0)"}}
  DRT_ZCAM_Kernel_Lp {{parent.ssts_luminance.z}}
  DRT_ZCAM_Kernel_su 2
  DRT_ZCAM_Kernel_c0 1.2
  DRT_ZCAM_Kernel_cs {{0.18**(1-DRT_ZCAM_Kernel_c0)}}
  DRT_ZCAM_Kernel_c1 1.1
  DRT_ZCAM_Kernel_p {{DRT_ZCAM_Kernel_c1*(0.9+0.05*DRT_ZCAM_Kernel_su)}}
  DRT_ZCAM_Kernel_w1 {{(0.595*DRT_ZCAM_Kernel_Lp/10000)**0.931+1.037}}
  DRT_ZCAM_Kernel_s1 {{DRT_ZCAM_Kernel_w1*DRT_ZCAM_Kernel_Lp/100}}
  DRT_ZCAM_Kernel_ex -0.26
  DRT_ZCAM_Kernel_eb 0.08
  DRT_ZCAM_Kernel_e0 {{2**(DRT_ZCAM_Kernel_ex+DRT_ZCAM_Kernel_eb*log(DRT_ZCAM_Kernel_s1)/log(2))}}
  DRT_ZCAM_Kernel_s0 {{(DRT_ZCAM_Kernel_s1/DRT_ZCAM_Kernel_e0)**(1/DRT_ZCAM_Kernel_c1)}}
  DRT_ZCAM_Kernel_fl 0.01
  DRT_ZCAM_Kernel_dch 0.55
  DRT_ZCAM_Kernel_sat {{max(1,1.125-0.00025*DRT_ZCAM_Kernel_Lp)}}
  DRT_ZCAM_Kernel_mmScaleFactor 100
  DRT_ZCAM_Kernel_n {{ssts_luminance.z}}
  DRT_ZCAM_Kernel_nr 100
  DRT_ZCAM_Kernel_g 1.1
  DRT_ZCAM_Kernel_w 0.84
  DRT_ZCAM_Kernel_t_1 0.075
  rebuild_finalise ""
  name BlinkScript1
  note_font "Bitstream Vera Sans"
  selected true
  xpos -908
  ypos -232
  addUserKnob {20 User}
  addUserKnob {7 matrixScaler R 0 2}
  matrixScaler 0.99415
 }
 Clamp {
  minimum_enable false
  maximum {{parent.parent.DRT_ZCAM_IzMh_Blink4.ssts_luminance.z/100}}
  name Clamp1
  xpos -908
  ypos -196
 }
 Output {
  name Output1
  xpos -908
  ypos -128
 }
 ColorMatrix {
  inputs 0
  matrix {
      {0.368792 0.531205 0.103642}
      {-0.193458 1.03225 0.131287}
      {-0.0348077 0.283972 0.671427}
    }
  name preMatrix
  xpos -799
  ypos -226
 }
end_group
ContactSheet {
 inputs 2
 width 3840
 height 1080
 rows 1
 columns 2
 name ContactSheet1
 xpos 146
 ypos 254
}
set N3bd01800 [stack 0]
Colorspace {
 colorspace_in sRGB
 name Colorspace4
 xpos 572
 ypos 269
}
set N3bd01400 [stack 0]
Group {
 name PlotChromaticity_Points
 xpos 714
 ypos 319
 addUserKnob {20 PlotChromaticity_Points_tab l PlotChromaticity_Points}
 addUserKnob {6 plot_input l "plot input" +STARTLINE}
 plot_input true
 addUserKnob {6 plot_spectral_locus l "plot spectral locus" -STARTLINE}
 plot_spectral_locus true
 addUserKnob {6 plot_pointers_gamut l "plot pointers gamut" -STARTLINE}
 addUserKnob {41 gamut T GamutToXYZ.gamut}
 addUserKnob {4 transform M {none XYZ Yxy}}
 transform Yxy
 addUserKnob {4 diagram M {"1931 xy chromaticity diagram" "1976 u'v' chromaticity diagram" none}}
 addUserKnob {41 detail l "point detail" T PositionToPoints1.detail}
 addUserKnob {41 pointSize l "point size" T PositionToPoints1.pointSize}
 addUserKnob {26 ""}
 addUserKnob {7 right_margin l "right margin" R 1 2}
 right_margin 1
 addUserKnob {7 left_margin l "left margin" R 0 0.2}
}
 Camera2 {
  inputs 0
  display off
  selectable false
  translate {{0.5-parent.left_margin*0.3 x14 0.476000011} {0.5-parent.left_margin*0.3 x14 0.476000011} 3}
  projection_mode orthographic
  focal {{40/parent.right_margin}}
  haperture 50
  vaperture 18
  far 10
  name ORTHO
  xpos -1350
  ypos 476
 }
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant6
  xpos -2369
  ypos -488
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width 296
  box_height 2
  box_fixed true
  name ReformatBox3
  xpos -2369
  ypos -439
  addUserKnob {20 User}
  addUserKnob {7 bits l "" +STARTLINE R 0 16}
  bits 12
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  color {{input.width}}
  name Ramp1
  xpos -2369
  ypos -392
 }
 ColorLookup {
  lut {master {}
    red {curve}
    green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
    blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
    alpha {}}
  name ColorLookup1
  label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
  xpos -2369
  ypos -333
 }
 BlackOutside {
  name BlackOutside2
  xpos -2369
  ypos -251
 }
 Crop {
  box {0 0 {input.width} {height+1}}
  reformat true
  name Crop1
  xpos -2369
  ypos -203
 }
 Dot {
  name Dot12
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -2335
  ypos -148
 }
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant2
  xpos -2149
  ypos -488
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width 8000.731495
  box_height 2
  box_fixed true
  name ReformatBox2
  xpos -2149
  ypos -440
  addUserKnob {20 User}
  addUserKnob {7 bits l "" +STARTLINE R 0 16}
  bits 12
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  color {{input.width}}
  name Ramp2
  xpos -2149
  ypos -392
 }
 ColorLookup {
  lut {master {}
    red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
    green {curve R 0.6589999795 x50 0.6536288857 0.6479062438 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6447148919 0.6505312324 0.655082047 0.6589999795}
    blue {curve R 0.3160000145 x50 0.3244570494 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
    alpha {}}
  name ColorLookup3
  label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
  xpos -2149
  ypos -328
 }
 BlackOutside {
  name BlackOutside3
  xpos -2149
  ypos -251
 }
 Crop {
  box {0 -1 {input.width} {height}}
  reformat true
  name Crop8
  xpos -2149
  ypos -202
 }
 Merge2 {
  inputs 2
  name Merge5
  xpos -2149
  ypos -152
  disable {{!parent.enable_pointer_samples}}
 }
 BlackOutside {
  name BlackOutside4
  xpos -2149
  ypos -105
 }
 Crop {
  box {0 -1 {input.width} {height}}
  reformat true
  name Crop2
  xpos -2149
  ypos -63
 }
 Dot {
  name Dot4
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -2115
  ypos -28
 }
 Dot {
  name Dot15
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1903
  ypos -28
 }
set N3bbfb800 [stack 0]
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant5
  xpos -1827
  ypos -552
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width {{pow(2,bits)}}
  box_height 2
  box_fixed true
  name ReformatBox1
  label "\[value bits]bit"
  xpos -1827
  ypos -510
  addUserKnob {20 User}
  addUserKnob {7 bits l "" +STARTLINE R 0 16}
  bits 14
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  name Ramp3
  xpos -1827
  ypos -456
 }
set N3bbfa800 [stack 0]
 Dot {
  name Dot9
  note_font "Bitstream Vera Sans"
  xpos -1683
  ypos -452
 }
 Expression {
  expr0 r*-0.00132+0.00142
  expr1 r*-0.565+0.737
  expr2 r*-0.26+0.2637
  expr3 1
  name Expression1
  label "line of purples"
  xpos -1717
  ypos -414
 }
 Transform {
  translate {13300 0}
  scale {0.1 1}
  filter impulse
  name Transform1
  note_font "Bitstream Vera Sans"
  xpos -1717
  ypos -360
 }
 BlackOutside {
  name BlackOutside1
  xpos -1717
  ypos -312
 }
 Dot {
  name Dot10
  note_font "Bitstream Vera Sans"
  xpos -1683
  ypos -236
 }
push $N3bbfa800
 Expression {
  temp_name0 start
  temp_expr0 360
  temp_name1 end
  temp_expr1 830
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 r*(end-start)+start
  channel1 none
  channel2 none
  expr3 1
  name Expression2
  label "360nm to 830nm"
  xpos -1827
  ypos -414
 }
 ColorLookup {
  lut {master {}
    red {curve x360 0.0001298999996 C 0.0001458470069 0.0001638021058 0.0001840037003 0.0002066901943 0.0002321000065 0.0002607280039 0.0002930749906 0.0003293880145 0.0003699139925 0.0004148999869 0.0004641586856 0.000518986024 0.000581854023 0.0006552346749 0.0007416000008 0.0008450296009 0.0009645267855 0.001094948966 0.001231153961 0.001368000056 0.00150204997 0.001642327989 0.001802381943 0.001995756989 0.002236000029 0.00253538508 0.002892602934 0.003300829092 0.003753236029 0.004242999945 0.004762389231 0.005330048036 0.005978711881 0.00674111722 0.007650000043 0.008751372807 0.01002888009 0.01142170001 0.01286900975 0.01431000046 0.01570443064 0.01714744046 0.01878122054 0.02074800991 0.02318999916 0.02620735951 0.02978247963 0.03388091922 0.03846824169 0.04351000115 0.04899559915 0.05502260104 0.06171879917 0.06921199709 0.07762999833 0.08695811033 0.09717672318 0.1084062979 0.1207671985 0.1343799978 0.149358198 0.1653957069 0.1819830984 0.1986110061 0.2147700042 0.2301868051 0.2448796928 0.2587772906 0.271807909 0.2838999927 0.2949438095 0.3048965037 0.3137873113 0.3216454089 0.3285000026 0.3343513012 0.339210093 0.3431212902 0.3461295962 0.3482800126 0.3495998979 0.3501473963 0.3500129879 0.3492870033 0.3480600119 0.3463732898 0.3442623913 0.3418087959 0.3390941024 0.3361999989 0.3331977129 0.3300411105 0.3266356885 0.3228867948 0.3186999857 0.314025104 0.3088839948 0.3032903969 0.2972579002 0.2908000052 0.2839700878 0.2767213881 0.268917799 0.2604227066 0.2511000037 0.2408474982 0.2298512012 0.2184071988 0.2068115026 0.1953600049 0.1842135936 0.173327297 0.1626881063 0.152283296 0.1421000063 0.1321786046 0.1225695983 0.1132752001 0.1042978987 0.09564000368 0.08729954809 0.07930804044 0.07171776146 0.06458099186 0.05795000866 0.05186210945 0.04628152028 0.04115087911 0.0364128314 0.0320100002 0.0279172007 0.02414439991 0.02068700083 0.01754040085 0.01470000017 0.01216179039 0.009919960052 0.007967240177 0.006296345964 0.004900000058 0.003777173115 0.002945319982 0.002424879931 0.00223629293 0.002400000114 0.002925520064 0.003836560063 0.005174839869 0.006982080173 0.009300000034 0.01214949042 0.01553587988 0.01947752014 0.02399276942 0.02910000086 0.0348148495 0.04112016037 0.04798503965 0.05537860841 0.0632700026 0.07163500786 0.08046223968 0.08973996341 0.09945645183 0.1096000001 0.120167397 0.1311144978 0.1423678994 0.1538542062 0.1655000001 0.1772571057 0.1891400069 0.2011694014 0.2133657932 0.225749895 0.238320902 0.2510668039 0.2639921904 0.2771016955 0.2903999984 0.3038912117 0.3175725937 0.3314383924 0.3454827964 0.3596999943 0.3740839064 0.3886395991 0.4033783972 0.4183115065 0.4334498942 0.4487952888 0.4643360078 0.4800640047 0.4959712923 0.5120500922 0.5282958746 0.5446916223 0.5612093806 0.5778214931 0.5945000052 0.6112208962 0.6279758215 0.6447601914 0.6615697145 0.6783999801 0.6952391863 0.7120586038 0.7288283706 0.7455188036 0.7620999813 0.7785431743 0.7948256135 0.8109263778 0.8268247843 0.8424999714 0.857932508 0.8730816245 0.887894392 0.90231812 0.9162999988 0.9297994971 0.9427983761 0.9552776217 0.9672179222 0.9786000252 0.9893856049 0.9995487928 1.009089231 1.018006444 1.026299953 1.033982754 1.040985942 1.047188044 1.05246675 1.056699991 1.059794426 1.061799169 1.062806845 1.062909603 1.06219995 1.060735226 1.058443546 1.055224419 1.050976753 1.045600057 1.03903687 1.031360745 1.022666216 1.013047695 1.002599955 0.9913675189 0.9793313742 0.96649158 0.952847898 0.9383999705 0.9231939912 0.9072440267 0.890501976 0.8729199767 0.8544499278 0.8350840211 0.8149459958 0.7941859961 0.7729539871 0.7513999939 0.729583621 0.7075887918 0.6856021881 0.6638103724 0.6424000263 0.6215149164 0.6011137962 0.5811051726 0.5613976717 0.5418999791 0.5225995183 0.5035464168 0.4847435951 0.4661939144 0.4478999972 0.4298613071 0.4120979905 0.3946439922 0.3775332868 0.360799998 0.3444562852 0.3285168111 0.3130191863 0.2980011106 0.2834999859 0.2695448101 0.256118387 0.2431896031 0.2307271957 0.2187000066 0.2070970982 0.1959231943 0.1851707995 0.1748322994 0.1649000049 0.1553667039 0.1462299973 0.1374900043 0.1291466951 0.1212000027 0.1136396974 0.1064649969 0.09969043732 0.09333060682 0.08739999682 0.0819009617 0.07680428028 0.07207711786 0.06768663973 0.06360000372 0.05980684981 0.05628215894 0.05297103897 0.04981860891 0.04676999897 0.04378404841 0.04087536037 0.03807263821 0.03540461138 0.03290000185 0.03056419082 0.02838055976 0.02634483948 0.02445274964 0.02270000055 0.02108429 0.01959987916 0.01823732071 0.01698716916 0.01583999954 0.01479064021 0.01383132022 0.01294867974 0.01212919969 0.01135915983 0.01062935032 0.009938846342 0.009288421832 0.008678854443 0.008110916242 0.007582387887 0.007088745944 0.006627312861 0.006195407826 0.005790345836 0.005409826059 0.005052582826 0.004717512056 0.004403506871 0.004109457135 0.003833913011 0.003575748065 0.003334342036 0.003109074896 0.002899327083 0.002704347949 0.00252301991 0.0023541681 0.002196616028 0.002049189992 0.001910959953 0.001781438012 0.001660109963 0.00154645904 0.001439971034 0.001340041985 0.001246275031 0.001158470986 0.001076429966 0.0009999492904 0.0009287358262 0.0008624332258 0.0008007502765 0.0007433959981 0.0006900785957 0.0006405155873 0.0005945020821 0.0005518646212 0.0005124289892 0.0004760212905 0.0004424536019 0.0004115116899 0.0003829814086 0.0003566491068 0.0003323011042 0.0003097585868 0.0002888870949 0.0002695393923 0.0002515682136 0.0002348261041 0.0002191709937 0.0002045258007 0.0001908404956 0.0001780653984 0.0001661504939 0.0001550236047 0.0001446218957 0.000134909802 0.000125852006 0.0001174130011 0.0001095515036 0.0001022244978 9.539444727e-05 8.902390255e-05 8.307526878e-05 7.751269004e-05 7.231304335e-05 6.745778228e-05 6.292844046e-05 5.870651876e-05 5.477028026e-05 5.109918129e-05 4.767654173e-05 4.448567051e-05 4.150993846e-05 3.873324022e-05 3.61420316e-05 3.372352148e-05 3.146487143e-05 2.935325938e-05 2.73757305e-05 2.552433034e-05 2.379376019e-05 2.217869951e-05 2.067382957e-05 1.927226003e-05 1.796640026e-05 1.674990926e-05 1.56164806e-05 1.455976962e-05 1.357387009e-05 1.265436003e-05 1.17972304e-05 1.09984403e-05 1.025397978e-05 9.55964606e-06 8.912043995e-06 8.308357792e-06 7.745768926e-06 7.221456144e-06 6.732474958e-06 6.276422937e-06 5.851304195e-06 5.455117844e-06 5.085867997e-06 4.741466e-06 4.42023611e-06 4.12078316e-06 3.841716079e-06 3.581651981e-06 3.339127034e-06 3.112948889e-06 2.902120968e-06 2.705645102e-06 2.522524937e-06 2.351725925e-06 2.192414968e-06 2.043901986e-06 1.905497015e-06 1.776508952e-06 1.656214977e-06 1.544021984e-06 1.439439984e-06 1.341977054e-06 S 1.251141043e-06}
    green {curve x360 3.916999958e-06 C 4.393581094e-06 4.929604074e-06 5.532136129e-06 6.20824494e-06 6.965000011e-06 7.813218872e-06 8.767336112e-06 9.839844097e-06 1.104323019e-05 1.238999994e-05 1.388640976e-05 1.555727977e-05 1.74429606e-05 1.958374924e-05 2.201999996e-05 2.483965e-05 2.804126052e-05 3.153103899e-05 3.521520921e-05 3.899999865e-05 4.282639929e-05 4.691459981e-05 5.158959902e-05 5.717639942e-05 6.399999984e-05 7.234421355e-05 8.221223834e-05 9.350816254e-05 0.0001061361036 0.000119999997 0.0001349840022 0.0001514920004 0.0001702080044 0.0001918159978 0.0002169999934 0.0002469067113 0.0002812400053 0.0003185200039 0.0003572666901 0.0003959999885 0.0004337147111 0.0004730240034 0.0005178760039 0.0005722186761 0.0006399999838 0.0007245599991 0.0008254999993 0.0009411600186 0.001069879974 0.001210000017 0.001362091047 0.001530752052 0.001720368047 0.001935323002 0.002180000069 0.002454800066 0.002764000092 0.003117799992 0.003526400076 0.00400000019 0.004546239972 0.005159319844 0.005829279777 0.006546160206 0.007300000172 0.008086507209 0.008908719756 0.009767680429 0.01066443045 0.01159999985 0.01257316954 0.01358272042 0.01462967973 0.01571509056 0.01683999971 0.0180073604 0.01921447925 0.02045392059 0.02171823941 0.02300000004 0.0242946092 0.02561024018 0.02695856988 0.02835124917 0.02979999967 0.03131083027 0.03288368136 0.03452112153 0.03622571006 0.03799999878 0.03984666988 0.04176799953 0.04376599938 0.0458426699 0.04800000042 0.05024367943 0.05257304013 0.05498056114 0.0574587211 0.05999999866 0.06260196865 0.06527751684 0.06804207712 0.0709110871 0.07389999926 0.07701600343 0.08026640117 0.08366680145 0.08723279834 0.09098000079 0.09491755068 0.09904584289 0.1033674031 0.1078846008 0.1125999987 0.1175319999 0.1226743981 0.1279927939 0.1334528029 0.1390199959 0.1446764022 0.1504693031 0.1564618945 0.1627177 0.1693000048 0.1762430966 0.1835581064 0.1912734956 0.1994179934 0.2080200016 0.2171199024 0.2267345041 0.2368571013 0.2474811971 0.2585999966 0.2701849043 0.2822938859 0.2950505018 0.3085780144 0.3230000138 0.3384020925 0.3546858132 0.3716985881 0.3892875016 0.4072999954 0.4256299138 0.4443095922 0.4633944035 0.4829395115 0.503000021 0.5235692859 0.5445119739 0.565689981 0.5869653225 0.6082000136 0.6293455958 0.6503068209 0.6708751917 0.6908423901 0.7099999785 0.7281851768 0.7454636097 0.7619693875 0.7778367996 0.793200016 0.8081104159 0.8224961758 0.8363068104 0.8494915962 0.8619999886 0.8738108277 0.8849623799 0.8954936266 0.9054431915 0.9148501158 0.9237347841 0.9320924282 0.9399225712 0.9472252131 0.9539999962 0.9602560997 0.9660074115 0.9712606072 0.9760224819 0.9803000093 0.9840924144 0.9874181747 0.9903128147 0.9928116202 0.9949501157 0.9967107773 0.9980983138 0.99911201 0.9997481704 1 0.9998567104 0.9993045926 0.9983255267 0.9968987107 0.9950000048 0.9926005006 0.9897425771 0.9864444137 0.9827240705 0.9786000252 0.9740837216 0.969171226 0.9638568163 0.9581348896 0.9520000219 0.9454504251 0.9384992123 0.9311627746 0.9234576225 0.9154000282 0.9070063829 0.8982772231 0.8892048001 0.8797816038 0.8700000048 0.8598613143 0.8493919969 0.838621974 0.8275812864 0.8162999749 0.8047947288 0.7930819988 0.7811920047 0.7691547275 0.7570000291 0.744754076 0.7324224114 0.7200036049 0.7074965239 0.6948999763 0.6822192073 0.6694716215 0.6566743851 0.6438447833 0.6309999824 0.6181554794 0.605314374 0.5924755931 0.5796378851 0.5667999983 0.5539610982 0.5411372185 0.528352797 0.5156322718 0.503000021 0.4904688001 0.4780304134 0.4656775892 0.4534032047 0.4411999881 0.4290800095 0.4170359969 0.4050320089 0.3930320144 0.3810000122 0.3689183891 0.3568271995 0.3447768092 0.3328176141 0.3210000098 0.3093380928 0.2978504002 0.2865935862 0.2756245136 0.2649999857 0.254763186 0.2448896021 0.2353343964 0.2260528058 0.2169999927 0.2081616074 0.1995487958 0.1911551952 0.1829743981 0.174999997 0.1672234982 0.1596464068 0.1522776037 0.1451258957 0.1381999999 0.1315003037 0.1250247955 0.1187791973 0.1127690971 0.1070000008 0.1014761999 0.09618864208 0.09112296253 0.08626484871 0.08160000294 0.07712063938 0.07282552123 0.06871008128 0.06476975977 0.06100000069 0.05739621073 0.05395504087 0.05067376047 0.04754965007 0.04458000138 0.04175871983 0.03908495978 0.03656383976 0.03420047835 0.03200000152 0.02996261045 0.0280766394 0.0263293609 0.02470804937 0.0231999997 0.02180076949 0.02050112002 0.01928107999 0.01812068932 0.01700000092 0.01590378955 0.01483718026 0.01381068025 0.01283477992 0.01192000043 0.01106830966 0.01027339045 0.00953331124 0.00884615723 0.008209999651 0.007623780984 0.007085423917 0.006591476034 0.006138484925 0.005723000038 0.005343059078 0.004995795898 0.004676403943 0.004380074795 0.004102000035 0.003838452976 0.00358909904 0.003354219021 0.003134093015 0.002928999951 0.002738138894 0.002559876069 0.002393244067 0.00223727501 0.002091000089 0.001953586936 0.001824580017 0.001703580027 0.001590186963 0.001484000008 0.00138449599 0.001291268039 0.001204092056 0.001122744055 0.001047000056 0.0009765896248 0.0009111088002 0.0008501331904 0.0007932384033 0.0007399999886 0.0006900827284 0.0006433100207 0.0005994960084 0.000558454718 0.0005200000014 0.0004839136091 0.0004500527866 0.0004183452111 0.0003887184139 0.0003611000138 0.0003353834909 0.0003114404099 0.0002891655895 0.0002684539068 0.0002492000058 0.0002313019068 0.0002146855986 0.0001992884063 0.0001850474946 0.0001718999993 0.0001597780938 0.0001486044057 0.0001383016061 0.000128792497 0.000119999997 0.0001118595028 0.0001043223965 9.73356e-05 9.084586782e-05 8.479999815e-05 7.914666639e-05 7.385799836e-05 6.89160006e-05 6.43026724e-05 5.999999848e-05 5.598186908e-05 5.222560139e-05 4.871840065e-05 4.544746844e-05 4.239999907e-05 3.956104047e-05 3.691512029e-05 3.44486798e-05 3.214816024e-05 2.999999924e-05 2.799124923e-05 2.611355922e-05 2.436024079e-05 2.272460915e-05 2.119999954e-05 1.977855027e-05 1.845285078e-05 1.721686931e-05 1.606459045e-05 1.498999973e-05 1.398728e-05 1.305155001e-05 1.217818044e-05 1.136254014e-05 1.059999977e-05 9.885877262e-06 9.217304068e-06 8.592362065e-06 8.009133126e-06 7.465700037e-06 6.959567145e-06 6.487995051e-06 6.048699106e-06 5.639396022e-06 5.257799785e-06 4.901770808e-06 4.569720204e-06 4.260194146e-06 3.971738806e-06 3.702899903e-06 3.4521629e-06 3.218302027e-06 3.000300012e-06 2.797138904e-06 2.60780007e-06 2.431220082e-06 2.266531055e-06 2.113012897e-06 1.969943014e-06 1.836599949e-06 1.71222996e-06 1.596228003e-06 1.488089993e-06 1.387314001e-06 1.293400032e-06 1.205820013e-06 1.124142955e-06 1.04800904e-06 9.770579936e-07 9.109299981e-07 8.492510233e-07 7.917209928e-07 7.380900229e-07 6.881099921e-07 6.415299936e-07 5.980900255e-07 5.575749924e-07 5.198079975e-07 4.846119737e-07 S 4.518099956e-07}
    blue {curve x360 0.0006061000167 C 0.0006808792241 0.0007651455817 0.0008600124274 0.0009665928083 0.001086000004 0.001220586011 0.001372728962 0.001543579041 0.001734285965 0.001946000033 0.002177777002 0.002435809001 0.002731953049 0.00307806395 0.003486000001 0.00397522701 0.004540880211 0.005158320069 0.00580290705 0.00645000115 0.007083216216 0.007745488081 0.008501151577 0.009414544329 0.01054999046 0.01196580008 0.01365587022 0.01558804978 0.01773015037 0.02005000971 0.0225113593 0.02520287968 0.02827971987 0.03189703822 0.03621000051 0.04143771157 0.04750372097 0.05411988124 0.06099803001 0.06785000861 0.0744863227 0.08136156201 0.08915363997 0.09854047745 0.1102000028 0.1246133 0.1417016983 0.1613035053 0.1832568049 0.2073999941 0.2336920947 0.2626113892 0.2947745919 0.3307985067 0.3713000119 0.4162091017 0.4654642045 0.5196948051 0.5795302987 0.6456000209 0.7184838057 0.7967132926 0.8778458834 0.9594389796 1.039050102 1.115367293 1.188497066 1.258123279 1.323929548 1.385599971 1.442635179 1.494803548 1.542190313 1.58488071 1.622959971 1.656404853 1.685295939 1.709874511 1.730382085 1.747059941 1.760044575 1.76962328 1.776263714 1.780433416 1.782600045 1.782968163 1.781699777 1.77919817 1.775867105 1.772109985 1.768258929 1.76403904 1.758943796 1.752466321 1.744099975 1.733559489 1.720858097 1.705936909 1.688737154 1.669199944 1.647528648 1.623412728 1.596022248 1.564527988 1.528100014 1.486111403 1.439521551 1.389879942 1.338736176 1.287639976 1.237422347 1.187824249 1.138761044 1.090147972 1.041900039 0.994197607 0.9473472834 0.9014530778 0.8566192985 0.8129500747 0.7705172896 0.7294448018 0.6899135709 0.6521049142 0.6161999702 0.5823286176 0.5504161716 0.5203375816 0.4919672906 0.4651800096 0.4399245977 0.4161835909 0.3938821852 0.3729459047 0.3533000052 0.3348577917 0.3175520897 0.3013375103 0.2861686051 0.2720000148 0.2588171065 0.2464838028 0.234771803 0.2234532982 0.2123000026 0.2011691928 0.1901195943 0.1792254001 0.1685608029 0.1581999958 0.1481382996 0.1383758038 0.1289941967 0.1200750992 0.1116999984 0.1039047986 0.09666748345 0.08998271823 0.08384530991 0.07824999094 0.07320898771 0.06867816299 0.06456784159 0.06078834832 0.05725001171 0.05390435085 0.05074663833 0.04775276035 0.04489858821 0.04216000065 0.03950728104 0.03693563864 0.03445836157 0.03208871931 0.02983999997 0.02771181054 0.02569443919 0.02378715947 0.02198925056 0.02030000091 0.01871805079 0.01724036038 0.01586364023 0.01458461024 0.01339999959 0.01230723038 0.01130187977 0.01037792023 0.009529305622 0.008749999106 0.008035199717 0.007381599862 0.006785400212 0.006242800038 0.00574999908 0.005303599872 0.004899799824 0.004534199834 0.004202399869 0.003899999894 0.003623200115 0.003370600054 0.003141399939 0.002934799995 0.002749999054 0.002585199894 0.002438599942 0.00230939989 0.002196799964 0.002099999925 0.002017732942 0.00194820005 0.001889799954 0.001840932993 0.001799999969 0.001766267 0.001737799961 0.001711199991 0.001683066948 0.001650001039 0.001610132982 0.001564400038 0.0015136 0.001458532992 0.00139999995 0.001336666988 0.001270000008 0.001204999979 0.001146667055 0.001099999994 0.001068799989 0.001049399958 0.001035599969 0.001021199976 0.001000000047 0.0009686399717 0.0009299200028 0.0008868799778 0.0008425600245 0.0007999999798 0.0007609599852 0.0007236800157 0.0006859200075 0.0006454400136 0.0006000000285 0.0005478666862 0.000491600018 0.0004353999975 0.0003834666859 0.0003399999987 0.0003072533 0.0002831600141 0.0002654400014 0.0002518132969 0.0002399999939 0.0002295466984 0.000220639995 0.0002119599958 0.0002021866967 0.0001900000061 0.0001742133027 0.0001556399948 0.0001359599992 0.0001168532981 9.999999747e-05 8.613333193e-05 7.460000052e-05 6.500000018e-05 5.693333151e-05 4.999999146e-05 4.415999865e-05 3.948000085e-05 3.57200006e-05 3.264000043e-05 2.999999924e-05 2.765333011e-05 2.556000072e-05 2.36399992e-05 2.181333002e-05 1.999999949e-05 1.813333074e-05 1.619999966e-05 1.41999999e-05 1.213332962e-05 9.999999747e-06 7.733333405e-06 5.400000191e-06 3.200000037e-06 1.333332989e-06 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 S 0}
    alpha {}}
  name ColorLookup2
  label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
  xpos -1827
  ypos -356
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace5
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1827
  ypos -294
 }
 Merge2 {
  inputs 2
  name Merge4
  xpos -1827
  ypos -240
 }
 Expression {
  expr0 "r < 0 ? r * sole.r + lift.r : r < lift.r * 2 ? pow( (lift.r *2 - r) / (lift.r * 2), 2) * lift.r + r : r"
  expr1 "g < 0 ? g * sole.g + lift.g : g < lift.g * 2 ? pow( (lift.g *2 - g) / (lift.g * 2), 2) * lift.g + g : g"
  expr2 "b < 0 ? b * sole.b + lift.b : b < lift.b * 2 ? pow( (lift.b *2 - b) / (lift.b * 2), 2) * lift.b + b : b"
  name ToeExpr1
  label "increase brightness of line of purples"
  xpos -1827
  ypos -203
  dope_sheet true
  addUserKnob {20 User}
  addUserKnob {18 lift}
  lift {0.08 0 0}
  addUserKnob {6 lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  lift_panelDropped true
  addUserKnob {18 sole R 0 0.1}
  sole {0 0 0}
  addUserKnob {6 sole_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Crop {
  box {0 0 16384 1}
  name Crop10
  xpos -1827
  ypos -151
 }
 Crop {
  box {0 0 16384 3}
  reformat true
  name Crop9
  xpos -1827
  ypos -125
  disable {{!parent.enable_pointers_gamut}}
 }
 Fill {
  color {0 0 0 1}
  name Disable_SpectralLocus
  xpos -1827
  ypos -99
  disable {{parent.plot_spectral_locus}}
 }
 Dot {
  name Dot2
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1793
  ypos -52
 }
set N3c19ec00 [stack 0]
 Dot {
  name Dot5
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1683
  ypos -52
 }
 Merge2 {
  inputs 2
  name Merge3
  xpos -1717
  ypos -32
  disable {{!parent.plot_pointers_gamut}}
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression5
  label "CIE Yxy to CIELuv"
  xpos -1717
  ypos 6
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot11
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1683
  ypos 179
 }
push $N3bbfb800
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace4
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1937
  ypos -1
 }
push $N3c19ec00
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace6
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1827
  ypos -1
 }
 Merge2 {
  inputs 2
  name Merge6
  xpos -1827
  ypos 60
  disable {{!parent.plot_pointers_gamut}}
 }
 Group {
  inputs 2
  name PlotPoints1
  xpos -1827
  ypos 175
  addUserKnob {20 User}
  addUserKnob {41 detail l "point detail" T PositionToPoints1.detail}
  addUserKnob {41 pointSize l "point size" T PositionToPoints1.pointSize}
 }
  Input {
   inputs 0
   name Inputpos
   xpos 510
   ypos 590
   number 1
  }
  Input {
   inputs 0
   name Inputcol
   xpos 400
   ypos 590
  }
add_layer {pos pos.red pos.green pos.blue pos.alpha}
  Copy {
   inputs 2
   from0 rgba.green
   to0 pos.red
   from1 rgba.blue
   to1 pos.green
   from2 rgba.red
   to2 pos.blue
   name Copy1
   xpos 400
   ypos 668
  }
  PositionToPoints2 {
   display textured
   selectable false
   render_mode textured
   cast_shadow false
   receive_shadow false
   P_channel pos
   detail {{parent.parent.PositionToPoints1.detail}}
   pointSize {{parent.parent.PositionToPoints1.pointSize}}
   name PositionToPoints1
   xpos 400
   ypos 782
  }
  Output {
   name Output
   xpos 400
   ypos 878
  }
 end_group
 Dot {
  name Dot3
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1793
  ypos 342
 }
 Input {
  inputs 0
  name Input
  xpos -1250
  ypos -153
 }
 Dot {
  name Dot1
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1216
  ypos 42
 }
set N3c142c00 [stack 0]
 Group {
  name GamutToXYZ
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1140
  ypos 32
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut P3D65
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Dot {
  name Dot6
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -1106
  ypos 90
 }
set N3c141c00 [stack 0]
 Colorspace {
  colorspace_in CIE-XYZ
  colorspace_out CIE-Yxy
  name Colorspace1
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1030
  ypos 80
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression3
  label "CIE Yxy to CIELuv"
  xpos -1030
  ypos 127
  disable {{"!(parent.diagram == 1)"}}
 }
push $N3c141c00
push $N3c142c00
 Switch {
  inputs 3
  which {{parent.transform}}
  name Switch1
  xpos -1140
  ypos 183
 }
push $N3c142c00
 Group {
  inputs 2
  name PositionToPoints1
  xpos -1250
  ypos 218
  disable {{!parent.plot_input}}
  addUserKnob {20 User}
  addUserKnob {41 detail l "point detail" T PositionToPoints1.detail}
  addUserKnob {41 pointSize l "point size" T PositionToPoints1.pointSize}
 }
  Input {
   inputs 0
   name Inputpos
   xpos 510
   ypos 587
   number 1
  }
  Input {
   inputs 0
   name Inputcol
   xpos 400
   ypos 585
  }
  Copy {
   inputs 2
   from0 rgba.green
   to0 pos.red
   from1 rgba.blue
   to1 pos.green
   from2 rgba.red
   to2 pos.blue
   name Copy1
   xpos 400
   ypos 639
  }
  PositionToPoints2 {
   display textured
   selectable false
   render_mode textured
   cast_shadow false
   receive_shadow false
   P_channel pos
   detail 1
   pointSize 2
   name PositionToPoints1
   xpos 400
   ypos 754
  }
  Output {
   name Output
   xpos 400
   ypos 846
  }
 end_group
 Scene {
  inputs 2
  name Scene1
  xpos -1240
  ypos 318
 }
 Constant {
  inputs 0
  format "2048 2048 0 0 2048 2048 1 square_2K"
  name Constant1
  xpos -1140
  ypos 496
  postage_stamp false
 }
 ScanlineRender {
  inputs 3
  conservative_shader_sampling false
  transparency false
  ztest_enabled false
  filter impulse
  samples 0
  shutteroffset centred
  motion_vectors_type off
  name ScanlineRender1
  xpos -1250
  ypos 544
 }
 Output {
  name Output
  xpos -1250
  ypos 664
 }
end_group
push $N3bd01400
Group {
 name PlotChromaticity1
 xpos 572
 ypos 319
 addUserKnob {20 PlotChromaticity_tab l PlotChromaticity}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
 addUserKnob {26 ""}
 addUserKnob {6 plot_input l "plot input" t "Enable plotting of the input pixels" +STARTLINE}
 plot_input true
 addUserKnob {41 input_gamut l gamut t "Set the gamut that the input colors are encoded in" -STARTLINE T GamutToXYZ.gamut}
 addUserKnob {4 diagram l in t "Choose the type of chromaticity diagram: \nCIE 1931 xy Chromaticity Diagram\nCIE 1976 u' v' Uniform Chromaticity Scale Diagram" -STARTLINE M {"CIE 1931 xy" "CIE 1976 u' v'" "" ""}}
 addUserKnob {6 enable_sample_color l "sample color" t "Enable plotting of the sampled color" +STARTLINE}
 enable_sample_color true
 addUserKnob {41 sample_color l color t "sample and plot selected color" T SampleColor.color}
 addUserKnob {22 follow_viewer l "follow viewer" t "Follow the selected viewer node. This causes this node to automatically connect to whatever the followed viewer is connected to.\n\nThis is useful if you want to have a 2nd viewer showing a chromaticity plot for whever you're looking at in your main viewer." T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to follow.')\nelse:\n    v\['knobChanged'].setValue('v = nuke.activeViewer().node()\\nif v and v.name() == nuke.thisNode().name():\\n    con = v.input(nuke.activeViewer().activeInput())\\n    plt = nuke.toNode(\"\{0\}\")\\n    plt.setInput(0, con)'.format(n.name()))" +STARTLINE}
 addUserKnob {22 unfollow_viewer l "unfollow viewer" -STARTLINE T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to unfollow.')\nelse:\n    v\['knobChanged'].setValue('')"}
 addUserKnob {26 plot_dimensions_label l " " T "<b>Chromaticity Diagram"}
 addUserKnob {3 resolution l " resolution" t "resolution to output"}
 resolution 2048
 addUserKnob {7 right_margin l "right margin" R 1 1.5}
 right_margin 1.1
 addUserKnob {7 left_margin l "left margin" R 0 0.2}
 left_margin 0.1
 addUserKnob {6 draw_spectral_locus l "spectrum locus" t "draw the spectrum locus: the boundary of color the human eye can see." +STARTLINE}
 draw_spectral_locus true
 addUserKnob {6 draw_line_of_purples l "line of purples" t "draw the \"line of purples\"" -STARTLINE}
 draw_line_of_purples true
 addUserKnob {6 draw_planckian_locus l "planckian locus" t "Display the planckian locus or the blackbody locus." +STARTLINE}
 draw_planckian_locus true
 addUserKnob {6 gamut_grid l "gamut grid" t "Display a gamut boundary with a grid or dot pattern" +STARTLINE}
 addUserKnob {41 gamut_gamutgrid l "" t "gamut for gamutgrid" -STARTLINE T RGBToXYZ_GamutGrid.gamut}
 addUserKnob {4 gamut_grid_style l style t "Choose the style to display the gamut plot" -STARTLINE M {grid dots "" "" "" ""}}
 addUserKnob {4 distribution l dist t "Which chromaticity space should the overlays be constructed in? \n\nYxy is familiar, but not very perceptually uniform.\n\nu'v' is designed to be more perceptually uniform." -STARTLINE M {"1931 Yxy" "1976 u'v'" "" ""}}
 addUserKnob {7 density t "Density of the grid or points" R 10 100}
 density 50
 addUserKnob {6 gamut_a l "gamut a" t "Display a gamut outline" +STARTLINE}
 addUserKnob {41 gamut_a_1 l "" -STARTLINE T RGBToXYZ_GamutA.gamut}
 addUserKnob {6 gamut_b l "gamut b" t "Display a gamut outline" +STARTLINE}
 gamut_b true
 addUserKnob {41 gamut_b_1 l "" -STARTLINE T RGBToXYZ_GamutB.gamut}
 addUserKnob {6 gamut_c l "gamut c" t "Display a gamut outline" +STARTLINE}
 gamut_c true
 addUserKnob {41 gamut_c_1 l "" -STARTLINE T RGBToXYZ_GamutC.gamut}
 addUserKnob {6 draw_pointers_gamut l "pointer's gamut" t "DrawPointer's gamut boundary" +STARTLINE}
 addUserKnob {6 draw_pointers_samples l "pointers sample colors" t "show the individual pointer gamut samples" -STARTLINE}
 addUserKnob {6 draw_macbeth_chart l "macbeth chart" t "draw a ColorChecker24 aka Macbeth Chart" +STARTLINE}
 addUserKnob {6 coordinate_system l "coordinate system" t "Draw CIE xy coordinate grid x and y axes" +STARTLINE}
 coordinate_system true
 addUserKnob {6 map_overlays_to_input_gamut l "map overlays to input gamut" t "This maps the overlays like the spectral locus, pointer's gamut, and the gamut overlay to the working gamut instead of keeping them as XYZ.\n\nFor example if the input gamut is ACEScg, these overlays will be mapped to that. Note that this can cause most of the overlays to be negative or highly saturated which might harm the visual appearance." +STARTLINE}
 map_overlays_to_input_gamut true
}
 Group {
  inputs 0
  name GamutGrid1
  xpos -920
  ypos -201
  postage_stamp true
  addUserKnob {20 GamutGrid}
  addUserKnob {3 style}
  style {{!parent.gamut_grid_style}}
  addUserKnob {3 distribution -STARTLINE}
  distribution {{parent.distribution}}
  addUserKnob {7 density R 10 150}
  density {{parent.density}}
  addUserKnob {26 ""}
  addUserKnob {41 matrix T ColorMatrix.matrix}
  addUserKnob {12 wxy}
  wxy {{parent.RGBToXYZ_GamutGrid.wxy} {parent.RGBToXYZ_GamutGrid.wxy}}
 }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   centerSaturation 1
   fillFormat false
   area {-170 -158 682 670}
   name ColorWheel4
   xpos -260
   ypos -15
   postage_stamp false
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop2
   xpos -260
   ypos 27
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat3
   xpos -260
   ypos 110
  }
set N3c0de000 [stack 0]
push $N3c0de000
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   roworder TopBottom
   name ContactSheet2
   xpos -260
   ypos 169
  }
  Dot {
   name Dot1
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -226
   ypos 246
  }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   fillFormat false
   area {40 40 472 472}
   name ColorWheel1
   xpos -40
   ypos -664
   postage_stamp false
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat1
   xpos -40
   ypos -628
  }
  Crop {
   box {0 0 {width} {height}}
   reformat true
   name Crop1
   xpos -40
   ypos -602
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos -526
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos -415
  }
  Colorspace {
   colorspace_in CIE-XYZ
   colorspace_out CIE-Yxy
   name Colorspace1
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -341
  }
set N3c477400 [stack 0]
  Dot {
   name Dot2
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos -331
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression5
   label "CIE Yxy to CIELuv"
   xpos -590
   ypos -304
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 "(-(degrees(atan2(g-white.x, b-white.y))-180)+270)%360/360"
   expr2 "hypot(g-white.x, b-white.y)"
   expr3 a
   name Expression3
   xpos -590
   ypos -261
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{"parent.distribution ? 4*parent.wxy.x / ( -2 * parent.wxy.x + 12 * parent.wxy.y + 3) : parent.wxy"} {"parent.distribution ? 9*parent.wxy.y / ( -2*parent.wxy.x + 12*parent.wxy.y + 3) : parent.wxy"}}
  }
set N3c476800 [stack 0]
  Posterize {
   channels rgb
   Colors {{rint(parent.density/3*2)}}
   name Posterize1
   xpos -590
   ypos -191
  }
set N3c476400 [stack 0]
push $N3c476800
  Dot {
   name Dot15
   xpos -446
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.blue
   to0 rgba.blue
   name Copy1
   xpos -480
   ypos -154
  }
push $N3c476400
push $N3c476800
  Dot {
   name Dot16
   xpos -666
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.green
   to0 rgba.green
   name Copy2
   xpos -700
   ypos -153
  }
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   center true
   roworder TopBottom
   name ContactSheet3
   xpos -590
   ypos -106
  }
  Expression {
   expr0 r
   expr1 cos(radians(g*360))*b+white.x
   expr2 sin(radians(g*360))*b+white.y
   expr3 a
   name Expression19
   xpos -590
   ypos -58
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{parent.Expression3.white} {parent.Expression3.white}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression2
   label "CIELuv to CIE Yxy"
   xpos -590
   ypos -16
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace2
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -590
   ypos 32
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix1
   label "XYZ to RGB"
   xpos -590
   ypos 81
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin2
   xpos -590
   ypos 119
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp1
   xpos -590
   ypos 152
  }
  Premult {
   name Premult1
   xpos -590
   ypos 194
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge2
   xpos -590
   ypos 242
  }
  Fill {
   output alpha
   name Fill1
   xpos -590
   ypos 297
  }
  Dot {
   name Dot3
   label " GRID"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 378
  }
push $N3c0de000
push $N3c477400
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression4
   label "CIE Yxy to CIELuv"
   xpos -40
   ypos -280
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 rint(g*Colors)/Colors
   expr2 rint(b*Colors)/Colors
   expr3 a
   name Expression1
   label rint
   xpos -40
   ypos -232
   addUserKnob {20 User}
   addUserKnob {7 Colors R 1 256}
   Colors {{parent.density}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression6
   label "CIELuv to CIE Yxy"
   xpos -40
   ypos -184
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace3
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -112
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix3
   label "XYZ to RGB"
   xpos -40
   ypos -57
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp4
   xpos -40
  }
  Premult {
   name Premult2
   xpos -40
   ypos 55
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge1
   xpos -40
   ypos 110
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin1
   xpos -40
   ypos 273
  }
  Dot {
   name Dot4
   label " DOTS"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -6
   ypos 378
  }
  Switch {
   inputs 2
   which {{parent.style}}
   name Switch1
   xpos -257
   ypos 483
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix2
   label "RGB to XYZ"
   xpos -257
   ypos 560
  }
  Output {
   name Output
   xpos -257
   ypos 740
  }
  ColorWheel {
   inputs 0
   format "256 256 0 0 256 256 1 square_256"
   area {40 40 472 472}
   name ColorWheel2
   xpos -37
   ypos -705
   postage_stamp false
  }
 end_group
set N3c4c3200 [stack 0]
 Group {
  name RGBToXYZ_GamutGrid
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos -184
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut ACEScg
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 ColorWheel {
  inputs 0
  format "512 512 0 0 512 512 1 square_512"
  centerSaturation 1
  fillFormat false
  area {-196 -184 708 696}
  name ColorWheel1
  xpos -920
  ypos 5
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop1
  xpos -920
  ypos 87
 }
 BlackOutside {
  name BlackOutside3
  xpos -920
  ypos 134
 }
set N3c39d400 [stack 0]
 Group {
  name RGBToXYZ_GamutC
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1140
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec709
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r+input.width} {parent.ReformatBox4.box_width-input.height}}
  name Position6
  xpos -1140
  ypos 254
 }
push $N3c39d400
 Group {
  name RGBToXYZ_GamutB
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut P3D65
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height*2}}
  name Position5
  xpos -1030
  ypos 254
 }
push $N3c39d400
 Group {
  name RGBToXYZ_GamutA
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -920
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec2020
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position4
  xpos -920
  ypos 254
 }
push $N3c4c3200
 Reformat {
  type scale
  scale 0.8
  turn true
  filter impulse
  black_outside true
  name Reformat2
  xpos -920
  ypos -129
 }
 BlackOutside {
  name BlackOutside2
  xpos -920
  ypos -106
 }
 Position {
  translate {{Rectangle1.area.r} {parent.Position3.translate.y-input.height}}
  name Position2
  xpos -920
  ypos -81
 }
 Group {
  inputs 0
  name ColorChecker24_After_November_2014
  label "CIE XYZ D50"
  xpos -920
  ypos -352
  addUserKnob {20 colorchecker_tab l "ColorChecker24 - After November 2014"}
  addUserKnob {3 patch_resolution}
  patch_resolution 48
 }
  Group {
   inputs 0
   name bluish_green
   selected true
   xpos 622
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.30451114 0.4143554688 0.344352688 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "bluish green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 6
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_flower
   xpos 512
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2419823988 0.2287175998 0.3282104382 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue flower"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 5
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name foliage
   xpos 402
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1114392339 0.1346792679 0.05239320311 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob foliage
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 4
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_sky
   xpos 292
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1652470004 0.1785519348 0.2546024121 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue sky"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 3
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name light_skin
   xpos 180
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3811104477 0.336202304 0.1852590702 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "light skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 2
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 135
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name dark_skin
   xpos 70
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1136398927 0.09832436105 0.047793811 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "dark skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 1
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 290
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 290
    ypos 158
   }
   Output {
    name Output
    xpos 290
    ypos 230
   }
  end_group
  Group {
   inputs 0
   name orange_yellow
   xpos 622
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4769723742 0.4293377578 0.06005041429 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "orange yellow"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 12
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow_green
   xpos 512
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3427379502 0.4331759409 0.08330791241 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "yellow green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 11
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purple
   xpos 401
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08353888545 0.06276662955 0.1042075686 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob purple
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 10
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name moderate_red
   xpos 290
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2915036416 0.188999956 0.09736350318 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "moderate red"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 9
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purplish_blue
   xpos 180
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1200518326 0.1091090233 0.2874447494 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "purplish blue"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 8
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name orange
   xpos 74
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4073691399 0.3126416159 0.05130591012 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob orange
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 7
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name cyan
   xpos 622
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1247966941 0.180609913 0.2913392383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob cyan
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 18
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name magenta
   xpos 512
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.299122798 0.1895114577 0.2213469194 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob magenta
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 17
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow
   xpos 399
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5888922356 0.5992976803 0.07077420003 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob yellow
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 16
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 182
   }
  end_group
  Group {
   inputs 0
   name red
   xpos 292
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2143728424 0.127800835 0.03868150726 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob red
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 15
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name green
   xpos 182
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1413517689 0.2233437582 0.07287461742 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob green
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 14
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue
   xpos 72
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.06809095613 0.05596214063 0.2077405936 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob blue
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 13
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name black_2
   xpos 623
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.03042544265 0.03151319431 0.02656724434 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "black 2 (1.5 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 24
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_3
   xpos 512
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08448968042 0.08817234828 0.07391630753 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 3.5 (1.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 23
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_5
   xpos 403
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1835495863 0.1906228754 0.1566717383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 5 (.70 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 22
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_6
   xpos 292
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3495921991 0.3648652066 0.3013565492 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 6.5 (.44 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 21
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_8
   xpos 179
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5665335579 0.5899709702 0.4828473821 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 8 (.23 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 20
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name white_9
   xpos 70
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.8436985288 0.8806903203 0.6936778752 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "white 9.5 (.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 19
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 134
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  ContactSheet {
   inputs 24
   width {{"rint(parent.patch_resolution * 6 + gap * 7)"}}
   height {{"rint(parent.patch_resolution * 4 + gap * 5)"}}
   rows 4
   columns 6
   startframe 1
   endframe 1
   name ContactSheet
   xpos 620
   ypos 206
  }
  Unpremult {
   name Unpremult1
   xpos 620
   ypos 278
  }
  Output {
   name Output
   xpos 620
   ypos 446
  }
 end_group
 BlackOutside {
  name BlackOutside4
  xpos -920
  ypos -298
 }
 Position {
  translate {{parent.Reformat1.box_width*3+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position7
  xpos -920
  ypos -273
 }
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant5
  xpos -700
  ypos -1354
  postage_stamp false
 }
 Dot {
  name Dot25
  xpos -666
  ypos -1302
 }
set N3c8ad800 [stack 0]
 Dot {
  name Dot27
  xpos -1546
  ypos -1302
 }
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox1
  xpos -1580
  ypos -994
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  color {{p1}}
  name Ramp3
  xpos -1580
  ypos -898
 }
 ColorLookup {
  lut {master {}
    red {curve}
    green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
    blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
    alpha {}}
  name ColorLookup7
  label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
  xpos -1580
  ypos -790
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace12
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1580
  ypos -688
 }
 Fill {
  output alpha
  name Fill5
  xpos -1580
  ypos -639
 }
 BlackOutside {
  name BlackOutside7
  xpos -1580
  ypos -562
 }
 Position {
  translate {6 {parent.Position1.translate.y-input.height}}
  name Position3
  xpos -1580
  ypos -538
 }
 Dot {
  name Dot15
  xpos -1546
  ypos -414
 }
push $N3c8ad800
 Reformat {
  type "to box"
  box_width 2048
  box_height 2048
  box_fixed true
  name ReformatBox4
  xpos -700
  ypos -1258
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression7
  xpos -700
  ypos -1209
 }
 Dot {
  name Dot10
  xpos -666
  ypos -1158
 }
set N3c85dc00 [stack 0]
 Dot {
  name Dot26
  xpos -886
  ypos -1158
 }
set N3c85d800 [stack 0]
 Dot {
  name Dot23
  xpos -1106
  ypos -1158
 }
set N3c85d400 [stack 0]
 Dot {
  name Dot12
  xpos -1326
  ypos -1158
 }
 Mirror2 {
  flip true
  flop true
  name Mirror2_1
  xpos -1360
  ypos -1042
 }
 Reformat {
  type "to box"
  box_width 512
  box_height {{box_width}}
  box_fixed true
  name Reformat1
  xpos -1360
  ypos -994
 }
 Gamma {
  channels rgb
  value 2
  name Gamma1
  xpos -1360
  ypos -898
 }
 Multiply {
  channels rgb
  value 8000
  name Multiply1
  label "\[value value]"
  xpos -1360
  ypos -811
 }
 ColorLookup {
  lut {master {}
    red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
    green {curve R 0.6589999795 x50 0.6542205811 0.6484853029 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6457066536 0.6532088518 0.6575522423 0.6589999795}
    blue {curve R 0.3160000145 x50 0.324739933 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
    alpha {}}
  name ColorLookup5
  label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
  xpos -1360
  ypos -775
 }
 Multiply {
  channels rgb
  value {0.31 1 1 1}
  name Multiply2
  label "dim boundary"
  xpos -1360
  ypos -725
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace5
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1360
  ypos -688
 }
 Fill {
  output alpha
  name Fill4
  xpos -1360
  ypos -639
 }
 BlackOutside {
  name BlackOutside1
  xpos -1360
  ypos -562
 }
 Position {
  translate {6 {ReformatBox4.box_width-input.width}}
  name Position1
  xpos -1360
  ypos -538
 }
 Dot {
  name Dot24
  xpos -1326
  ypos -486
 }
push $N3c85d400
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox2
  xpos -1140
  ypos -994
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression1
  xpos -1140
  ypos -898
 }
set N3c829000 [stack 0]
 Dot {
  name Dot8
  xpos -996
  ypos -894
 }
 ColorLookup {
  lut {master {curve L 0 s0 t0.9499999881 C k x0.308139503 1 s0}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup1
  xpos -1030
  ypos -849
 }
 Dot {
  name Dot14
  xpos -996
  ypos -750
 }
push $N3c829000
 Multiply {
  channels rgb
  value 269
  name Multiply5
  label "\[value value]"
  xpos -1140
  ypos -856
 }
 ColorLookup {
  lut {master {}
    red {curve C 1.8783474 1.85965741 1.8410753 1.82260251 1.80424976 1.78602886 1.76794314 1.75000143 1.73221421 1.71458244 1.69711792 1.67982578 1.66271067 1.6457777 1.62903571 1.6124835 1.59613538 1.57998943 1.56404996 1.54832447 1.5328095 1.51751649 1.50244594 1.48759735 1.47297573 1.45858264 1.44442391 1.43049574 1.41680288 1.40334678 1.39012623 1.37714779 1.36440396 1.35190022 1.33963728 1.32761216 1.31582856 1.30428183 1.29297352 1.28190565 1.27107596 1.2604804 1.25012183 1.23999798 1.23010659 1.22044563 1.21101499 1.20181489 1.19284034 1.18408906 1.17556167 1.16725397 1.15916491 1.15129638 1.14363372 1.13618886 1.12895167 1.12192106 1.11509454 1.10846853 1.10204577 1.09580922 1.08977199 1.08392429 1.07826447 1.07278681 1.06749392 1.06237841 1.05743873 1.05267084 1.04807138 1.04364109 1.03937256 1.03526449 1.03131545 1.02751946 1.02387333 1.02037668 1.01702523 1.01381445 1.01074362 1.00780725 1.00500631 1.00233305 0.99978602 0.99736285 0.9950608 0.99287677 0.99080539 0.98884678 0.98699367 0.9852494 0.98361033 0.98206747 0.98062134 0.97926998 0.97800934 0.97683728 0.97575116 0.97474778 0.97382426 0.97297859 0.97220623 0.97150886 0.97087657 0.97031689 0.96981871 0.96938527 0.96900952 0.96869147 0.96842706 0.96821606 0.96805781 0.96794283 0.96787858 0.96785843 0.96787864 0.96793604 0.96803701 0.96817231 0.96833968 0.96854311 0.96877253 0.96903455 0.96932232 0.96963543 0.96997368 0.97033387 0.97071254 0.9711163 0.97153723 0.97197378 0.97242606 0.97289121 0.97337079 0.97386622 0.97437072 0.97488332 0.97540969 0.97594237 0.97647977 0.97702706 0.97757769 0.97813445 0.97869468 0.97925854 0.97982538 0.98039114 0.98096472 0.98153675 0.98210776 0.98267955 0.98325121 0.98382008 0.98438704 0.9849571 0.98552132 0.98608243 0.98664182 0.98719966 0.98775077 0.98829895 0.98884273 0.98938417 0.98991877 0.9904511 0.99097681 0.99149919 0.99201453 0.99252397 0.99303031 0.99353105 0.99402624 0.99451613 0.99499857 0.99547589 0.99594522 0.99641174 0.99687338 0.99732745 0.99777603 0.9982177 0.99865389 0.999084 0.99950838 0.99992663 1.00033772 1.00074494 1.00114489 1.00153947 1.00192833 1.00231075 1.00268865 1.00305855 1.00342607 1.00378489 1.00413895 1.00448751 1.00483036 1.00517035 1.00550389 1.00583148 1.00615203 1.00646758 1.00678015 1.00708604 1.00738645 1.00768471 1.00797844 1.0082655 1.00854778 1.00882483 1.00909901 1.00936711 1.00963116 1.00989032 1.0101465 1.01039672 1.01064491 1.01088691 1.0111258 1.01135957 1.01158977 1.01181614 1.01203847 1.01225793 1.01247287 1.01268291 1.01289058 1.01309609 1.01329684 1.01349473 1.0136888 1.0138787 1.01406395 1.01424909 1.01442885 1.01460576 1.01478052 1.01495218 1.01512218 1.01528883 1.01545072 1.01561022 1.01576698 1.01592219 1.01607502 1.01622343 1.01636875 1.0165143 1.01665616 1.01679492 1.0169313 1.01706588 1.01719737 1.01732695 1.01745498 1.01757956 1.01770294 1.01782393 1.01794255 1.0180583 1.01817465 1.01828551 1.01839495 1.01850486 1.01861191 1.01871693 1.01882088 1.01891339}
    green {curve C 1}
    blue {curve C 0.00879261 0.00962762 0.010532 0.01151017 0.01256675 0.01370643 0.01493413 0.01625487 0.01767381 0.01919618 0.02082733 0.02257277 0.02443803 0.02642871 0.02855051 0.03080913 0.0332104 0.0357601 0.03846392 0.04132775 0.04435719 0.04755813 0.05093599 0.05449668 0.0582453 0.0621875 0.06632853 0.07067341 0.07522713 0.07999477 0.08498063 0.09018957 0.09562518 0.10129225 0.10719412 0.11333443 0.11971687 0.12634411 0.133219 0.14034435 0.14772213 0.15535444 0.16324303 0.17138906 0.179794 0.18845794 0.197382 0.20656651 0.21601067 0.22571453 0.23567709 0.24589771 0.25637382 0.26710594 0.2780903 0.28932518 0.30080822 0.3125369 0.32450783 0.33671761 0.34916404 0.36183971 0.37474373 0.38787127 0.40121818 0.41477671 0.42854655 0.44251823 0.45668846 0.47105014 0.48559928 0.50033116 0.5152359 0.5303098 0.5455451 0.56093836 0.5764783 0.59215891 0.60797763 0.62392306 0.63999057 0.65616876 0.6724565 0.68884456 0.70532417 0.72188419 0.73852479 0.7552371 0.77200818 0.78883314 0.80570388 0.82261622 0.83956301 0.8565321 0.87351894 0.89051074 0.90751225 0.92450547 0.94148719 0.95845115 0.97538745 0.99229181 1.00915313 1.02597356 1.04273522 1.05944169 1.07608175 1.09265125 1.10914159 1.12555146 1.14187002 1.15809321 1.1742171 1.190238 1.20614767 1.22194457 1.23762202 1.2531724 1.26859927 1.28389311 1.29905295 1.31407428 1.32895291 1.34368753 1.35827363 1.3727088 1.38699389 1.40111876 1.41508293 1.42889357 1.44254065 1.45602405 1.46934104 1.48249614 1.49548101 1.50830269 1.5209527 1.53343177 1.54574537 1.5578897 1.56985986 1.5816654 1.59329891 1.60476208 1.61605716 1.62718153 1.63813758 1.64892519 1.65955138 1.67000985 1.68030369 1.69043732 1.70040607 1.71021223 1.71985734 1.72934508 1.73867714 1.74785423 1.75688136 1.76575518 1.77447391 1.78304338 1.79146802 1.79975164 1.80788386 1.81587982 1.82373333 1.83144975 1.83902776 1.84647095 1.85378456 1.86096811 1.86802399 1.87495112 1.88175035 1.88842535 1.89497983 1.90141833 1.90774179 1.91394711 1.92004013 1.92602086 1.93188739 1.93765306 1.94330883 1.94886208 1.95430994 1.95965815 1.96490622 1.97005856 1.97511387 1.98007631 1.98494554 1.98972344 1.99441445 1.99901712 2.00353193 2.00796437 2.01231384 2.01658392 2.02076721 2.02487659 2.02890825 2.03286695 2.03675175 2.04056406 2.04430199 2.04797506 2.05157685 2.05511236 2.0585804 2.06198287 2.06532407 2.06860161 2.07181907 2.07497644 2.07807779 2.0811162 2.08409977 2.08702946 2.08990335 2.09272337 2.09549189 2.0982089 2.10087585 2.10349345 2.10606146 2.1085825 2.11105394 2.11348104 2.11586332 2.11820364 2.12050176 2.12275648 2.12496805 2.127141 2.12927723 2.13136625 2.13341999 2.13543844 2.13741732 2.13936305 2.1412704 2.1431427 2.14498401 2.14678812 2.14856291 2.1503005 2.15200949 2.15368938 2.15533352 2.15695238 2.15853977 2.16009951 2.16162968 2.16313291 2.16460824 2.16605687 2.16747928 2.16887903 2.17024994 2.1715951 2.17291784 2.17421341 2.17548871 2.17674041 2.17797112 2.17918396 2.18036819 2.18143296}
    alpha {}}
  name ColorLookup3
  label "Planckian Locus 0-269"
  xpos -1140
  ypos -808
 }
 Multiply {
  inputs 1+1
  channels rgb
  value 0
  maskChannelMask rgba.red
  invert_mask true
  name Multiply3
  label dim
  xpos -1140
  ypos -760
 }
 BlackOutside {
  name BlackOutside6
  xpos -1140
  ypos -706
 }
 Position {
  translate {6 {parent.Position2.translate.y-input.height}}
  name Position8
  xpos -1140
  ypos -682
 }
 Dot {
  name Dot28
  xpos -1106
  ypos -654
 }
push $N3c85d800
 Dot {
  name Dot4
  xpos -886
  ypos -1086
 }
set N3c7c2400 [stack 0]
 Rectangle {
  replace true
  area {0 0 6 {height}}
  name Rectangle1
  xpos -810
  ypos -1089
 }
 BlackOutside {
  name BlackOutside5
  xpos -810
  ypos -1041
 }
push $N3c7c2400
 Radial {
  inputs 1+1
  replace true
  area {-5422 -3542 7470 5590}
  softness 0
  ramp linear
  color {0.0719 0.02604 0.0001 1}
  p1 {0 0}
  color0 {0.039378 0.001097 0.188331 1}
  p0 {0 2048}
  name Radial1
  xpos -920
  ypos -1041
 }
 Dot {
  name Dot9
  xpos -886
  ypos -894
 }
push $N3c85dc00
 Gamma {
  channels rgba
  value 0.5
  name Gamma2
  xpos -700
  ypos -1120
 }
 Expression {
  temp_name0 start
  temp_expr0 360
  temp_name1 end
  temp_expr1 830
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 r*(end-start)+start
  channel1 none
  channel2 none
  expr3 1
  name Expression2
  label "360nm to 830nm"
  xpos -700
  ypos -1096
 }
 ColorLookup {
  lut {master {}
    red {curve x360 0.0001299 C 0.00014585 0.0001638 0.000184 0.00020669 0.0002321 0.00026073 0.00029307 0.00032939 0.00036991 0.0004149 0.00046416 0.00051899 0.00058185 0.00065523 0.0007416 0.00084503 0.00096453 0.00109495 0.00123115 0.001368 0.00150205 0.00164233 0.00180238 0.00199576 0.002236 0.00253539 0.0028926 0.00330083 0.00375324 0.004243 0.00476239 0.00533005 0.00597871 0.00674112 0.00765 0.00875137 0.01002888 0.0114217 0.01286901 0.01431 0.01570443 0.01714744 0.01878122 0.02074801 0.02319 0.02620736 0.02978248 0.03388092 0.03846824 0.04351 0.0489956 0.0550226 0.0617188 0.069212 0.07763 0.08695811 0.09717672 0.1084063 0.1207672 0.13438 0.1493582 0.16539571 0.1819831 0.19861101 0.21477 0.23018681 0.24487969 0.25877729 0.27180791 0.28389999 0.29494381 0.3048965 0.31378731 0.32164541 0.3285 0.3343513 0.33921009 0.34312129 0.3461296 0.34828001 0.3495999 0.3501474 0.35001299 0.349287 0.34806001 0.34637329 0.34426239 0.3418088 0.3390941 0.3362 0.33319771 0.33004111 0.32663569 0.32288679 0.31869999 0.3140251 0.30888399 0.3032904 0.2972579 0.29080001 0.28397009 0.27672139 0.2689178 0.26042271 0.2511 0.2408475 0.2298512 0.2184072 0.2068115 0.19536 0.18421359 0.1733273 0.16268811 0.1522833 0.14210001 0.1321786 0.1225696 0.1132752 0.1042979 0.09564 0.08729955 0.07930804 0.07171776 0.06458099 0.05795001 0.05186211 0.04628152 0.04115088 0.03641283 0.03201 0.0279172 0.0241444 0.020687 0.0175404 0.0147 0.01216179 0.00991996 0.00796724 0.00629635 0.0049 0.00377717 0.00294532 0.00242488 0.00223629 0.0024 0.00292552 0.00383656 0.00517484 0.00698208 0.0093 0.01214949 0.01553588 0.01947752 0.02399277 0.0291 0.03481485 0.04112016 0.04798504 0.05537861 0.06327 0.07163501 0.08046224 0.08973996 0.09945645 0.1096 0.1201674 0.1311145 0.1423679 0.15385421 0.1655 0.17725711 0.18914001 0.2011694 0.21336579 0.2257499 0.2383209 0.2510668 0.26399219 0.2771017 0.2904 0.30389121 0.31757259 0.33143839 0.3454828 0.35969999 0.37408391 0.3886396 0.4033784 0.41831151 0.43344989 0.44879529 0.46433601 0.480064 0.49597129 0.51205009 0.52829587 0.54469162 0.56120938 0.57782149 0.59450001 0.6112209 0.62797582 0.64476019 0.66156971 0.67839998 0.69523919 0.7120586 0.72882837 0.7455188 0.76209998 0.77854317 0.79482561 0.81092638 0.82682478 0.84249997 0.85793251 0.87308162 0.88789439 0.90231812 0.9163 0.9297995 0.94279838 0.95527762 0.96721792 0.97860003 0.9893856 0.99954879 1.00908923 1.01800644 1.02629995 1.03398275 1.04098594 1.04718804 1.05246675 1.05669999 1.05979443 1.06179917 1.06280684 1.0629096 1.06219995 1.06073523 1.05844355 1.05522442 1.05097675 1.04560006 1.03903687 1.03136074 1.02266622 1.0130477 1.00259995 0.99136752 0.97933137 0.96649158 0.9528479 0.93839997 0.92319399 0.90724403 0.89050198 0.87291998 0.85444993 0.83508402 0.814946 0.794186 0.77295399 0.75139999 0.72958362 0.70758879 0.68560219 0.66381037 0.64240003 0.62151492 0.6011138 0.58110517 0.56139767 0.54189998 0.52259952 0.50354642 0.4847436 0.46619391 0.4479 0.42986131 0.41209799 0.39464399 0.37753329 0.3608 0.34445629 0.32851681 0.31301919 0.29800111 0.28349999 0.26954481 0.25611839 0.2431896 0.2307272 0.21870001 0.2070971 0.19592319 0.1851708 0.1748323 0.1649 0.1553667 0.14623 0.13749 0.1291467 0.1212 0.1136397 0.106465 0.09969044 0.09333061 0.0874 0.08190096 0.07680428 0.07207712 0.06768664 0.0636 0.05980685 0.05628216 0.05297104 0.04981861 0.04677 0.04378405 0.04087536 0.03807264 0.03540461 0.0329 0.03056419 0.02838056 0.02634484 0.02445275 0.0227 0.02108429 0.01959988 0.01823732 0.01698717 0.01584 0.01479064 0.01383132 0.01294868 0.0121292 0.01135916 0.01062935 0.00993885 0.00928842 0.00867885 0.00811092 0.00758239 0.00708875 0.00662731 0.00619541 0.00579035 0.00540983 0.00505258 0.00471751 0.00440351 0.00410946 0.00383391 0.00357575 0.00333434 0.00310907 0.00289933 0.00270435 0.00252302 0.00235417 0.00219662 0.00204919 0.00191096 0.00178144 0.00166011 0.00154646 0.00143997 0.00134004 0.00124628 0.00115847 0.00107643 0.00099995 0.00092874 0.00086243 0.00080075 0.0007434 0.00069008 0.00064052 0.0005945 0.00055186 0.00051243 0.00047602 0.00044245 0.00041151 0.00038298 0.00035665 0.0003323 0.00030976 0.00028889 0.00026954 0.00025157 0.00023483 0.00021917 0.00020453 0.00019084 0.00017807 0.00016615 0.00015502 0.00014462 0.00013491 0.00012585 0.00011741 0.00010955 0.00010222 9.539e-05 8.902e-05 8.308e-05 7.751e-05 7.231e-05 6.746e-05 6.293e-05 5.871e-05 5.477e-05 5.11e-05 4.768e-05 4.449e-05 4.151e-05 3.873e-05 3.614e-05 3.372e-05 3.146e-05 2.935e-05 2.738e-05 2.552e-05 2.379e-05 2.218e-05 2.067e-05 1.927e-05 1.797e-05 1.675e-05 1.562e-05 1.456e-05 1.357e-05 1.265e-05 1.18e-05 1.1e-05 1.025e-05 9.56e-06 8.91e-06 8.31e-06 7.75e-06 7.22e-06 6.73e-06 6.28e-06 5.85e-06 5.46e-06 5.09e-06 4.74e-06 4.42e-06 4.12e-06 3.84e-06 3.58e-06 3.34e-06 3.11e-06 2.9e-06 2.71e-06 2.52e-06 2.35e-06 2.19e-06 2.04e-06 1.91e-06 1.78e-06 1.66e-06 1.54e-06 1.44e-06 1.34e-06 S 1.25e-06}
    green {curve x360 3.92e-06 C 4.39e-06 4.93e-06 5.53e-06 6.21e-06 6.97e-06 7.81e-06 8.77e-06 9.84e-06 1.104e-05 1.239e-05 1.389e-05 1.556e-05 1.744e-05 1.958e-05 2.202e-05 2.484e-05 2.804e-05 3.153e-05 3.522e-05 3.9e-05 4.283e-05 4.691e-05 5.159e-05 5.718e-05 6.4e-05 7.234e-05 8.221e-05 9.351e-05 0.00010614 0.00012 0.00013498 0.00015149 0.00017021 0.00019182 0.000217 0.00024691 0.00028124 0.00031852 0.00035727 0.000396 0.00043371 0.00047302 0.00051788 0.00057222 0.00064 0.00072456 0.0008255 0.00094116 0.00106988 0.00121 0.00136209 0.00153075 0.00172037 0.00193532 0.00218 0.0024548 0.002764 0.0031178 0.0035264 0.004 0.00454624 0.00515932 0.00582928 0.00654616 0.0073 0.00808651 0.00890872 0.00976768 0.01066443 0.0116 0.01257317 0.01358272 0.01462968 0.01571509 0.01684 0.01800736 0.01921448 0.02045392 0.02171824 0.023 0.02429461 0.02561024 0.02695857 0.02835125 0.0298 0.03131083 0.03288368 0.03452112 0.03622571 0.038 0.03984667 0.041768 0.043766 0.04584267 0.048 0.05024368 0.05257304 0.05498056 0.05745872 0.06 0.06260197 0.06527752 0.06804208 0.07091109 0.0739 0.077016 0.0802664 0.0836668 0.0872328 0.09098 0.09491755 0.09904584 0.1033674 0.1078846 0.1126 0.117532 0.1226744 0.12799279 0.1334528 0.13902 0.1446764 0.1504693 0.15646189 0.1627177 0.1693 0.1762431 0.18355811 0.1912735 0.19941799 0.20802 0.2171199 0.2267345 0.2368571 0.2474812 0.2586 0.2701849 0.28229389 0.2950505 0.30857801 0.32300001 0.33840209 0.35468581 0.37169859 0.3892875 0.4073 0.42562991 0.44430959 0.4633944 0.48293951 0.50300002 0.52356929 0.54451197 0.56568998 0.58696532 0.60820001 0.6293456 0.65030682 0.67087519 0.69084239 0.70999998 0.72818518 0.74546361 0.76196939 0.7778368 0.79320002 0.80811042 0.82249618 0.83630681 0.8494916 0.86199999 0.87381083 0.88496238 0.89549363 0.90544319 0.91485012 0.92373478 0.93209243 0.93992257 0.94722521 0.954 0.9602561 0.96600741 0.97126061 0.97602248 0.98030001 0.98409241 0.98741817 0.99031281 0.99281162 0.99495012 0.99671078 0.99809831 0.99911201 0.99974817 1 0.99985671 0.99930459 0.99832553 0.99689871 0.995 0.9926005 0.98974258 0.98644441 0.98272407 0.97860003 0.97408372 0.96917123 0.96385682 0.95813489 0.95200002 0.94545043 0.93849921 0.93116277 0.92345762 0.91540003 0.90700638 0.89827722 0.8892048 0.8797816 0.87 0.85986131 0.849392 0.83862197 0.82758129 0.81629997 0.80479473 0.793082 0.781192 0.76915473 0.75700003 0.74475408 0.73242241 0.7200036 0.70749652 0.69489998 0.68221921 0.66947162 0.65667439 0.64384478 0.63099998 0.61815548 0.60531437 0.59247559 0.57963789 0.5668 0.5539611 0.54113722 0.5283528 0.51563227 0.50300002 0.4904688 0.47803041 0.46567759 0.4534032 0.44119999 0.42908001 0.417036 0.40503201 0.39303201 0.38100001 0.36891839 0.3568272 0.34477681 0.33281761 0.32100001 0.30933809 0.2978504 0.28659359 0.27562451 0.26499999 0.25476319 0.2448896 0.2353344 0.22605281 0.21699999 0.20816161 0.1995488 0.1911552 0.1829744 0.175 0.1672235 0.15964641 0.1522776 0.1451259 0.1382 0.1315003 0.1250248 0.1187792 0.1127691 0.107 0.1014762 0.09618864 0.09112296 0.08626485 0.0816 0.07712064 0.07282552 0.06871008 0.06476976 0.061 0.05739621 0.05395504 0.05067376 0.04754965 0.04458 0.04175872 0.03908496 0.03656384 0.03420048 0.032 0.02996261 0.02807664 0.02632936 0.02470805 0.0232 0.02180077 0.02050112 0.01928108 0.01812069 0.017 0.01590379 0.01483718 0.01381068 0.01283478 0.01192 0.01106831 0.01027339 0.00953331 0.00884616 0.00821 0.00762378 0.00708542 0.00659148 0.00613848 0.005723 0.00534306 0.0049958 0.0046764 0.00438007 0.004102 0.00383845 0.0035891 0.00335422 0.00313409 0.002929 0.00273814 0.00255988 0.00239324 0.00223728 0.002091 0.00195359 0.00182458 0.00170358 0.00159019 0.001484 0.0013845 0.00129127 0.00120409 0.00112274 0.001047 0.00097659 0.00091111 0.00085013 0.00079324 0.00074 0.00069008 0.00064331 0.0005995 0.00055845 0.00052 0.00048391 0.00045005 0.00041835 0.00038872 0.0003611 0.00033538 0.00031144 0.00028917 0.00026845 0.0002492 0.0002313 0.00021469 0.00019929 0.00018505 0.0001719 0.00015978 0.0001486 0.0001383 0.00012879 0.00012 0.00011186 0.00010432 9.734e-05 9.085e-05 8.48e-05 7.915e-05 7.386e-05 6.892e-05 6.43e-05 6e-05 5.598e-05 5.223e-05 4.872e-05 4.545e-05 4.24e-05 3.956e-05 3.692e-05 3.445e-05 3.215e-05 3e-05 2.799e-05 2.611e-05 2.436e-05 2.272e-05 2.12e-05 1.978e-05 1.845e-05 1.722e-05 1.606e-05 1.499e-05 1.399e-05 1.305e-05 1.218e-05 1.136e-05 1.06e-05 9.89e-06 9.22e-06 8.59e-06 8.01e-06 7.47e-06 6.96e-06 6.49e-06 6.05e-06 5.64e-06 5.26e-06 4.9e-06 4.57e-06 4.26e-06 3.97e-06 3.7e-06 3.45e-06 3.22e-06 3e-06 2.8e-06 2.61e-06 2.43e-06 2.27e-06 2.11e-06 1.97e-06 1.84e-06 1.71e-06 1.6e-06 1.49e-06 1.39e-06 1.29e-06 1.21e-06 1.12e-06 1.05e-06 9.8e-07 9.1e-07 8.5e-07 7.9e-07 7.4e-07 6.9e-07 6.4e-07 6e-07 5.6e-07 5.2e-07 4.8e-07 S 4.5e-07}
    blue {curve x360 0.0006061 C 0.00068088 0.00076515 0.00086001 0.00096659 0.001086 0.00122059 0.00137273 0.00154358 0.00173429 0.001946 0.00217778 0.00243581 0.00273195 0.00307806 0.003486 0.00397523 0.00454088 0.00515832 0.00580291 0.00645 0.00708322 0.00774549 0.00850115 0.00941454 0.01054999 0.0119658 0.01365587 0.01558805 0.01773015 0.02005001 0.02251136 0.02520288 0.02827972 0.03189704 0.03621 0.04143771 0.04750372 0.05411988 0.06099803 0.06785001 0.07448632 0.08136156 0.08915364 0.09854048 0.1102 0.1246133 0.1417017 0.16130351 0.1832568 0.20739999 0.23369209 0.26261139 0.29477459 0.33079851 0.37130001 0.4162091 0.4654642 0.51969481 0.5795303 0.64560002 0.71848381 0.79671329 0.87784588 0.95943898 1.0390501 1.11536729 1.18849707 1.25812328 1.32392955 1.38559997 1.44263518 1.49480355 1.54219031 1.58488071 1.62295997 1.65640485 1.68529594 1.70987451 1.73038209 1.74705994 1.76004458 1.76962328 1.77626371 1.78043342 1.78260004 1.78296816 1.78169978 1.77919817 1.7758671 1.77210998 1.76825893 1.76403904 1.7589438 1.75246632 1.74409997 1.73355949 1.7208581 1.70593691 1.68873715 1.66919994 1.64752865 1.62341273 1.59602225 1.56452799 1.52810001 1.4861114 1.43952155 1.38987994 1.33873618 1.28763998 1.23742235 1.18782425 1.13876104 1.09014797 1.04190004 0.99419761 0.94734728 0.90145308 0.8566193 0.81295007 0.77051729 0.7294448 0.68991357 0.65210491 0.61619997 0.58232862 0.55041617 0.52033758 0.49196729 0.46518001 0.4399246 0.41618359 0.39388219 0.3729459 0.35330001 0.33485779 0.31755209 0.30133751 0.28616861 0.27200001 0.25881711 0.2464838 0.2347718 0.2234533 0.2123 0.20116919 0.19011959 0.1792254 0.1685608 0.1582 0.1481383 0.1383758 0.1289942 0.1200751 0.1117 0.1039048 0.09666748 0.08998272 0.08384531 0.07824999 0.07320899 0.06867816 0.06456784 0.06078835 0.05725001 0.05390435 0.05074664 0.04775276 0.04489859 0.04216 0.03950728 0.03693564 0.03445836 0.03208872 0.02984 0.02771181 0.02569444 0.02378716 0.02198925 0.0203 0.01871805 0.01724036 0.01586364 0.01458461 0.0134 0.01230723 0.01130188 0.01037792 0.00952931 0.00875 0.0080352 0.0073816 0.0067854 0.0062428 0.00575 0.0053036 0.0048998 0.0045342 0.0042024 0.0039 0.0036232 0.0033706 0.0031414 0.0029348 0.00275 0.0025852 0.0024386 0.0023094 0.0021968 0.0021 0.00201773 0.0019482 0.0018898 0.00184093 0.0018 0.00176627 0.0017378 0.0017112 0.00168307 0.00165 0.00161013 0.0015644 0.0015136 0.00145853 0.0014 0.00133667 0.00127 0.001205 0.00114667 0.0011 0.0010688 0.0010494 0.0010356 0.0010212 0.001 0.00096864 0.00092992 0.00088688 0.00084256 0.0008 0.00076096 0.00072368 0.00068592 0.00064544 0.0006 0.00054787 0.0004916 0.0004354 0.00038347 0.00034 0.00030725 0.00028316 0.00026544 0.00025181 0.00024 0.00022955 0.00022064 0.00021196 0.00020219 0.00019 0.00017421 0.00015564 0.00013596 0.00011685 0.0001 8.613e-05 7.46e-05 6.5e-05 5.693e-05 5e-05 4.416e-05 3.948e-05 3.572e-05 3.264e-05 3e-05 2.765e-05 2.556e-05 2.364e-05 2.181e-05 2e-05 1.813e-05 1.62e-05 1.42e-05 1.213e-05 1e-05 7.73e-06 5.4e-06 3.2e-06 1.33e-06 0 0 0 0 0 0 0 0 S 0}
    alpha {}}
  name ColorLookup4
  label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
  xpos -700
  ypos -1030
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeLineOfPurples
  xpos -700
  ypos -897
  disable {{!parent.draw_line_of_purples}}
 }
 Fill {
  color {0 0 0 1}
  name Disable_SpectralLocus
  xpos -700
  ypos -826
  disable {{parent.draw_spectral_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePlanckianLocus
  xpos -700
  ypos -658
  disable {{!parent.draw_planckian_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut
  xpos -700
  ypos -489
  disable {{!parent.draw_pointers_gamut}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut_Samples
  xpos -700
  ypos -417
  disable {{!draw_pointers_samples}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeMacbeth
  xpos -700
  ypos -273
  disable {{!parent.draw_macbeth_chart}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutGrid
  xpos -700
  ypos -81
  disable {{!parent.gamut_grid}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutA
  xpos -700
  ypos 255
  disable {{!parent.gamut_a}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutB
  xpos -700
  ypos 279
  disable {{!parent.gamut_b}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutC
  xpos -700
  ypos 303
  disable {{!parent.gamut_c}}
 }
 Dot {
  name Dot2
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 450
 }
set N3c75d800 [stack 0]
 Dot {
  name Dot5
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 450
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace6
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -590
  ypos 488
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression5
  label "CIE Yxy to CIELuv"
  xpos -590
  ypos 536
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot11
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 618
 }
push $N3c75d800
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  invert true
  name ColorMatrix1
  label "XYZ to working"
  xpos -700
  ypos 488
  disable {{!map_overlays_to_input_gamut}}
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_grid\" iterate pixelWise b2e7b5f8a89bdb0629aa8cc2eae387ef3436f24cb0af642eeba41235874506c4 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 6 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== \"draw_axes\" Bool 1 AA== \"grid_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== 6 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 \"draw_axes\" 1 1 \"grid_color\" 4 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_grid : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n  bool draw_axes;\n  float4 grid_color;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  void draw_grid() \{\n    // grid width in pixels. expresses a 0 to 1 range in CIE xy\n    float grid_width = 1.0f * outsize + offset;\n    // draw grid lines\n    float i = offset;\n    while (i <= grid_width && i > 0.0f) \{\n      write_aa(offset, i, grid_color);\n      write_aa(i, offset, grid_color);\n      i += 1.0;\n    \}\n    // cross-hatching interval in pixels\n    float hatch_interval = (grid_width - offset) * 0.1f;\n    // cross-hatch length in pixels\n    float hatch_width = outsize * 0.01f;\n    i = offset;\n    while (i <= grid_width) \{\n      i += hatch_interval;\n      float j = 0.0;\n      while (j <= hatch_width/2) \{\n        write_aa(offset+j, i, grid_color);\n        write_aa(offset-j, i, grid_color);\n        write_aa(i, offset+j, grid_color);\n        write_aa(i, offset-j, grid_color);\n        j += 1.0;\n      \}\n    \}\n  \}\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n\n    // draw CIExy coordinate system axes\n    if (draw_axes && pos.x == 0 && pos.y == 0) \{\n      draw_grid();\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_grid_padding {{parent.PlotChromaticities.PlotChromaticity_padding}}
  PlotChromaticity_grid_left_margin {{parent.PlotChromaticities.PlotChromaticity_left_margin}}
  PlotChromaticity_grid_tolerance 0.8
  PlotChromaticity_grid_antialias true
  PlotChromaticity_grid_draw_axes {{parent.coordinate_system}}
  PlotChromaticity_grid_grid_color {0.15 0 0.005 1}
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotInput2
  xpos -700
  ypos 608
 }
 FrameHold {
  firstFrame 1
  name FrameHold1
  xpos -700
  ypos 680
  cached true
 }
 Dot {
  name Dot3
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 762
 }
 Input {
  inputs 0
  name Input
  xpos 620
  ypos -1426
 }
 AddChannels {
  name AddChannels1
  xpos 620
  ypos -1360
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat
  xpos 620
  ypos -1282
  disable {{!parent.resample_input}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name CropBBox
  xpos 620
  ypos -1257
 }
 Dot {
  name Dot7
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 162
 }
set N3c6ee000 [stack 0]
 Constant {
  inputs 0
  channels rgb
  color {0 0 0 1}
  format "256 256 0 0 256 256 1 square_256"
  name Constant2
  xpos 400
  ypos 38
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat1
  xpos 400
  ypos 64
  disable {{!parent.resample_input}}
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name Switch1
  xpos 400
  ypos 158
 }
 Fill {
  output rgb
  color 0.18
  name SampleColor
  xpos 290
  ypos 158
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop2
  xpos 290
  ypos 184
 }
 Fill {
  output alpha
  name Fill3
  xpos 290
  ypos 224
 }
 Dot {
  name Dot6
  xpos 324
  ypos 282
 }
set N3c6ec400 [stack 0]
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  name ColorMatrix4
  label "working to XYZ"
  xpos 180
  ypos 272
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace1
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 180
  ypos 320
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression6
  label "CIE Yxy to CIELuv"
  xpos 180
  ypos 368
  disable {{!parent.diagram}}
 }
push $N3c6ec400
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_sample\" iterate pixelWise 20e14b615a937bac78c1a771cbdfd10cc7c5fb6c487f65d0bb2d6633e404b958 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 3 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== 3 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_sample : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  void process(int2 pos) \{\n    // only process the first pixel\n    if (pos.x > 0 && pos.y > 0) return;\n\n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    int2 p = int2(round(out_coord.x), round(out_coord.y));\n    if (dst.bounds.inside(p.x, p.y)) \{\n      for (int k=0; k<3; k++) \{\n        dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n      \}\n      dst(p.x, p.y, 3) = 1.0f;\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_sample_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_sample_left_margin {{parent.left_margin}}
  PlotChromaticity_sample_tolerance 1
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities1
  xpos 290
  ypos 368
 }
 Dot {
  name Dot22
  xpos 324
  ypos 450
 }
set N3c69ac00 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048}}
  name Dilate1
  label "\[value size]"
  xpos 290
  ypos 488
 }
set N3c69a800 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048*2}}
  name Dilate2
  label "\[value size]"
  xpos 180
  ypos 488
 }
push $N3c69ac00
 Dot {
  name Dot21
  xpos -6
  ypos 450
 }
 FilterErode {
  channels rgba
  size {{-Output.width/2048/5}}
  filter triangle
  name FilterErode1
  label "\[value size]"
  xpos -40
  ypos 489
 }
set N3c699c00 [stack 0]
 Dilate {
  channels rgba
  size {0 {parent.Dilate3.size.w}}
  name Dilate4
  label "\[value size]"
  xpos -40
  ypos 584
 }
push $N3c699c00
 Dilate {
  channels rgba
  size {{Output.width*plus_size/100} 0}
  name Dilate3
  label "\[value size]"
  xpos 70
  ypos 488
  addUserKnob {20 User}
  addUserKnob {7 plus_size R 0 4}
  plus_size 0.8
 }
 Merge2 {
  inputs 2
  operation screen
  bbox B
  name Merge9
  xpos 70
  ypos 591
 }
 Merge2 {
  inputs 2
  operation stencil
  bbox B
  name Merge10
  xpos 180
  ypos 591
 }
 Group {
  name HueRotate
  xpos 180
  ypos 639
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -24
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos 15
  }
  Colorspace {
   colorspace_out HSV
   name Colorspace1
   xpos -40
   ypos 72
  }
  Add {
   channels {rgba.red -rgba.green -rgba.blue none}
   value 0.5
   name Add1
   xpos -40
   ypos 111
  }
  Fill {
   output {-rgba.red -rgba.green rgba.blue none}
   name Fill1
   xpos -40
   ypos 147
  }
  Colorspace {
   colorspace_in HSV
   name Colorspace2
   xpos -40
   ypos 183
  }
  Premult {
   name Premult1
   xpos -40
   ypos 231
  }
  Output {
   name Output1
   xpos -40
   ypos 302
  }
 end_group
push $N3c69a800
 Merge2 {
  inputs 2
  bbox B
  name Merge8
  xpos 290
  ypos 638
 }
 Dot {
  name Dot20
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 324
  ypos 690
 }
push $N3c6ee000
 Dot {
  name Dot1
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 162
 }
 Group {
  name GamutToXYZ
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos 730
  ypos 247
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut P3D65
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace2
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 730
  ypos 296
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression4
  label "CIE Yxy to CIELuv"
  xpos 730
  ypos 344
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot13
  label " Pos"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 546
 }
push $N3c6ee000
 Dot {
  name Dot16
  label " Col"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 450
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity\" iterate pixelWise 3e86399c7642fe5c35c23528a644f88a8bf13f967de084ae6842f8be55098c6b 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 4 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== 4 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_left_margin {{parent.left_margin}}
  PlotChromaticity_tolerance 2
  PlotChromaticity_antialias true
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities
  xpos 620
  ypos 536
  disable {{!parent.plot_input}}
 }
 Fill {
  color 0
  name BLACK
  tile_color 0x111111ff
  xpos 620
  ypos 591
  disable {{parent.plot_input}}
 }
 Merge2 {
  inputs 2
  bbox B
  name Merge7
  xpos 620
  ypos 686
  disable {{!parent.enable_sample_color}}
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 620
  ypos 758
 }
 Output {
  name Output
  xpos 620
  ypos 1046
 }
end_group
push $N59d7ac00
OCIOColorSpace {
 in_colorspace "ACES - ACES2065-1"
 out_colorspace scene_linear
 name OCIOColorSpace1
 xpos 737
 ypos -163
}
push $N3bd01800
Clamp {
 name Clamp1
 xpos 190
 ypos 395
}
push $Nc4fe7400
Group {
 name DRT_CAM_Blink3
 label "Input: \[value encoding_in] / \[value primaries_in]\nLimit: \[value primaries_limit] / \[value ssts_luminance.2]nits\nOutput: \[value encoding_out] / \[value primaries_out]\n\[value toneScaleMode]\n\[value camMode]\n\nBodged XYZ_to_LMS_ZCAM matrix\n"
 note_font "Bitstream Vera Sans"
 xpos 464
 ypos 62
 addUserKnob {20 User}
 addUserKnob {26 input_div l Input}
 addUserKnob {4 encoding_in l encoding t "the input log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 "" ""}}
 addUserKnob {4 primaries_in l primaries t "the input primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {4 camMode M {ZCAM "Hellwig 2022" "Hellwig 2022 linearExtension" ""}}
 addUserKnob {4 cat_type l "CAT Type" t "the chromatic adaptation transform to use for converting between white points" M {None "XYZ Scaling" Bradford CAT02 Zhai2018 ""}}
 cat_type Zhai2018
 addUserKnob {26 tonescale_div l Tonescale}
 addUserKnob {4 toneScaleMode l "ToneScale Mode" M {SSTS MMSDC "Daniele Compression Curve" "Mult 0.5" "" "" "" ""}}
 toneScaleMode "Mult 0.5"
 addUserKnob {6 applyTonecurve l "apply Tonecurve" t "toggle the SingleStageToneScale transform" +STARTLINE}
 applyTonecurve true
 addUserKnob {13 ssts_luminance l "SSTS luminance" t "min, mid & peak luminance values in Cd/sqm as parameters for the SSTS"}
 ssts_luminance {1e-06 10 100}
 addUserKnob {26 ssts_luminance_label l " " -STARTLINE T "min / mid / peak"}
 addUserKnob {6 apply_highlight_desat l "apply highlight desat" t "toggle de-saturating the highlights above SSTS mid luminance based on how much the SSTS has compressed them" +STARTLINE}
 apply_highlight_desat true
 addUserKnob {7 desat_highlights l "desat highlights" t "the amount of desaturation applied to the highlights" R 0 5}
 desat_highlights 0.8
 addUserKnob {26 gamut_mapping_div l "Gamut Mapping"}
 addUserKnob {6 apply_gamut_compression l "apply gamut compression " t "toggle the gamut compression towards the limiting primaries" +STARTLINE}
 apply_gamut_compression true
 addUserKnob {4 primaries_limit l primaries t "the limiting primaries of the gamut to which to compress to" M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI ""}}
 primaries_limit sRGB/Rec.709-D65
 addUserKnob {6 discount_illuminant l "discount illuminant (Zhai2018 only)" t "disable the degree of adaptation model for the Zhai2018 CAT\nthis is only effective if the limiting primaries do not use a D65 white point" -STARTLINE}
 addUserKnob {7 cusp_mid_blend l "cusp to mid blend" t "blend the lightness (J) of the focal point of the compression between the lightness of the gamut cusp at the given hue (0.0)  and the mid luminance of the SSTS (1.0)"}
 cusp_mid_blend 0.5
 addUserKnob {26 cusp_mid_blend_label l " " -STARTLINE T "gamut cusp (0) to SSTS mid (1)"}
 addUserKnob {7 focus_distance l "focus distance" t "the distance from the achromatic axis of the focal point of the compression where 0.0 is at the achromatic axis and 1.0 the distance of the gamut cusp at the given hue but on the opposite side of the achomatic axis" R 0 2}
 focus_distance 0.5
 addUserKnob {26 focus_depth_label l " " -STARTLINE T "achromatic (0) to cusp opposite (1)"}
 addUserKnob {13 compression_params l compression t "the threshold, limit and power parameters for the PowerP compression function\nvalues below the threshold will not be compressed and values at the limit will be compressed towards the gamut boundary while the power values defines the shape of the curve"}
 compression_params {0.75 1.2 1.2}
 addUserKnob {26 compression_params_label l " " -STARTLINE T "threshold / limit / power"}
 addUserKnob {7 smooth_cusps l "smooth cusps" t "the amount by how much to smooth the edges and corners of the limiting gamut cube, except the black & white corners."}
 addUserKnob {3 solve_precision l "solve precision" t "the number of iterations used for finding the gamut boundary using the interval bisection method"}
 solve_precision 10
 addUserKnob {3 inverse_solver_iterations l "inverse solver iterations" t "the number of iterations used for finding the original J & M values when applying the inverse gamut compression"}
 inverse_solver_iterations 10
 addUserKnob {26 output_div l Output}
 addUserKnob {4 encoding_out l encoding t "the output log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 ""}}
 addUserKnob {4 primaries_out l primaries t "the output primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {4 viewing_conditions l "viewing conditions" t "the ZCAM viewing conditions" M {dark dim average ""}}
 addUserKnob {7 reference_luminance l "reference luminance" t "the ZCAM reference luminance in Cd/sqm" R 0 200}
 reference_luminance 100
 addUserKnob {7 background_luminance l "background luminance" t "the ZCAM background luminance in Cd/sqm" R 0 100}
 background_luminance 10
 addUserKnob {6 clamp_output l "clamp output" t "clamp the output values between 0,0 and 1.0" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 _1 l "" +STARTLINE T "Daniele Curve Params"}
 addUserKnob {41 DRT_CAM_Kernel_n l n T BlinkScript1.DRT_CAM_Kernel_n}
 addUserKnob {41 DRT_CAM_Kernel_nr l nr T BlinkScript1.DRT_CAM_Kernel_nr}
 addUserKnob {41 DRT_CAM_Kernel_g l g T BlinkScript1.DRT_CAM_Kernel_g}
 addUserKnob {41 DRT_CAM_Kernel_w l w T BlinkScript1.DRT_CAM_Kernel_w}
 addUserKnob {41 DRT_CAM_Kernel_t_1 l t_1 T BlinkScript1.DRT_CAM_Kernel_t_1}
 addUserKnob {26 ""}
 addUserKnob {26 direction_div l Direction}
 addUserKnob {6 invert t "apply the pseudo-inverse transform" +STARTLINE}
 addUserKnob {26 blink_kernel_div l "Blink Kernel"}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
}
 ColorMatrix {
  inputs 0
  matrix {
      {0.368792 0.531205 0.103642}
      {-0.193458 1.03225 0.131287}
      {-0.0348077 0.283972 0.671427}
    }
  name preMatrix
  xpos -624
  ypos -256
 }
 Input {
  inputs 0
  name Input1
  xpos -908
  ypos -292
 }
set N3d692c00 [stack 0]
 Colorspace {
  colorspace_out CIE-XYZ
  name Colorspace2
  xpos -1067
  ypos -213
 }
push $N3d692c00
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/CAM_DRT_v016.blink
  recompileCount 510
  KernelDescription "2 \"DRT_CAM_Kernel\" iterate pixelWise 87b0339abe28c1d093e8ecbe313c11d27534adc946dd360ce7186b086e7cd7f2 2 \"src\" Read Point \"dst\" Write Point 59 \"encodingIn\" Int 1 AAAAAA== \"primariesIn\" Int 1 AAAAAA== \"toneScaleMode\" Int 1 AAAAAA== \"camMode\" Int 1 AAAAAA== \"catType\" Int 1 AAAAAA== \"discountIlluminant\" Bool 1 AA== \"referenceLuminance\" Float 1 AAAAAA== \"backgroundLuminance\" Float 1 AAAAAA== \"viewingConditions\" Int 1 AAAAAA== \"applyTonecurve\" Bool 1 AA== \"sstsLuminance\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"applyHighlightDesat\" Bool 1 AA== \"desatHighlights\" Float 1 AAAAAA== \"primariesLimit\" Int 1 AAAAAA== \"applyGamutCompression\" Bool 1 AA== \"cuspMidBlend\" Float 1 AAAAAA== \"focusDistance\" Float 1 AAAAAA== \"compressionFuncParams\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"smoothCusps\" Float 1 AAAAAA== \"boundarySolvePrecision\" Int 1 AAAAAA== \"inverseSolverIterations\" Int 1 AAAAAA== \"encodingOut\" Int 1 AAAAAA== \"primariesOut\" Int 1 AAAAAA== \"clampOutput\" Bool 1 AA== \"invert\" Bool 1 AA== \"XYZ_to_LMS_ZCAM\" Float 9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_rho\" Float 1 AAAAAA== \"Lp\" Float 1 AAAAAA== \"su\" Float 1 AAAAAA== \"c0\" Float 1 AAAAAA== \"cs\" Float 1 AAAAAA== \"c1\" Float 1 AAAAAA== \"p\" Float 1 AAAAAA== \"w1\" Float 1 AAAAAA== \"s1\" Float 1 AAAAAA== \"ex\" Float 1 AAAAAA== \"eb\" Float 1 AAAAAA== \"e0\" Float 1 AAAAAA== \"s0\" Float 1 AAAAAA== \"fl\" Float 1 AAAAAA== \"dch\" Float 1 AAAAAA== \"sat\" Float 1 AAAAAA== \"mmScaleFactor\" Float 1 AAAAAA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== \"catDataSelection\" Int 1 AAAAAA== \"rxy\" Float 2 AAAAAAAAAAA= \"gxy\" Float 2 AAAAAAAAAAA= \"bxy\" Float 2 AAAAAAAAAAA= \"wxy\" Float 2 AAAAAAAAAAA= \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"L_B\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== 59 \"encodingIn\" 1 1 \"primariesIn\" 1 1 \"toneScaleMode\" 1 1 \"camMode\" 1 1 \"catType\" 1 1 \"discountIlluminant\" 1 1 \"referenceLuminance\" 1 1 \"backgroundLuminance\" 1 1 \"viewingConditions\" 1 1 \"applyTonecurve\" 1 1 \"sstsLuminance\" 3 1 \"applyHighlightDesat\" 1 1 \"desatHighlights\" 1 1 \"primariesLimit\" 1 1 \"applyGamutCompression\" 1 1 \"cuspMidBlend\" 1 1 \"focusDistance\" 1 1 \"compressionFuncParams\" 3 1 \"smoothCusps\" 1 1 \"boundarySolvePrecision\" 1 1 \"inverseSolverIterations\" 1 1 \"encodingOut\" 1 1 \"primariesOut\" 1 1 \"clampOutput\" 1 1 \"invert\" 1 1 \"XYZ_to_LMS_ZCAM\" 9 1 \"zcam_rho\" 1 1 \"Lp\" 1 1 \"su\" 1 1 \"c0\" 1 1 \"cs\" 1 1 \"c1\" 1 1 \"p\" 1 1 \"w1\" 1 1 \"s1\" 1 1 \"ex\" 1 1 \"eb\" 1 1 \"e0\" 1 1 \"s0\" 1 1 \"fl\" 1 1 \"dch\" 1 1 \"sat\" 1 1 \"mmScaleFactor\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 \"catDataSelection\" 1 1 \"rxy\" 2 1 \"gxy\" 2 1 \"bxy\" 2 1 \"wxy\" 2 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"L_B\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 71 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_L_A\" Float 1 1 AAAAAA== \"zcam_F_b\" Float 1 1 AAAAAA== \"zcam_F_L\" Float 1 1 AAAAAA== \"zcam_cb\" Float 1 1 AAAAAA== \"zcam_cg\" Float 1 1 AAAAAA== \"zcam_c1\" Float 1 1 AAAAAA== \"zcam_c2\" Float 1 1 AAAAAA== \"zcam_c3\" Float 1 1 AAAAAA== \"zcam_eta\" Float 1 1 AAAAAA== \"zcam_luminance_shift\" Float 1 1 AAAAAA== \"zcam_viewing_conditions_coeff\" Float 1 1 AAAAAA== \"cat_adaptDegree\" Float 1 1 AAAAAA== \"st2084_m_1\" Float 1 1 AAAAAA== \"st2084_m_2\" Float 1 1 AAAAAA== \"st2084_c_1\" Float 1 1 AAAAAA== \"st2084_c_2\" Float 1 1 AAAAAA== \"st2084_c_3\" Float 1 1 AAAAAA== \"st2084_m_1_d\" Float 1 1 AAAAAA== \"st2084_m_2_d\" Float 1 1 AAAAAA== \"st2084_L_p\" Float 1 1 AAAAAA== \"ssts_min_stop_sdr\" Float 1 1 AAAAAA== \"ssts_max_stop_sdr\" Float 1 1 AAAAAA== \"ssts_min_stop_rrt\" Float 1 1 AAAAAA== \"ssts_max_stop_rrt\" Float 1 1 AAAAAA== \"ssts_min_lum_sdr\" Float 1 1 AAAAAA== \"ssts_max_lum_sdr\" Float 1 1 AAAAAA== \"ssts_min_lum_rrt\" Float 1 1 AAAAAA== \"ssts_max_lum_rrt\" Float 1 1 AAAAAA== \"ssts_n_knots_low\" Int 1 1 AAAAAA== \"ssts_n_knots_high\" Int 1 1 AAAAAA== \"ssts_m1\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_minTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_maxTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsLow\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsHigh\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_min_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_mid_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_max_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_knotIncLow\" Float 1 1 AAAAAA== \"ssts_knotIncHigh\" Float 1 1 AAAAAA== \"ssts_pctLow\" Float 1 1 AAAAAA== \"ssts_pctHigh\" Float 1 1 AAAAAA== \"ssts_coefsLow\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_coefsHigh\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_expShift\" Float 1 1 AAAAAA== \"ssts_paramMin\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMid\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMax\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"identity_matrix\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_Bradford\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_CAT02\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"LMS_to_Izazbz\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"d65White\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"inWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"refWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"boundaryRGB\" Float 1 1 AAAAAA== \"limitJmax\" Float 1 1 AAAAAA== \"limitMmax\" Float 1 1 AAAAAA== \"gamutCuspTableSize\" Int 1 1 AAAAAA== \"gamutCuspTableUnsorted\" FloatgamutCuspTable\" FloatfocusDistanceClamped\" Float 1 1 AAAAAA=="
  kernelSource "\nkernel DRT_CAM_Kernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    //\n    // Input Parameters\n    //\n\n    // Encoding of the Input Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingIn;\n\n    // Primaries of the Input Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesIn;\n\n\n    // Tonescale mode\n    // 0: SSTS\n    // 1: MMSDC\n    // 2: Daniele Compression Curve\n    int toneScaleMode;\n\n    // CAM mode\n    // 0: ZCAM\n    // 1: Hellwig 2022\n    // 2: Hellwig 2022 linearExtension\n    int camMode;\n\n    \n\n    //\n    // ZCAM Paramters\n    //\n\n    // Chomatic Adaptation Transform to Use\n    // 0: None\n    // 1: XYZ Scaling\n    // 2: Bradford\n    // 3: CAT02\n    // 4: Zhai2018 (two-step)\n    int catType;\n\n    // Disable Degree of Adaptation Model for Zhai2018 CAT\n    // This is only effective if the limit primaries have a non-D65 white point\n    // since the input conversion is assumed to be fully adapted\n    // and the output conversion does not apply a CAT\n    bool discountIlluminant;\n\n    // Reference Luminance in Cd/sqm\n    float referenceLuminance;\n\n    // Background Luminance in Cd/sqm\n    float backgroundLuminance;\n\n    // Viewing Conditions (for output)\n    // 0: Dark\n    // 1: Dim\n    // 2: Average\n    int viewingConditions;\n\n    //\n    // SSTS Parameters\n    //\n\n    // Toggle SSTS Tone Mapping\n    bool applyTonecurve;\n    \n    // SSTS Luminances Min/Mid/Peak\n    float3 sstsLuminance;\n\n    // Toggle Highlight De-Saturation\n    bool applyHighlightDesat;\n\n    // Scale the De-Saturation Applied to the Highlights\n    float desatHighlights;\n\n    //\n    // Gamut Mapping Parameters\n    //\n\n    // Primaries of the Target Gamut\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesLimit;\n\n\n    // Toggle Gamut Compression\n    bool applyGamutCompression;\n\n    // Blend Between Compressing towards\n    // Target Gamut Cusp Luminance (0.0)\n    // and SSTS Mid Luminance (1.0)\n    float cuspMidBlend;\n\n    // the distance of the compression focal point\n    // from the achromatic axis\n    // normalised to the distance of the gamut cusp\n    float focusDistance;\n\n    // Gamut Compression Fuction Parameters\n    // Threshold / Limit / Power\n    float3 compressionFuncParams;\n\n    // How much the edges of the target RGB cube are smoothed when finding the gamut boundary \n    // in order to reduce visible contours at the gamut cusps\n    float smoothCusps;\n\n    // When solving for the target gamut boundary\n    // how many search interval halving steps to perform\n    int boundarySolvePrecision;\n\n    // Number of iterations to converge on the uncompressed J value \n    // Because of the compression focus point changes depending on the J value of the uncompressed sample\n    // we cannot perfectly invert it since the original J value has now been changed by the forward compression\n    // we can converge on a reasonable approximation of the original J value by iterating the inverse compression\n    // although this is quite an expensive operation\n    int inverseSolverIterations;\n\n    //\n    // Output Parameters\n    //\n\n    // Encoding of the Output Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingOut;\n\n    // Primaries of the Output Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesOut;\n\n    // Clamp output values to 0.0 - 1.0\n    bool clampOutput;\n\n    //\n    // Extra Parameters\n    //\n\n    // Toggle Inverse Transform\n    bool invert;\n\n    float3x3 XYZ_to_LMS_ZCAM;\n    float zcam_rho;\n\n\n    // Tonescale select\n    // bool mmTonescaleMode;\n    // OpenDRT tonescale parameters\n    float Lp;\n    float su;\n    float c0;\n    float cs;\n    float c1;\n    float p;\n    float w1;\n    float s1;\n    float ex;\n    float eb;\n    float e0;\n    float s0;\n    float fl;\n    float dch;\n    float sat;\n    float mmScaleFactor;\n\n    // DanieleCompressionCurve tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n    // Hellwig 2022 CAM params\n    // the kernel parameters\n\n    // 0 = Stock CAT16\n    // 1 = Thomas's custom primaries\n    // 2 = live from params below\n    int catDataSelection; // original vs modified CAT16 matrix\n    // xy coordintes for custom CAT matrix\n    float2 rxy;\n    float2 gxy;\n    float2 bxy;\n    float2 wxy;\n    \n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float L_B;\n    float3 surround;\n    bool discount_illuminant;\n\n\n  local:\n\n    // constants\n    float HALF_MIN;\n    float HALF_MAX;\n\n    // Hellwig 2022 constants\n    float3x3 CAT_CAT16;\n\n    // ZCAM vars\n    float zcam_L_A;\n    float zcam_F_b;\n    float zcam_F_L;\n    float zcam_cb;\n    float zcam_cg;\n    float zcam_c1;\n    float zcam_c2;\n    float zcam_c3;\n    float zcam_eta;\n    // float zcam_rho;\n    float zcam_luminance_shift;\n    float zcam_viewing_conditions_coeff;\n\n    // CAT vars\n    float cat_adaptDegree;\n\n\n    // ST2084 vars\n    float st2084_m_1;\n    float st2084_m_2;\n    float st2084_c_1;\n    float st2084_c_2;\n    float st2084_c_3;\n    float st2084_m_1_d;\n    float st2084_m_2_d;\n    float st2084_L_p;\n\n    // SSTS constants\n    float ssts_min_stop_sdr;\n    float ssts_max_stop_sdr;\n    float ssts_min_stop_rrt;\n    float ssts_max_stop_rrt;\n    float ssts_min_lum_sdr;\n    float ssts_max_lum_sdr;\n    float ssts_min_lum_rrt;\n    float ssts_max_lum_rrt;\n    int ssts_n_knots_low;\n    int ssts_n_knots_high;\n    float3x3 ssts_m1;\n\n    // SSTS tables\n    // using the float4 type to store the two 2D vectors\n    // because Blink does not support generic array assignments\n    float4 ssts_minTable;\n    float4 ssts_maxTable;\n    float4 ssts_bendsLow;\n    float4 ssts_bendsHigh;\n\n    // SSTS parameters\n    float3 ssts_min_pt;\n    float3 ssts_mid_pt;\n    float3 ssts_max_pt;\n    float ssts_knotIncLow;\n    float ssts_knotIncHigh;\n    float ssts_pctLow;\n    float ssts_pctHigh;\n\n    // using the float3x3 type to store the array of 6 coefficients\n    // because Blink does not support generic array assignments\n    float3x3 ssts_coefsLow;\n    float3x3 ssts_coefsHigh;\n\n    float ssts_expShift;\n    float3 ssts_paramMin;\n    float3 ssts_paramMid;\n    float3 ssts_paramMax;\n\n\n    // matrix vars\n    float3x3 identity_matrix;\n    float3x3 XYZ_to_LMS_Bradford;\n    float3x3 XYZ_to_LMS_CAT02;\n    // float3x3 XYZ_to_LMS_ZCAM;\n    float3x3 LMS_to_Izazbz;\n\n    float3x3 XYZ_to_RGB_input;\n    float3x3 XYZ_to_RGB_limit;\n    float3x3 XYZ_to_RGB_output;\n\n    float3x3 RGB_to_XYZ_input;\n    float3x3 RGB_to_XYZ_limit;\n    float3x3 RGB_to_XYZ_output;\n\n    // white points\n    float3 d65White;\n    float3 inWhite;\n    float3 refWhite;\n\n    // the maximum RGB value of the limiting gamut\n    float boundaryRGB;\n\n    // the maximum lightness value of the limiting gamut\n    float limitJmax;\n\n    // the maximum colorfulness value of the limiting gamut\n    float limitMmax;\n\n    // the 1D LUT used for quickly findig the approximate limiting gamut cusp JMh coordinates\n    // the samples are spaced by HSV hue increments of the limiting RGB gamut\n    // so to find the correct entry for a given ZCAM hue (h) value \n    // one must search the table entries for the matching entry.z component\n    int gamutCuspTableSize;\n\n    // the 'gamutCuspTableUnsorted' table is populated\n    // in increments of H of the limiting gamut HSV space starting at H=0.0\n    // since it is unlikely that HSV.H=0 and JMh.h=0 line up\n    // the entries are then wrap-around shifted\n    // so that the 'gamutCuspTable' starts with the lowest JMh.h value\n    // both tables need to be declared here since temporary array variables\n    // in the init() fuction seem to crash Nuke on some systems\n    float3 gamutCuspTableUnsorted\[360];\n    float3 gamutCuspTable\[360];\n\n    // local version of the public focusDistance parameter\n    // this one will be clamped to a value > 0.0\n    float focusDistanceClamped;\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially returned -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n  float3 float3spow( float3 base, float exponent )\n  \{\n      return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n  \}\n\n  float3 float3sign( float3 v )\n  \{\n      return float3(sign(v.x), sign(v.y), sign(v.z));\n  \}\n\n\n  float3 float3abs( float3 a )\n  \{\n    return fabs(a);\n  \}\n\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    float hue_angle( float a, float b )\n    \{\n      float h = degrees(atan2(b, a)) / 360;\n  \n      return h;\n    \}\n\n\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n  // convert radians to degrees\n  float degrees( float radians )\n  \{\n    return radians * 180.0f / PI;\n  \}\n\n\n  // convert degrees to radians\n  float radians( float degrees )\n  \{\n    return degrees / 180.0f * PI;\n  \}\n\n\n  float3x3  RGBPrimsToXYZMatrix(float2 rxy, float2 gxy, float2 bxy, float2 wxy,float Y, bool direction)\n  \{\n    // # given r g b chromaticities and whitepoint, convert RGB colors to XYZ\n    // # based on CtlColorSpace.cpp from the CTL source code : 77\n    // # param: xy - dict of chromaticity xy coordinates: rxy: float2(x, y) etc\n    // # param: Y - luminance of \"white\" - defaults to 1.0\n    // # param: inverse - calculate XYZ to RGB instead\n\n    float2 r = rxy;\n    float2 g = gxy;\n    float2 b = bxy;\n    float2 w = wxy;\n\n    float X = w.x * Y / w.y;\n    float Z = (1 - w.x - w.y) * Y / w.y;\n\n    // # Scale factors for matrix rows\n    float d = r.x * (b.y - g.y) + b.x * (g.y - r.y) + g.x * (r.y - b.y);\n\n    float Sr =    (X * (b.y - g.y) -      \\\n            g.x * (Y * (b.y - 1.0f) +  \\\n            b.y  * (X + Z)) +       \\\n            b.x  * (Y * (g.y - 1.0f) + \\\n            g.y * (X + Z))) / d ;\n    \n    float Sg =    (X * (r.y - b.y) +      \\\n            r.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) -        \\\n            b.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    float Sb =    (X * (g.y - r.y) -      \\\n            r.x * (Y * (g.y - 1.0f) +  \\\n            g.y * (X + Z)) +        \\\n            g.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    // # Assemble the matrix\n    float Mdata\[] =\n    \{\n            Sr * r.x, Sr * r.y, Sr * (1.0f - r.x - r.y),\n            Sg * g.x, Sg * g.y, Sg * (1.0f - g.x - g.y),\n            Sb * b.x, Sb * b.y, Sb * (1.0f - b.x - b.y),\n    \};\n\n    float MdataNukeOrder\[] = \{\n      Mdata\[0], Mdata\[3], Mdata\[6],\n      Mdata\[1], Mdata\[4], Mdata\[7],\n      Mdata\[2], Mdata\[5], Mdata\[8],\n    \};\n\n    float3x3 newMatrix;\n    newMatrix.setArray(MdataNukeOrder);\n\n    // create inverse matrix\n    float3x3 newMatrixInverse = newMatrix.invert();\n\n    // return forward or inverse matrix\n    if (direction == 0)\n    \{\n      return newMatrix;\n    \}\n    else if (direction == 1)\n    \{\n      return newMatrixInverse;\n    \}\n  \}\n\n\n\n  // \"PowerP\" compression function (also used in the ACES Reference Gamut Compression transform)\n  // values of v above  'treshold' are compressed by a 'power' function\n  // so that an input value of 'limit' results in an output of 1.0\n  float compressPowerP( float v, float threshold, float limit, float power, int inverse )\n  \{\n    float s = (limit-threshold)/pow(pow((1.0f-threshold)/(limit-threshold),-power)-1.0f,1.0f/power);\n\n    float vCompressed;\n\n    if( inverse )\n    \{\n      vCompressed = (v<threshold||limit<1.0001f||v>threshold+s)?v:threshold+s*pow(-(pow((v-threshold)/s,power)/(pow((v-threshold)/s,power)-1.0f)),1.0f/power);\n    \}\n    else\n    \{\n      vCompressed = (v<threshold||limit<1.0001f)?v:threshold+s*((v-threshold)/s)/(pow(1.0f+pow((v-threshold)/s,power),1.0f/power));\n    \}\n\n    return vCompressed;\n  \}\n\n  // Two-Stage chromatic adaptation transforms as proposed by Zhai, Q., & Luo, M. R. (2018)\n  // https://opg.optica.org/oe/fulltext.cfm?uri=oe-26-6-7724\n  // https://github.com/colour-science/colour/blob/e5fa0790adcc3e5df5fa42ddf2bb75214c8cf59c/colour/adaptation/zhai2018.py\n  float3 CAT_Zhai2018( float3 XYZ_b, float3 XYZ_wb, float3 XYZ_wd, float D_b, float D_d, float3x3 M)\n  \{\n    float3 XYZ_wo = 100.0f;\n    float3 RGB_b = vector_dot(M, XYZ_b);\n    float3 RGB_wb = vector_dot(M, XYZ_wb);\n    float3 RGB_wd = vector_dot(M, XYZ_wd);\n    float3 RGB_wo = vector_dot(M, XYZ_wo);\n    \n    float3 D_RGB_b = D_b * (XYZ_wb.y / XYZ_wo.y) * (RGB_wo / RGB_wb) + 1 - D_b;\n    float3 D_RGB_d = D_d * (XYZ_wd.y / XYZ_wo.y) * (RGB_wo / RGB_wd) + 1 - D_d;\n    float3 D_RGB = D_RGB_b / D_RGB_d;\n    \n    float3 RGB_d = D_RGB * RGB_b;\n    float3 XYZ_d = vector_dot(M.invert(), RGB_d);\n    \n    return XYZ_d;\n  \}\n\n  // apply chromatic adaptation transform to 'XYZ' from 'XYZ_ws' to 'XYZ_wd' white points\n  // 'type' selects the cone fundamentals matrix (except for Zhai2018 which uses a 2-stage tranforms based on CATO2 fundamentals)\n  // 'adaptDegree' sets the degree of adaptation for the Zhai2018 model\n  float3 apply_CAT( float3 XYZ, float3 XYZ_ws, float3 XYZ_wd, int type, float adaptDegree )\n  \{\n    float3x3 XYZ_to_LMS;\n\n    if( type == 1 )\n    \{\n      // XYZ Scaling\n      XYZ_to_LMS = identity_matrix;\n    \}\n    else if( type == 2 )\n    \{\n      // Bradford\n      XYZ_to_LMS = XYZ_to_LMS_Bradford;\n    \}\n    else if( type == 3 )\n    \{\n      // CAT02\n      XYZ_to_LMS = XYZ_to_LMS_CAT02;\n    \}\n    else if( type == 4 )\n    \{\n      // Zhai2018\n      return CAT_Zhai2018(XYZ, XYZ_ws, XYZ_wd, adaptDegree, adaptDegree, XYZ_to_LMS_CAT02);\n    \}\n    else\n    \{\n      // None\n      return XYZ;\n    \}\n\n    float3 LMS_ws = vector_dot(XYZ_to_LMS, XYZ_ws);\n    float3 LMS_wd = vector_dot(XYZ_to_LMS, XYZ_wd);\n\n    // if(LMS_ws.x == 0.0f)\n    // \{\n    //   LMS_ws.x = 0.000001f;\n    // \}\n    // if(LMS_ws.y == 0.0f)\n    // \{\n    //   LMS_ws.y = 0.000001f;\n    // \}\n    // if(LMS_ws.z == 0.0f)\n    // \{\n    //   LMS_ws.z = 0.000001f;\n    // \}\n\n    float3x3 Mscale = identity_matrix;\n    Mscale\[0]\[0] = LMS_wd.x / LMS_ws.x;\n    Mscale\[1]\[1] = LMS_wd.y / LMS_ws.y;\n    Mscale\[2]\[2] = LMS_wd.z / LMS_ws.z;\n\n    float3x3 M = XYZ_to_LMS.invert() * Mscale * XYZ_to_LMS;\n\n    return vector_dot(M, XYZ);\n  \}\n\n\n  float3 post_adaptation_non_linear_response_compression_forward(float3 RGB, float F_L)\n  \{\n      // RGB = as_float_array(RGB)\n      // F_L = as_float_array(F_L)\n  \n      float3 F_L_RGB = float3spow(F_L * float3abs(RGB) / 100.0f, 0.42f);\n      float3 RGB_c = (400.0f * sign(RGB) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n  \n      return RGB_c;\n  \}\n\n  \n  float3 post_adaptation_non_linear_response_compression_inverse(float3 RGB,float F_L)\n  \{\n      // RGB = as_float_array(RGB)\n      // F_L = as_float_array(F_L)\n\n\n      // RGB_p = (\n      //     np.sign(RGB - 0.1)\n      //     * 100\n      //     / F_L\[..., np.newaxis]\n      //     * spow(\n      //         (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)),\n      //         1 / 0.42,\n      //     )\n      // )\n\n\n      // RGB_p = ( np.sign(RGB - 0.1) * 100 / F_L\[..., np.newaxis] * spow( (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)), 1 / 0.42, ))\n\n      // older compression formula subbed in\n      // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n\n      // float3 RGB_p =  sign(RGB - 0.1f) * 100.0f / F_L * spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f);\n      float3 RGB_p =  (float3sign(RGB - 0.1f) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f) );\n      // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n      return RGB_p;\n  \}\n\n\n  // def d_post_adaptation_non_linear_response_compression_forward(\n  //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n  // ) -> NDArray:\n  //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n  //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n  \n  //     d_RGB_a = (  400 * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100) / (F_L_RGB + 27.13) ** 2  )\n  \n  //     return d_RGB_a\n  \n  \n  float3 d_post_adaptation_non_linear_response_compression_forward( float3 RGB, float F_L)\n  \{\n      float3 F_L_RGB = float3spow(F_L * RGB / 100.0f, 0.42f);\n      float F_L_100 = spow(F_L / 100.0f, 0.42f);\n  \n      // float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ (F_L_RGB + 27.13f) ** 2.0f );\n         float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ ( (F_L_RGB + 27.13f) *  (F_L_RGB + 27.13f) ));\n      //    d_RGB_a = d_RGB_a * d_RGB_a;\n\n      return d_RGB_a;\n  \}\n\n  // convert XYZ tristimulus values to the ZCAM intermediate Izazbz colorspace\n  float3 XYZ_to_Izazbz( float3 XYZD65 )\n  \{\n    float3 XYZpD65 = XYZD65;\n    XYZpD65.x = zcam_cb * XYZD65.x - (zcam_cb - 1.0f) * XYZD65.z;\n    XYZpD65.y = zcam_cg * XYZD65.y - (zcam_cg - 1.0f) * XYZD65.x;\n    float3 LMS = vector_dot(XYZ_to_LMS_ZCAM, XYZpD65);\n    float3 LMSp = 0.0f;\n    LMSp.x = spow( ( zcam_c1 + zcam_c2 * spow((LMS.x/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.x/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.y = spow( ( zcam_c1 + zcam_c2 * spow((LMS.y/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.y/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.z = spow( ( zcam_c1 + zcam_c2 * spow((LMS.z/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.z/10000.0f),zcam_eta) ), zcam_rho);\n    float3 Izazbz = vector_dot(LMS_to_Izazbz, LMSp);\n    // return float3(LMS_to_Izazbz\[0]\[0], LMS_to_Izazbz\[0]\[1], LMS_to_Izazbz\[0]\[2]);\n    return Izazbz;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to XYZ tristimulus values\n  float3 Izazbz_to_XYZ( float3 Izazbz )\n  \{\n    float3 LMSp = vector_dot(LMS_to_Izazbz.invert(), Izazbz);\n    float3 LMS = 0.0f;\n    LMS.x = 10000.0f*spow((zcam_c1-spow(LMSp.x,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.x,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.y = 10000.0f*spow((zcam_c1-spow(LMSp.y,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.y,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.z = 10000.0f*spow((zcam_c1-spow(LMSp.z,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.z,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    float3 XYZpD65 = vector_dot(XYZ_to_LMS_ZCAM.invert(), LMS);\n    float3 XYZD65 = XYZpD65;\n    XYZD65.x = (XYZpD65.x+(zcam_cb-1.0f)*XYZpD65.z)/zcam_cb;\n    XYZD65.y = (XYZpD65.y+(zcam_cg-1.0f)*XYZD65.x)/zcam_cg;\n    return XYZD65;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 Izazbz_to_JMh( float3 Izazbz, float refWhiteIz, int viewingConditions )\n  \{\n    float3 JMh = 0.0f;\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n\n    JMh.z = fmod(degrees(atan2(Izazbz.z,Izazbz.y))+360.0f,360.0f);\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float Qz  = 2700.0f * spow(Izazbz.x,   (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    JMh.x = 100.0f * (Qz / Qzw);\n    JMh.y = 100.0f * spow((spow(Izazbz.y, 2.0f) + spow(Izazbz.z, 2.0f)), 0.37f) * ((spow(ez, 0.068f) * pow(zcam_F_L, 0.2f)) / (pow(zcam_F_b, 0.1f) * pow(refWhiteIz, 0.78f)));\n\n    return JMh;\n    // return float3(Qz, Qzw, JMh.z);\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to the ZCAM intermediate Izazbz colorspace\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 JMh_to_Izazbz( float3 JMh, float refWhiteIz, int viewingConditions )\n  \{\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n    float Qzm = spow(zcam_F_s, 2.2f) * spow(zcam_F_b, 0.5f) * spow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / spow(zcam_F_b, 0.12f)) * Qzm;\n    float Izp = spow(zcam_F_b, 0.12f) / (1.6f * zcam_F_s);\n    float Izd = 2700.0f * 100.0f * Qzm;\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float hzr = radians(JMh.z);\n    float Czp = spow((JMh.y * spow(refWhiteIz, 0.78f) * spow(zcam_F_b, 0.1f)) / (100.0f * spow(ez, 0.068f) * spow(zcam_F_L, 0.2f)), 50.0f / 37.0f);\n\n    return float3( spow((JMh.x * Qzw) / Izd, Izp), Czp * cos(hzr), Czp * sin(hzr));\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 XYZ_to_JMh( float3 XYZ, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        return Izazbz_to_JMh(XYZ_to_Izazbz(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree)), refWhiteIzazbz.x, viewingConditions);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return XYZ_to_Hellwig2022_JMh(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree), XYZ_w, L_A, Y_b,surround,discount_illuminant);\n    \}\n    else if( camMode == 2 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return XYZ_to_Hellwig2022_linearExtension_JMh(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree), XYZ_w, L_A, Y_b,surround,discount_illuminant);\n    \}\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to XYZ tristimulus values\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 JMh_to_XYZ( float3 JMh, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        return apply_CAT(Izazbz_to_XYZ(JMh_to_Izazbz(JMh, refWhiteIzazbz.x, viewingConditions)), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return apply_CAT(Hellwig2022_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n    else if( camMode == 2 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return apply_CAT(Hellwig2022_linearExtension_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n  \}\n\n\n  // check if the 3D point 'v' is inside a cube with the dimensions cubeSize x cubeSize x cubeSize \n  // the 'smoothing' parameter rounds off the edges and corners of the cube with the exception of the 0,0,0 and cubeSize x cubeSize x cubeSize corners\n  // a smoothing value of 0.0 applies no smoothing and 1.0 the maximum amount (smoothing values > 1.0 result in undefined behavior )\n  int isInsideCube( float3 v, float cubeSize, float smoothing)\n  \{\n    float3 normv = v / cubeSize;\n\n    float minv = min(normv.x, min(normv.y, normv.z));\n    float maxv = max(normv.x, max(normv.y, normv.z));\n\n    if( smoothing <= 0.0f )\n    \{\n      // when not smoothing we can use a much simpler test\n      if(minv < 0.0f || maxv > 1.0f)\n      \{\n        return 0;\n      \}\n\n      return 1;\n    \}\n\n    float3 clamped = normv;\n\n    float radius = smoothing/2.0f;\n\n    radius = clamp(radius*maxv*(1.0f-minv), 0.0f, radius);\n\n    clamped.x = clamp(normv.x, radius, 1.0f-radius);\n    clamped.y = clamp(normv.y, radius, 1.0f-radius);\n    clamped.z = clamp(normv.z, radius, 1.0f-radius);\n\n\n    if( length(normv - clamped ) > radius)\n    \{\n      return 0;\n    \}\n\n    return 1;\n  \}\n\n  // convert ACEScct encoded values to linear\n  float ACEScct_to_linear( float v )\n  \{\n    return v > 0.155251141552511f ? spow( 2.0f, v * 17.52f - 9.72f) : (v - 0.0729055341958355f) / 10.5402377416545f;\n  \}\n\n  // encode linear values as ACEScct\n  float linear_to_ACEScct( float v )\n  \{\n    return v > 0.0078125f ? (log2(v) + 9.72f) / 17.52f : 10.5402377416545f * v + 0.0729055341958355f;\n  \}\n\n\n  // convert sRGB gamma encoded values to linear\n  float sRGB_to_linear( float v )\n  \{\n    return v < 0.04045f ? v / 12.92f : spow((v + 0.055f) / 1.055f, 2.4f);\n  \}\n\n  // encode linear values as sRGB gamma\n  float linear_to_sRGB( float v )\n  \{\n    return v <= 0.0031308f ? 12.92f * v : 1.055 * (spow(v, 1.0f / 2.4f)) - 0.055f;\n  \}\n\n  // convert ST2084 PQ encoded values to linear\n  float ST2084_to_linear( float v )\n  \{\n    float V_p = spow(v, st2084_m_2_d);\n    return spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p;\n  \}\n\n  // encode linear values as ST2084 PQ\n  float linear_to_ST2084( float v )\n  \{\n    float Y_p = spow(max(0.0f, v) / st2084_L_p, st2084_m_1);\n\n    return spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);\n  \}\n\n  // decode value 'v' with the inverse of the selected encoding fuction to luminance\n  float encodingToLuminance(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return ACEScct_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return sRGB_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v, 2.4f) * referenceLuminance;\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v, 2.6f) * referenceLuminance;\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return ST2084_to_linear(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v * referenceLuminance;\n    \}\n  \}\n\n  // decode the components of a 3D vector 'v' with the inverse of the selected encoding fuction to luminance\n  float3 encodingToLuminance3(int encoding, float3 v)\n  \{\n    float3 lin;\n    lin.x = encodingToLuminance(encoding, v.x);\n    lin.y = encodingToLuminance(encoding, v.y);\n    lin.z = encodingToLuminance(encoding, v.z);\n\n    return lin;\n  \}\n\n  // encode the linear luminance value 'v' with the encoding fuction selected by 'encoding'\n  float luminanceToEncoding(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return linear_to_ACEScct(v / referenceLuminance);\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return linear_to_sRGB(v / referenceLuminance);\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v / referenceLuminance, 1.0f/2.4f);\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v / referenceLuminance, 1.0f/2.6f);\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return linear_to_ST2084(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v / referenceLuminance;\n    \}\n  \}\n\n  // encode the linear luminance value components of a 3D vector 'v' with the encoding fuction selected by 'encoding'\n  float3 luminanceToEncoding3(int encoding, float3 v)\n  \{\n    float3 enc;\n    enc.x = luminanceToEncoding(encoding, v.x);\n    enc.y = luminanceToEncoding(encoding, v.y);\n    enc.z = luminanceToEncoding(encoding, v.z);\n\n    return enc;\n  \}\n\n\n  // convert RGB values in the input colorspace to the ZCAM intermediate Izazbz colorspace\n  float3 input_RGB_to_Izazbz(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    return XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n  \}\n\n\n  // convert values in the ZCAM intermediate Izazbz colorspace to RGB values in the input colorspace\n  float3 Izazbz_to_input_RGB(float3 Izazbz)\n  \{\n    float3 luminanceXYZ = Izazbz_to_XYZ(Izazbz);\n    luminanceXYZ = apply_CAT(luminanceXYZ, d65White, inWhite, catType, 1.0f);\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 RGB = luminanceToEncoding3(encodingIn, luminanceRGB);\n    return RGB;\n  \}\n\n  // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 output_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n    float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n    // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n    float3 luminance_RGB_to_JMh(float3 luminanceRGB)\n    \{\n    //   float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n      float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n      float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n      return JMh;\n    \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n  float3 JMh_to_output_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n    if( clampOutput )\n    \{\n      outputRGB = clamp3(outputRGB, 0.0f, 1.0f);\n    \}\n\n    return outputRGB;\n  \}\n\n    // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n    float3 JMh_to_luminance_RGB(float3 JMh)\n    \{\n        float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n        float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n        // float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n        return luminanceRGB;\n    \}\n\n\n  // convert linear RGB values with the limiting primaries to ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 limit_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = RGB * boundaryRGB *referenceLuminance;\n    float3 XYZ = vector_dot(RGB_to_XYZ_limit, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to linear RGB values with the limiting primaries\n  float3 JMh_to_limit_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 RGB = luminanceRGB / boundaryRGB / referenceLuminance;\n    return RGB;\n  \}\n\n  // Hellwig 2022 forward\n  float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n    XYZ = float3_to_domain_100(XYZ);\n    XYZ_w = float3_to_domain_100(XYZ_w);\n    float _X_w = XYZ_w.x ;\n    float Y_w = XYZ_w.y ;\n    float _Z_w = XYZ_w.z ;\n    float3x3 MATRIX_16 = CAT_CAT16;\n    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n    float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n    if(discount_illuminant)\n    \{\n        D = 1.0f;\n    \}\n    float k = 1 / (5 * L_A + 1);\n    float k4 = pow(k,4);\n    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n    float n = sdiv(Y_b, Y_w);\n    float z = 1.48 + sqrt(n);\n    float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n    float3 RGB_wc = D_RGB * RGB_w;\n    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n    float R_aw = RGB_aw.x ;\n    float G_aw = RGB_aw.y ;\n    float B_aw = RGB_aw.z ;\n    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n    float3 RGB = vector_dot(MATRIX_16, XYZ);\n    float3 RGB_c = D_RGB * RGB;\n    float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n    float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n    float R_a = RGB_a.x ;\n    float G_a = RGB_a.y ;\n    float B_a = RGB_a.z ;\n    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n    float h = mod(degrees(atan2(b, a)), 360.0f);\n    float hr = radians(h);\n    float _h = hr;\n    float _2_h = 2 * hr;\n    float _3_h = 3 * hr;\n    float _4_h = 4 * hr;\n    float e_t = (\n        -0.0582f * cos(_h)\n        - 0.0258f * cos(_2_h)\n        - 0.1347f * cos(_3_h)\n        + 0.0289f * cos(_4_h)\n        - 0.1475f * sin(_h)\n        - 0.0308f * sin(_2_h)\n        + 0.0385f * sin(_3_h)\n        + 0.0096f * sin(_4_h)\n        + 1.0f\n    );\n    float R_a2 = RGB_a.x ;\n    float G_a2 = RGB_a.y ;\n    float B_a2 = RGB_a.z ;\n    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n    float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n    float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n    float C = 35.0f * sdiv(M, A_w);\n    float s = 100.0f * sdiv(M, Q);\n    return \{J,M,h\};\n\n  \}\n\n  // inverse Hellwig 2022\n  float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n      float J = JMh.x;\n      float M = JMh.y;\n      float h = JMh.z;\n      float _X_w = XYZ_w.x;\n      float Y_w = XYZ_w.y;\n      float _Z_w = XYZ_w.z;\n      float3x3 MATRIX_16 = CAT_CAT16;\n      float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n      float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n      if(discount_illuminant)\n      \{\n          D = 1.0f;\n      \}\n      float k = 1 / (5 * L_A + 1);\n      float k4 = pow(k,4);\n      float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n      float n = sdiv(Y_b, Y_w);\n      float z = 1.48 + sqrt(n);\n      float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n      float3 RGB_wc = D_RGB * RGB_w;\n      float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n      float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n      float R_aw = RGB_aw.x ;\n      float G_aw = RGB_aw.y ;\n      float B_aw = RGB_aw.z ;\n      float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n      float hr = radians(h);\n      float _h = hr;\n      float _2_h = 2 * hr;\n      float _3_h = 3 * hr;\n      float _4_h = 4 * hr;\n      float e_t = (\n          -0.0582f * cos(_h)\n          - 0.0258f * cos(_2_h)\n          - 0.1347f * cos(_3_h)\n          + 0.0289f * cos(_4_h)\n          - 0.1475f * sin(_h)\n          - 0.0308f * sin(_2_h)\n          + 0.0385f * sin(_3_h)\n          + 0.0096f * sin(_4_h)\n          + 1.0f\n      );\n      float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n      float P_p_1 = 43.0f * surround.z * e_t;\n      float P_p_2 = A;\n      float gamma = M / P_p_1;\n      float a = gamma * cos(hr);\n      float b = gamma * sin(hr);\n      float panlrcm_data\[]=\n      \{\n          460.0f, 451.0f, 288.0f,\n          460.0f, -891.0f, -261.0f,\n          460.0f, -220.0f, -6300.0f,\n      \};\n      float3x3 panlrcm;\n      panlrcm.setArray(panlrcm_data);\n      float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n      float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n      float3 RGB = RGB_c / D_RGB;\n      float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n      float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n      return XYZ;\n\n  \}\n\n\n\n  float3 XYZ_to_Hellwig2022_linearExtension_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n    //     \"\"\"\n    //     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n    //     correlates from given *CIE XYZ* tristimulus values.\n\n    //     Parameters\n    //     ----------\n    //     XYZ\n    //         *CIE XYZ* tristimulus values of test sample / stimulus.\n    //     XYZ_w\n    //         *CIE XYZ* tristimulus values of reference white.\n    //     L_A\n    //         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n    //         to be 20% of the luminance of a white object in the scene).\n    //     Y_b\n    //         Luminous factor of background :math:`Y_b` such as\n    //         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n    //         light source and :math:`L_b` is the luminance of the background. For\n    //         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n    //         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n    //         approximate an :math:`L^*` of 50 is used.\n    //     surround\n    //         Surround viewing conditions induction factors.\n    //     discount_illuminant\n    //         Truth value indicating if the illuminant should be discounted.\n\n    //     Returns\n    //     -------\n    //     :class:`colour.CAM_Specification_Hellwig2022`\n    //         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n    //     Notes\n    //     -----\n    //     +------------+-----------------------+---------------+\n    //     | **Domain** | **Scale - Reference** | **Scale - 1** |\n    //     +============+=======================+===============+\n    //     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n    //     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | **Range**                           | **Scale - Reference** | **Scale - \\\n    // 1** |\n    //     +=====================================+=======================+===========\\\n    // ====+\n    //     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n\n    //     References\n    //     ----------\n    //     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n    //     Examples\n    //     --------\n    //     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n    //     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n    //     >>> L_A = 318.31\n    //     >>> Y_b = 20.0\n    //     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n    //     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n    //     ... # doctest: +ELLIPSIS\n    //     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n    // h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n    // H=275.5949861..., HC=None)\n    //     \"\"\"\n\n        XYZ = float3_to_domain_100(XYZ);\n        XYZ_w = float3_to_domain_100(XYZ_w);\n        float _X_w = XYZ_w.x ;\n        float Y_w = XYZ_w.y ;\n        float _Z_w = XYZ_w.z ;\n        // L_A = as_float_array(L_A)\n        // Y_b = as_float_array(Y_b)\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n        \n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 1\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB = vector_dot(MATRIX_16, XYZ)\n\n        float3 RGB = vector_dot(MATRIX_16, XYZ);\n        // float3 RGB = XYZ;\n\n        // # Step 2\n        // RGB_c = D_RGB * RGB\n        float3 RGB_c = D_RGB * RGB;\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n        // float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n        // // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        // float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L)\n        // RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // ) * (\n        //     RGB_c - L_B\n        // ) + post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // )\n        // RGB_a = np.where(RGB_c < L_B, RGB_a_l, RGB_a)\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        float3 RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L);\n        // float3 RGB_a = RGB_c;\n        float3 RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(L_B, F_L) * ( RGB_c - L_B) + post_adaptation_non_linear_response_compression_forward( L_B, F_L );\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_a_l.x: RGB_a.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_a_l.y: RGB_a.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_a_l.z: RGB_a.z;\n\n\n\n\n        // # Step 4\n        // # Converting to preliminary cartesian coordinates.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a = RGB_d.x ;\n        float G_a = RGB_d.y ;\n        float B_a = RGB_d.z ;\n        // a = R_a - 12 * G_a / 11 + B_a / 11\n        float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n        // b = (R_a + G_a - 2 * B_a) / 9\n        float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n        // # Computing the *hue* angle :math:`h`.\n        // h = np.degrees(np.arctan2(b, a)) % 360\n        // Unclear why this isnt matching the python version.\n        float h = mod(degrees(atan2(b, a)), 360.0f);\n\n        \n\n        // # Step 5\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n\n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Step 6\n        // # Computing achromatic responses for the stimulus.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a2 = RGB_a.x ;\n        float G_a2 = RGB_a.y ;\n        float B_a2 = RGB_a.z ;\n        // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n        float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n        // # Step 7\n        // # Computing the correlate of *Lightness* :math:`J`.\n        // with sdiv_mode():\n        //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n        float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n        // # Step 8\n        // # Computing the correlate of *brightness* :math:`Q`.\n        // with sdiv_mode():\n        //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n        float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n        // # Step 9\n        // # Computing the correlate of *colourfulness* :math:`M`.\n        // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n        float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n        // # Computing the correlate of *chroma* :math:`C`.\n        // with sdiv_mode():\n        //     C = 35 * sdiv(M, A_w)\n        float C = 35.0f * sdiv(M, A_w);\n\n\n        // # Computing the correlate of *saturation* :math:`s`.\n        // with sdiv_mode():\n        //     s = 100 * sdiv(M, Q)\n        float s = 100.0f * sdiv(M, Q);\n\n\n\n        // return XYZ_w;\n        // return RGB_w;\n        // return \{D,k,k4\};\n        // return \{F_L,n,z\};\n        // return RGB_c;\n        return \{J,M,h\};\n        // return XYZ;\n    \}\n\n    float3 Hellwig2022_linearExtension_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        // float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L)\n        // RGB_c_l = (\n        //     RGB_a\n        //     - post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) / (\n        //     d_post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) + L_B\n        // RGB_c = np.where(RGB_c < L_B, RGB_c_l, RGB_c)\n\n        // Adding 0.1 here seems to fix the inversion issue, not really clear on why I'm needing to do this\n        RGB_a = RGB_a + 0.1f;\n        float3 RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L);\n        // float3 RGB_c = RGB_a;\n        float3 RGB_c_l = ( RGB_a - post_adaptation_non_linear_response_compression_forward( L_B, F_L)) / (d_post_adaptation_non_linear_response_compression_forward( L_B, F_L)) + L_B;\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_c_l.x : RGB_c.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_c_l.y : RGB_c.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_c_l.z : RGB_c.z;\n\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_d / D_RGB;\n        \n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n\n        // return XYZ;\n        return XYZ;\n\n    \}\n\n\n\n\n  // convert HSV cylindrical projection values to RGB\n  float3 HSV_to_RGB( float3 HSV )\n  \{\n    float C = HSV.z*HSV.y;\n    float X = C*(1.0f-fabs(fmod(HSV.x*6.0f,2.0f)-1.0f));\n    float m = HSV.z-C;\n\n    float3 RGB;\n    RGB.x = (HSV.x<1.0f/6.0f?  C :HSV.x<2.0f/6.0f?  X :HSV.x<3.0f/6.0f?0.0f:HSV.x<4.0f/6.0f?0.0f:HSV.x<5.0f/6.0f?  X :  C )+m;\n    RGB.y = (HSV.x<1.0f/6.0f?  X :HSV.x<2.0f/6.0f?  C :HSV.x<3.0f/6.0f?  C :HSV.x<4.0f/6.0f?  X :HSV.x<5.0f/6.0f?0.0f:0.0f)+m;\n    RGB.z = (HSV.x<1.0f/6.0f?0.0f:HSV.x<2.0f/6.0f?0.0f:HSV.x<3.0f/6.0f?  X :HSV.x<4.0f/6.0f?  C :HSV.x<5.0f/6.0f?  C :  X )+m;\n    return RGB;\n  \}\n\n\n  // convert RGB to HSV cylindrical projection values\n  float3 RGB_to_HSV( float3 RGB )\n  \{\n    float cmax = max(RGB.x,max(RGB.y,RGB.z));\n    float cmin = min(RGB.x,min(RGB.y,RGB.z));\n    float delta = cmax-cmin;\n\n    float3 HSV;\n    HSV.x = delta==0.0f?0.0f:cmax==RGB.x?(fmod((RGB.y-RGB.z)/delta+6.0f,6.0f))/6.0f:cmax==RGB.y?(((RGB.z-RGB.x)/delta+2.0f)/6.0f):(((RGB.x-RGB.y)/delta+4.0f)/6.0f);\n    HSV.y = cmax == 0.0f ? 0.0f : delta / cmax;\n    HSV.z = cmax;\n    return HSV;\n  \}\n\n\n  // retrieve the JM coordinates of the limiting gamut cusp at the hue slice 'h'\n  // cusps are very expensive to compute\n  // and the DRT is only using them for lightness mapping\n  // which does not require a high degree of accuracy\n  // so instead we use a pre-computed table of cusp points\n  // sampled at 1 degree hue intervals of the the RGB target gamut\n  // and lerp between them to get the approximate J & M values\n  float2 cuspFromTable(float h)\n  \{\n\n    float3 lo;\n    float3 hi;\n\n    if( h <= gamutCuspTable\[0].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      lo.z = lo.z-360.0f;\n      hi = gamutCuspTable\[0];\n    \}\n    else if( h >= gamutCuspTable\[gamutCuspTableSize-1].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      hi = gamutCuspTable\[0];\n      hi.z = hi.z+360.f;\n    \}\n    else\n    \{\n      for(int i = 1; i < gamutCuspTableSize; ++i)\n      \{\n        if( h <= gamutCuspTable\[i].z )\n        \{\n          lo = gamutCuspTable\[i-1];\n          hi = gamutCuspTable\[i];\n          break;\n        \}\n      \}\n    \}\n\n    float t = (h - lo.z) / (hi.z - lo.z);\n\n    float cuspJ = lerp(lo.x, hi.x, t);\n    float cuspM = lerp(lo.y, hi.y, t);\n\n    return float2(cuspJ,cuspM);\n  \}\n\n\n  // find the JM coordinates of the smoothed boundary of the limiting gamut in ZCAM at the hue slice 'h' \n  // by searching along the line defined by 'JMSource' and 'JMFocus'\n  // the function will search outwards from where the line intersects the achromatic axis with a staring incement of 'startStepSize'\n  // once the boundary has been crossed it will search in the opposite direction with half the step size\n  // and will repeat this as as many times as is set by the 'precision' paramter\n  float2 findBoundary(float2 JMSource, float2 JMFocus, float h, float3 XYZw, float3 XYZd65, float3x3 XYZ_to_RGB, float smoothing, int precision, float startStepSize )\n  \{\n\n    float2 achromaticIntercept = float2(JMFocus.x - (((JMSource.x-JMFocus.x) / (JMSource.y-JMFocus.y))*JMFocus.y), 0.0f);\n\n    if( achromaticIntercept.x <= 0.0f || achromaticIntercept.x >= limitJmax )\n    \{\n       return achromaticIntercept;\n    \}\n\n\n    float stepSize = startStepSize;\n    float2 unitVector = normalize(achromaticIntercept - JMFocus);\n    float2 JMtest = achromaticIntercept;\n    int searchOutwards = 1;\n\n    for( int i = 0; i < precision; ++i )\n    \{\n\n      while( 1 )\n      \{\n        JMtest = JMtest + unitVector * stepSize;\n        int inside = isInsideCube( vector_dot(XYZ_to_RGB, JMh_to_XYZ( float3(JMtest.x, JMtest.y, h), XYZw, XYZd65, viewingConditions ) / referenceLuminance ), boundaryRGB, smoothing);\n\n        if( searchOutwards )\n        \{\n          if( JMtest.x < 0.0f || JMtest.x > limitJmax || JMtest.y > limitMmax || !inside )\n          \{\n            searchOutwards = 0;\n            stepSize = -fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n        else\n        \{\n          if( JMtest.y < 0.0f || inside )\n          \{\n            searchOutwards = 1;\n            stepSize = fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n      \}\n    \}\n\n\n    float2 JMboundary = float2( clamp(JMtest.x, 0.0f, limitJmax), clamp(JMtest.y, 0.0f, limitMmax) );\n\n    return JMboundary;\n  \}\n\n\n  // apply the forward ACES SingleStageToneScale (SSTS) transform to the linear 'x' input value and return a luminance value\n  float forwardSSTS(float x, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    // Check for negatives or zero before taking the log. If negative or zero,\n    // set to HALF_MIN.\n    float logx = log10( max(x, HALF_MIN )); \n\n    float logy;\n\n    if( logx <= log10(minPt.x) )\n    \{ \n        logy = logx * minPt.z + ( log10(minPt.y) - minPt.z * log10(minPt.x) );\n    \}\n    else if(( logx > log10(minPt.x) ) && ( logx < log10(midPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(minPt.x)) / (log10(midPt.x) - log10(minPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsLow\[j/3]\[j%3], ssts_coefsLow\[(j+1)/3]\[(j+1)%3], ssts_coefsLow\[(j+2)/3]\[(j+2)%3]);\n        float3 monomials( t * t, t, 1.0f );\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else if(( logx >= log10(midPt.x) ) && ( logx < log10(maxPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(midPt.x)) / (log10(maxPt.x) - log10(midPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsHigh\[j/3]\[j%3], ssts_coefsHigh\[(j+1)/3]\[(j+1)%3], ssts_coefsHigh\[(j+2)/3]\[(j+2)%3]); \n        float3 monomials(t * t, t, 1.0f);\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else\n    \{\n        logy = logx * maxPt.z + ( log10(maxPt.y) - maxPt.z * log10(maxPt.x) );\n    \}\n\n    return spow(10.0f,logy);\n  \}\n\n// Michalis Menton Dual Spring Curve\n  float forwardMmTonescale(float x)\n  \{\n      float tc = 0.0f;\n      if (x<0.18)\n      \{\n          tc = cs*spow(x,c0);\n      \}\n      else\n      \{\n          tc = c0*(x-0.18)+0.18;\n      \}\n      \n      float ts = s1*spow((tc/(s0+tc)),p);\n      float tf = ts*ts/(ts+fl);\n      float ccf = spow(s0/(x+s0),dch)*sat;\n\n      return tf;\n  \}\n\n  float inverseMmTonescale(float x)\n  \{\n\n      float tf = (x+sqrt(x*(4*fl+x)))/2;\n      float ts = s0/(spow((s1/tf),(1/p))-1);\n      float tc = 0.0f;\n      if (ts<0.18)\n      \{\n          tc = spow((ts/cs),(1/c0));\n      \}\n      else\n      \{\n          tc = (ts-0.18)/c0+0.18;\n      \}\n      float ccf = spow(s0/(tc+s0),dch)*sat;\n\n      return tc;\n  \}\n\n  // Daniele's Compression Curve\n  // https://www.desmos.com/calculator/fihdxfot6s\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Scale Data\n      //   x = x / n;\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n      \n      //  Scale Data\n      //   h = h * n;\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n      \n      // inverted version of forwardDanieleCompressionCurve\n\n\n      float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n      float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n      // // Rescale data down\n      // x = x * n;\n\n      return new_x;\n  \}\n\n\n\n  \n  // apply the inverse ACES SingleStageToneScale (SSTS) transfomr to the 'x' luminance value and return an linear value\n  float inverseSSTS(float y, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    float KNOT_INC_LOW  = (log10(midPt.x) - log10(minPt.x)) / 3.0f;\n    float KNOT_INC_HIGH = (log10(maxPt.x) - log10(midPt.x)) / 3.0f;\n\n    // KNOT_Y is luminance of the spline at each knot\n    float KNOT_Y_LOW\[4];\n\n   for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_LOW\[i] = ( ssts_coefsLow\[i/3]\[i%3] + ssts_coefsLow\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float KNOT_Y_HIGH\[ 4];\n\n    for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_HIGH\[i] = ( ssts_coefsHigh\[i/3]\[i%3] + ssts_coefsHigh\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float logy = log10( max(y, 0.0000000001f));\n\n    float logx;\n\n    if( logy <= log10(minPt.y) )\n    \{\n        logx = log10(minPt.x);\n\n    \}\n    else if( (logy > log10(minPt.y)) && (logy <= log10(midPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy > KNOT_Y_LOW\[0] && logy <= KNOT_Y_LOW\[1])\n        \{\n          cf.x = ssts_coefsLow\[0]\[0];\n          cf.y = ssts_coefsLow\[0]\[1];\n          cf.z = ssts_coefsLow\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_LOW\[1] && logy <= KNOT_Y_LOW\[2])\n        \{\n          cf.x = ssts_coefsLow\[0]\[1];\n          cf.y = ssts_coefsLow\[0]\[2];\n          cf.z = ssts_coefsLow\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_LOW\[2] && logy <= KNOT_Y_LOW\[3])\n        \{\n          cf.x = ssts_coefsLow\[0]\[2];\n          cf.y = ssts_coefsLow\[1]\[0];\n          cf.z = ssts_coefsLow\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(minPt.x) + ( t + j) * KNOT_INC_LOW;\n\n    \}\n    else if( (logy > log10(midPt.y)) && (logy < log10(maxPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy >= KNOT_Y_HIGH\[0] && logy <= KNOT_Y_HIGH\[1])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[0];\n          cf.y = ssts_coefsHigh\[0]\[1];\n          cf.z = ssts_coefsHigh\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_HIGH\[1] && logy <= KNOT_Y_HIGH\[2])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[1];\n          cf.y = ssts_coefsHigh\[0]\[2];\n          cf.z = ssts_coefsHigh\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_HIGH\[2] && logy <= KNOT_Y_HIGH\[3])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[2];\n          cf.y = ssts_coefsHigh\[1]\[0];\n          cf.z = ssts_coefsHigh\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(midPt.x) + ( t + j) * KNOT_INC_HIGH;\n\n    \}\n    else\n    \{\n        logx = log10(maxPt.x);\n\n    \}\n\n    return spow(10.0f, logx);\n  \}\n\n\n  // convert Iz to luminance\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float IzToLuminance( float Iz )\n  \{\n    float V_p = spow(Iz, 1.0f / zcam_rho);\n    float luminance = spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p * zcam_luminance_shift;\n    return luminance;\n  \}\n\n\n  // convert luminance to Iz\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float luminanceToIz( float luminance )\n  \{\n    float Y_p = spow((luminance/zcam_luminance_shift) / st2084_L_p, st2084_m_1);\n    float Iz = spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), zcam_rho);\n    return Iz;\n  \}\n\n\n  // calculate a scale factor for colorfulness\n  // based on the difference between the original and tone scaled (TS) Iz values\n  // we are only interested in the differences above mid grey\n  // so we first offset the original Iz values to align 18% it with the mid point of the IzTS value\n  float highlightDesatFactor( float Iz, float IzTS )\n  \{\n\n    // float linear = IzToLuminance(Iz) / referenceLuminance;\n    float linear =Iz;\n\n    // no highlight desat below SSTS mid point\n    if( linear < 0.18f )\n    \{\n      return 1.0f;\n    \}\n\n    // float IzMid   = luminanceToIz(0.18f * referenceLuminance);\n    // float IzMidTS = luminanceToIz(sstsLuminance.y);\n    float IzMid   = 0.18f;\n    float IzMidTS = sstsLuminance.y/referenceLuminance;\n\n    float IzAligned = Iz + IzMidTS - IzMid;\n\n    float desatFactor = 1.0f - clamp( compressPowerP( (log10(max(HALF_MIN, IzAligned)) - log10(max(HALF_MIN, IzTS))) * desatHighlights, compressionFuncParams.x, HALF_MAX, compressionFuncParams.z, 0 ), 0.0f, 1.0f);\n\n    return desatFactor;\n  \}\n\n\n  float3 input_RGB_to_JMh(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    // float3 Izazbz =  XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n    // float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 colorJMh = Izazbz_to_JMh(Izazbz, refWhiteIzazbz.x, 0);\n\n    float3 JMh = XYZ_to_JMh(luminanceXYZ, refWhite, d65White, viewingConditions);\n\n    return JMh;\n\n  \}\n\n\n\n  float3 JMh_to_input_RGB(float3 JMh)\n  \{\n\n\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 inputRGB = luminanceToEncoding3( encodingIn, luminanceRGB);\n\n\n    return inputRGB;\n\n  \}\n\n\n\n  float3 forwardTonescale( float3 inputJMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n\n    float3 outputJMh;\n\n    // if( ! applyTonecurve && ! applyHighlightDesat )\n    // \{\n    //   // nothing to do here except output input JMh\n    //   return outputJMh;\n    // \}\n\n    // float3 colorJMh = Izazbz_to_JMh(inputIzazbz, refWhiteIzazbz.x, 0);\n    \n    float3 monoJMh = float3(inputJMh.x,0.0f,0.0f);\n\n    float3 linearJMh = JMh_to_luminance_RGB(monoJMh);\n    float linear = linearJMh.x/referenceLuminance;\n\n    // float3 monoIzazbz = JMh_to_Izazbz(colorJMh, refWhiteIzazbz.x, 0);\n    // float3 monoXYZ = Izazbz_to_XYZ(monoIzazbz);\n\n    float luminanceTS = linear;\n\n    // switch for applying the different tonescale compression functions\n    if( toneScaleMode == 1 )\n    \{\n        luminanceTS = forwardMmTonescale(linear) * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        luminanceTS = forwardDanieleCompressionCurve(linear)  * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 3 )\n    \{\n        luminanceTS = linear*referenceLuminance;\n    \}\n    else\n    \{\n        luminanceTS =  forwardSSTS(linear, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n\n    float3 tonemappedmonoJMh = luminance_RGB_to_JMh(float3(luminanceTS,luminanceTS,luminanceTS));\n    float3 tonemappedJMh = float3(tonemappedmonoJMh.x,inputJMh.y,inputJMh.z);\n    // float3 tonemappedJMh = float3(inputJMh.x,inputJMh.y,inputJMh.z);\n\n    // return outputJMh;\n    if( applyTonecurve )\n    \{\n        outputJMh = tonemappedJMh;\n    \}\n    else\n    \{\n        outputJMh = inputJMh;\n    \}\n\n    // Apply highlight desat\n    float factM = highlightDesatFactor(linear, luminanceTS/referenceLuminance);\n    if( applyHighlightDesat )\n    \{\n\n      outputJMh.y = outputJMh.y * factM;\n    \}\n\n    return tonemappedmonoJMh;\n\n  \}\n\n\n  float3 inverseTonescale( float3 JMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 Izazbz = JMh_to_Izazbz(JMh, refWhiteIzazbz.x, 0);\n\n    float3 tonemappedJMh = JMh;\n\n    if( ! applyTonecurve && ! applyHighlightDesat )\n    \{\n      // nothing else to do here\n      return tonemappedJMh;\n    \}\n\n    float3 untonemappedColourJMh = tonemappedJMh;\n\n    \n    // float luminance = IzToLuminance(Izazbz.x);\n\n    float3 monoTonemappedJMh = float3(tonemappedJMh.x,0.0f,0.0f);\n    float3 monoTonemappedRGB = JMh_to_luminance_RGB(monoTonemappedJMh);\n    float3 newMonoTonemappedJMh = luminance_RGB_to_JMh(monoTonemappedRGB);\n    float luminance = monoTonemappedRGB.x;\n\n    float3 tonemappedRGB = JMh_to_luminance_RGB(tonemappedJMh);\n    float3 newTonemappedJMh = luminance_RGB_to_JMh(tonemappedRGB);\n\n    // newTonemappedJMh.x = newTonemappedJMh.x * 2.0f;\n\n\n    // Dummy value to init the var\n    float linear = 50.0f;\n    // swtich for testing out the MM tonescale from Jed\n    if( toneScaleMode == 1 )\n    \{\n        linear = inverseMmTonescale(luminance/mmScaleFactor);\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        linear = inverseDanieleCompressionCurve(luminance/mmScaleFactor);\n    \}\n    else\n    \{\n        linear = inverseSSTS(luminance, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n    linear = linear*referenceLuminance;\n  \n    if( applyTonecurve )\n    \{\n      float3 untonemappedMonoJMh = luminance_RGB_to_JMh(float3(linear,linear,linear));\n      untonemappedColourJMh = float3(untonemappedMonoJMh.x,tonemappedJMh.y,tonemappedJMh.z);\n    \}\n \n\n    // Apply highlight desat\n    // I think there is bug here if you apply desat, but no tonecurve in the forward direction.\n    float factM = highlightDesatFactor(linear/referenceLuminance, luminance/referenceLuminance);\n    if( applyHighlightDesat && applyTonecurve )\n    \{\n      untonemappedColourJMh.y = untonemappedColourJMh.y / factM;\n    \}\n\n\n    return  untonemappedColourJMh;\n  \}\n\n\n  // compress the ZCAM JM values into the limiting gamut by projecting them towards a focus point beyond the achromatic axis\n  // in order to avoid the gamut compression to also compress black and white tones towards the focus point\n  // (which would result in lifed blacks and crushed highlights)\n  // we offset the focus further away from the achromatic axis the closer the lightness of a sample is to the zero or the limitJmax value\n  // a far away focus point means the compression vector becomes close to orthogonal to the lightness axis preserving black & white lightness\n  // the 'distanceGainCalcJ' paramter should be set to inputJMh.x for the forward direction\n  // and to the best guess of the original, uncompressed values for the inverse direction\n  // this is used for iteratively converging on the original, uncompressed value of J which would have gotten obfuscated by the forward transform\n  float3 compressGamut( float3 inputJMh, int invert, float distanceGainCalcJ )\n  \{\n    if( ! applyGamutCompression )\n    \{\n      return inputJMh;\n    \}\n\n    float sstsMidJ = XYZ_to_JMh( refWhite * sstsLuminance.y, refWhite, d65White, viewingConditions ).x;\n    float2 JMinput = float2(inputJMh.x, inputJMh.y);\n    float2 JMcusp = cuspFromTable( inputJMh.z);\n\n    float focusJ = lerp(JMcusp.x, sstsMidJ, cuspMidBlend);\n\n    float focusDistanceGain = 1.0f;\n\n    if( distanceGainCalcJ > focusJ )\n    \{\n      focusDistanceGain = (limitJmax - focusJ) / max(0.0001f, (limitJmax - min(limitJmax, distanceGainCalcJ)));\n    \}\n    else\n    \{\n      focusDistanceGain = (focusJ) / max(0.0001f, distanceGainCalcJ); \n    \}\n\n    float2 JMfocus = float2( focusJ, -JMcusp.y*focusDistanceClamped*focusDistanceGain );\n    float2 vecToFocus = (JMfocus - JMinput);\n    float2 achromaticIntercept = float2(JMfocus.x - (((JMinput.x-JMfocus.x) / (JMinput.y-JMfocus.y))*JMfocus.y), 0.0f);\n\n    // to reduce the number of expensive boundary finding iterations needed\n    // we taking an educated guess at a good starting step size\n    // based on how far the sample is either above or below the gamut cusp\n    float cuspToTipRatio;\n    if( JMinput.x > JMcusp.x )\n    \{\n      cuspToTipRatio = (JMinput.x - JMcusp.x) / (limitJmax - JMcusp.x);\n    \}\n    else\n    \{\n      cuspToTipRatio = (JMcusp.x - JMinput.x) / (JMcusp.x);\n    \}\n\n    float startStepSize = lerp(JMcusp.y / 3.0f, 0.1f, cuspToTipRatio);\n    float2 JMboundary = findBoundary(JMinput, JMfocus,  inputJMh.z, refWhite, d65White, XYZ_to_RGB_limit, smoothCusps, boundarySolvePrecision, startStepSize);\n    float normFact = 1.0f / max(0.0001f, length(JMboundary - achromaticIntercept));\n    float v = length(JMinput-achromaticIntercept) * normFact;\n    float vCompressed = compressPowerP(v, compressionFuncParams.x, compressionFuncParams.y, compressionFuncParams.z, invert);\n    float2 JMcompressed = 0.0f;\n    // hack to stop nan values after compression\n    if (JMinput.y != 0.0f)\n    \{\n      JMcompressed = achromaticIntercept + normalize(JMinput-achromaticIntercept)*vCompressed/normFact;\n    \}\n    else\n    \{\n      JMcompressed = JMinput;\n    \}\n    return float3(JMcompressed.x, JMcompressed.y, inputJMh.z);\n  \}\n\n\n  // apply the forward gamut compression to the limiting primaries\n  float3 compressGamutForward( float3 JMh )\n  \{\n    float3 JMhcompressed = compressGamut( JMh, 0, JMh.x );\n    // Hack to deal with weird zero values on output\n    // JMhcompressed.x = min(300.0f,JMhcompressed.x);\n    return JMhcompressed;\n  \}\n\n\n  // apply the inverse gamut compression\n  // and iterate a given number of times to reconstruct the original J value\n  float3 compressGamutInverse( float3 JMh )\n  \{\n    float3 JMhuncompressed;\n    float distanceGainCalcJ = JMh.x;\n\n    for( int i = 0; i < inverseSolverIterations; ++i )\n    \{\n      JMhuncompressed = compressGamut( JMh, 1, distanceGainCalcJ );\n      distanceGainCalcJ = JMhuncompressed.x;\n    \}\n\n    return JMhuncompressed;\n  \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    zcam_L_A = referenceLuminance * backgroundLuminance / 100.0f;\n    zcam_F_b = sqrt(backgroundLuminance/referenceLuminance);\n    zcam_F_L = 0.171f*spow(zcam_L_A, 1.0f/3.0f) * (1.0f-exp(-48.0f/9.0f*zcam_L_A));\n\n    if( discountIlluminant )\n    \{\n      cat_adaptDegree = 1.0f;\n    \}\n    else\n    \{\n      float viewingConditionsCoeff = 1.0f;\n\n      if( viewingConditions == 0 )\n      \{\n        viewingConditionsCoeff = 0.8f;\n      \}\n      else if( viewingConditions == 1 )\n      \{\n        viewingConditionsCoeff = 0.9f;\n      \}\n      else if( viewingConditions == 2 )\n      \{\n        viewingConditionsCoeff = 1.0f;\n      \}\n\n      cat_adaptDegree = viewingConditionsCoeff * (1.0f - (1.0f / 3.6f) * exp((-zcam_L_A - 42.0f) / 92.0f));\n    \}\n\n    zcam_cb  = 1.15f;\n    zcam_cg  = 0.66f;\n    zcam_c1  = 3424.0f / spow(2.0f,12.0f);\n    zcam_c2  = 2413.0f / spow(2.0f, 7.0f);\n    zcam_c3  = 2392.0f / spow(2.0f, 7.0f);\n    zcam_eta = 2610.0f / spow(2.0f,14.0f);\n    // zcam_rho = 1.7f * 2323.0f / pow(2.0f,5.0f);\n    zcam_luminance_shift = 1.0f / (-0.20151000f + 1.12064900f + 0.05310080f);\n\n    zcam_viewing_conditions_coeff = 1.0f;\n\n    if( viewingConditions == 0 )\n    \{\n      zcam_viewing_conditions_coeff = 0.525f;\n    \}\n    else if( viewingConditions == 1 )\n    \{\n      zcam_viewing_conditions_coeff = 0.59f;\n    \}\n    else if( viewingConditions == 2 )\n    \{\n      zcam_viewing_conditions_coeff = 0.69f;\n    \}\n\n    st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);\n    st2084_m_2=2523.0f / 4096.0f * 128.0f;\n    st2084_c_1=3424.0f / 4096.0f;\n    st2084_c_2=2413.0f / 4096.0f * 32.0f;\n    st2084_c_3=2392.0f / 4096.0f * 32.0f;\n    st2084_m_1_d = 1.0f / st2084_m_1;\n    st2084_m_2_d = 1.0f / st2084_m_2;\n    st2084_L_p = 10000.0f;\n\n    ssts_min_stop_sdr =  -6.5f;\n    ssts_max_stop_sdr =   6.5f;\n    ssts_min_stop_rrt = -15.0f;\n    ssts_max_stop_rrt =  18.0f;\n    ssts_min_lum_sdr = 0.02f;\n    ssts_max_lum_sdr = 48.0f;\n    ssts_min_lum_rrt = 0.0001f;\n    ssts_max_lum_rrt = 10000.0f;\n    ssts_n_knots_low = 4;\n    ssts_n_knots_high = 4;\n\n    ssts_minTable = float4(log10(ssts_min_lum_rrt), ssts_min_stop_rrt, log10(ssts_min_lum_sdr), ssts_min_stop_sdr);\n    ssts_maxTable = float4(log10(ssts_max_lum_sdr), ssts_max_stop_sdr, log10(ssts_max_lum_rrt), ssts_max_stop_rrt);\n    ssts_bendsLow = float4(ssts_min_stop_rrt, 0.18f, ssts_min_stop_sdr, 0.35f);\n    ssts_bendsHigh = float4(ssts_max_stop_sdr, 0.89f, ssts_max_stop_rrt, 0.90f);\n\n    float ssts_m1_data\[]=\{ 0.5f,-1.0f, 0.5f,\n                          -1.0f, 1.0f, 0.0f,\n                           0.5f, 0.5f, 0.0f \};\n    ssts_m1.setArray(ssts_m1_data);\n\n    ssts_min_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_minTable, log10(sstsLuminance.x)));\n    ssts_min_pt.y = sstsLuminance.x;\n    ssts_min_pt.z = 0.0f;\n\n    ssts_mid_pt = float3(0.18f, 4.8f, 1.55f);\n\n    ssts_max_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_maxTable, log10(sstsLuminance.z)));\n    ssts_max_pt.y = sstsLuminance.z;\n    ssts_max_pt.z = 0.0f;\n\n    ssts_knotIncLow  = (log10(ssts_mid_pt.x) - log10(ssts_min_pt.x)) / 3.0f;\n    ssts_knotIncHigh = (log10(ssts_max_pt.x) - log10(ssts_mid_pt.x)) / 3.0f;\n    ssts_pctLow  = lerp1D(ssts_bendsLow,  log2(ssts_min_pt.x / 0.18f));\n    ssts_pctHigh = lerp1D(ssts_bendsHigh, log2(ssts_max_pt.x / 0.18f));\n\n    \n    float ssts_coefsLow_data\[] = \{\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      log10(ssts_min_pt.y) + ssts_pctLow*(log10(ssts_mid_pt.y)-log10(ssts_min_pt.y)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    float sssts_coefsHigh_data\[] = \{\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      log10(ssts_mid_pt.y) + ssts_pctHigh*(log10(ssts_max_pt.y)-log10(ssts_mid_pt.y)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    ssts_coefsLow.setArray(ssts_coefsLow_data);\n    ssts_coefsHigh.setArray(sssts_coefsHigh_data);\n\n    ssts_paramMin = ssts_min_pt;\n    ssts_paramMid = ssts_mid_pt;\n    ssts_paramMax = ssts_max_pt;\n    ssts_expShift = log2(inverseSSTS(sstsLuminance.y, ssts_min_pt, ssts_paramMid, ssts_max_pt)) - log2(0.18f);\n    ssts_paramMin.x = spow(2.0f, (log(ssts_paramMin.x) / log(2.0f) - ssts_expShift));\n    ssts_paramMid.x = spow(2.0f, (log(0.18f          ) / log(2.0f) - ssts_expShift));\n    ssts_paramMax.x = spow(2.0f, (log(ssts_paramMax.x) / log(2.0f) - ssts_expShift));\n\n\n\n    float identity_matrix_data\[]=\{ 1.0f, 0.0f, 0.0f,\n                                   0.0f, 1.0f, 0.0f,\n                                   0.0f, 0.0f, 1.0f \};\n\n    float XYZ_to_LMS_Bradford_data\[]=\{ 0.8951f, 0.2664f,-0.1614f,\n                                      -0.7502f, 1.7135f, 0.0367f,\n                                       0.0389f,-0.0685f, 1.0296f \};\n\n    float XYZ_to_LMS_CAT02_data\[]=\{ 0.7328f, 0.4296f,-0.1624f,\n                                   -0.7036f, 1.6975f, 0.0061f,\n                                    0.0030f, 0.0136f, 0.9834f \};\n\n    float XYZ_to_LMS_ZCAM_data\[]=\{ 0.41478972f, 0.57999900f, 0.01464800f,\n                                  -0.20151000f, 1.12064900f, 0.05310080f,\n                                  -0.01660080f, 0.26480000f, 0.66847990f \};\n\n    float eps = 3.7035226210190005e-11f;\n    float LMS_to_Izazbz_data\[]=\{ 0.000000f, 1.0001f-eps , 0.000000f,\n                                 3.524000f,-4.066708f, 0.542708f,\n                                 0.199076f, 1.096799f,-1.295875f \};\n\n\n    identity_matrix.setArray(identity_matrix_data);\n    XYZ_to_LMS_Bradford.setArray(XYZ_to_LMS_Bradford_data);\n    XYZ_to_LMS_CAT02.setArray(XYZ_to_LMS_CAT02_data);\n    // XYZ_to_LMS_ZCAM.setArray(XYZ_to_LMS_ZCAM_data);\n    LMS_to_Izazbz.setArray(LMS_to_Izazbz_data);\n\n\n    // Blink does not seem to support initialising multidimensional arrays\n    // So instead of being able to index the matrix data directly from one\n    // we need to use long if/else statements to populate the\n    // input, limit & output primary matrices\n    // (maybe there is a better way?)\n\n    float XYZ_to_AP0_ACES_matrix_data\[]=\n    \{\n       1.0498110175f,  0.0000000000f, -0.0000974845f,\n      -0.4959030231f,  1.3733130458f,  0.0982400361f,\n       0.0000000000f,  0.0000000000f,  0.9912520182f\n    \};\n\n    float XYZ_to_AP1_ACES_matrix_data\[]=\n    \{\n       1.6410233797f, -0.3248032942f, -0.2364246952f,\n      -0.6636628587f,  1.6153315917f,  0.0167563477f,\n       0.0117218943f, -0.0082844420f,  0.9883948585f,\n    \};\n\n    float XYZ_to_Rec709_D65_matrix_data\[]=\n    \{\n       3.2409699419f, -1.5373831776f, -0.4986107603f,\n      -0.9692436363f,  1.8759675015f,  0.0415550574f,\n       0.0556300797f, -0.2039769589f,  1.0569715142f,\n    \};\n\n    float XYZ_to_Rec2020_D65_matrix_data\[]=\n    \{\n       1.7166511880f, -0.3556707838f, -0.2533662814f,\n      -0.6666843518f,  1.6164812366f,  0.0157685458f,\n       0.0176398574f, -0.0427706133f,  0.9421031212f,\n    \};\n\n    float XYZ_to_P3_D65_matrix_data\[]=\n    \{\n       2.4934969119f, -0.9313836179f, -0.4027107845f,\n      -0.8294889696f,  1.7626640603f,  0.0236246858f,\n       0.0358458302f, -0.0761723893f,  0.9568845240f,\n    \};\n\n    float XYZ_to_P3_DCI_matrix_data\[]=\n    \{\n       2.7253940305f, -1.0180030062f, -0.4401631952f,\n      -0.7951680258f,  1.6897320548f,  0.0226471906f,\n       0.0412418914f, -0.0876390192f,  1.1009293786f\n    \};\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    float Modified_CAT16_data\[]=\n    \{\n      0.656619, 0.342071, 0.00131062,\n      -0.222571, 1.10658, 0.115987,\n      -0.000634146, 0.05855, 0.942084,\n    \};\n\n    // populate the input primaries matrix\n    if( primariesIn == 0 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesIn == 1 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesIn == 2 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesIn == 3 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesIn == 4 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesIn == 5 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_input.setArray(identity_matrix_data);\n    \}\n\n    // populate the limiting primaries matrix\n    if( primariesLimit == 0 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 1 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 2 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesLimit == 3 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesLimit == 4 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesLimit == 5 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_limit.setArray(identity_matrix_data);\n    \}\n\n    // populate the output primaries matrix\n    if( primariesOut == 0 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesOut == 1 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesOut == 2 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesOut == 3 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesOut == 4 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesOut == 5 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_output.setArray(identity_matrix_data);\n    \}\n\n    RGB_to_XYZ_input = XYZ_to_RGB_input.invert();\n    RGB_to_XYZ_limit = XYZ_to_RGB_limit.invert();\n    RGB_to_XYZ_output = XYZ_to_RGB_output.invert();\n\n\n    float3x3 XYZ_to_RGB_sRGB;\n    XYZ_to_RGB_sRGB.setArray(XYZ_to_Rec709_D65_matrix_data);\n    float3 white(1.0f, 1.0f, 1.0f);\n\n    d65White = vector_dot(XYZ_to_RGB_sRGB.invert(), white);\n    inWhite = vector_dot(RGB_to_XYZ_input, white);\n    refWhite = vector_dot(RGB_to_XYZ_limit, white);\n\n    boundaryRGB = sstsLuminance.z / referenceLuminance;\n\n    if (catDataSelection == 0)\n    \{\n        CAT_CAT16.setArray(CAT_CAT16_data);\n    \}\n    else if (catDataSelection == 1)\n    \{\n        CAT_CAT16.setArray(Modified_CAT16_data);\n    \}\n    else if (catDataSelection == 2)\n    \{\n        CAT_CAT16 = RGBPrimsToXYZMatrix(rxy,gxy,bxy,wxy,1.0f,1);\n    \}\n\n    //\n    // solving the RGB cusp from JMh is very expensive\n    // instead we go the other way and start with a RGB cusp sweep\n    // which is easily calculated by converting via HSV (Hue, 1.0, 1.0)\n    // we then convert each cusp to JMh and add them to a table \n    //\n\n    gamutCuspTableSize = 360;\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      float hNorm = float(i) / (gamutCuspTableSize);\n      float3 RGB = HSV_to_RGB(float3(hNorm, 1.0f, 1.0f));\n      gamutCuspTableUnsorted\[i] = limit_RGB_to_JMh(RGB);\n    \}\n\n    int minhIndex = 0;\n    for( int i = 1; i < gamutCuspTableSize; ++i )\n    \{\n      if( gamutCuspTableUnsorted\[i].z <  gamutCuspTableUnsorted\[minhIndex].z)\n      \{\n        minhIndex = i;\n      \}\n    \}\n\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      gamutCuspTable\[i] = gamutCuspTableUnsorted\[(minhIndex+i)%gamutCuspTableSize];\n      \n    \}\n\n    // calculate the maximum expected J & M values for the given limit gamut\n    // these are used as limiting values for the gamut boundary searches\n\n    // limitJmax (asumed to match limitRGB white)\n    limitJmax = limit_RGB_to_JMh(float3(1.0f)).x;\n\n\n    // limitMmax (assumed to coincide with one of the RGBCMY corners of the limitRGB cube)\n    float3 gamutCornersTable\[6];\n    gamutCornersTable\[0] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 0.0f));\n    gamutCornersTable\[1] = limit_RGB_to_JMh(float3(1.0f, 1.0f, 0.0f));\n    gamutCornersTable\[2] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 0.0f));\n    gamutCornersTable\[3] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 1.0f));\n    gamutCornersTable\[4] = limit_RGB_to_JMh(float3(0.0f, 0.0f, 1.0f));\n    gamutCornersTable\[5] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 1.0f));\n\n    limitMmax = 0.0f;\n    for( int i = 0; i < 6; ++i )\n    \{\n      limitMmax = max(limitMmax, gamutCornersTable\[i].y);\n    \}\n\n    // ensure positive, non-zero focus depth\n    // to avoid the gamut boundary search vector becoming zero for achromatic colors\n    // which will cause the boundary search loop to continue forever and the node to hang\n    focusDistanceClamped = max(0.01f, focusDistance);\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    if( invert )\n    \{\n      float3 compressedJMh = output_RGB_to_JMh(srcRGB);\n      float3 uncompressedJMh = compressGamutInverse(compressedJMh);\n      float3 untonemappedJMh = inverseTonescale(uncompressedJMh);\n      dstRGB = JMh_to_input_RGB(untonemappedJMh);\n      diagnostic =  dstRGB;\n    \}\n    else\n    \{\n      // normal path\n      float3 JMh = input_RGB_to_JMh(srcRGB);\n      float3 tonemappedJMh = forwardTonescale(JMh);\n      float3 compressedJMh = compressGamutForward(tonemappedJMh);\n      // dstRGB = JMh_to_output_RGB(compressedJMh);\n\n      // testing \n      dstRGB = JMh_to_output_RGB(tonemappedJMh);\n\n      diagnostic =  dstRGB;\n    \}\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  DRT_CAM_Kernel_encodingIn {{parent.encoding_in}}
  DRT_CAM_Kernel_primariesIn {{parent.primaries_in}}
  DRT_CAM_Kernel_toneScaleMode {{parent.toneScaleMode}}
  DRT_CAM_Kernel_camMode {{parent.camMode}}
  DRT_CAM_Kernel_catType {{parent.cat_type}}
  DRT_CAM_Kernel_discountIlluminant {{parent.discount_illuminant}}
  DRT_CAM_Kernel_referenceLuminance {{parent.reference_luminance}}
  DRT_CAM_Kernel_backgroundLuminance {{parent.background_luminance}}
  DRT_CAM_Kernel_viewingConditions {{parent.viewing_conditions}}
  DRT_CAM_Kernel_applyTonecurve {{applyTonecurve}}
  DRT_CAM_Kernel_sstsLuminance {{parent.ssts_luminance.x} {parent.ssts_luminance.y} {parent.ssts_luminance.z}}
  DRT_CAM_Kernel_applyHighlightDesat {{parent.apply_highlight_desat}}
  DRT_CAM_Kernel_desatHighlights {{parent.desat_highlights}}
  DRT_CAM_Kernel_primariesLimit {{parent.primaries_limit}}
  DRT_CAM_Kernel_applyGamutCompression {{parent.apply_gamut_compression}}
  DRT_CAM_Kernel_cuspMidBlend {{parent.cusp_mid_blend}}
  DRT_CAM_Kernel_focusDistance {{parent.focus_distance}}
  DRT_CAM_Kernel_compressionFuncParams {{parent.compression_params.x} {parent.compression_params.y} {parent.compression_params.z}}
  DRT_CAM_Kernel_smoothCusps {{parent.smooth_cusps}}
  DRT_CAM_Kernel_boundarySolvePrecision {{parent.solve_precision}}
  DRT_CAM_Kernel_inverseSolverIterations {{parent.inverse_solver_iterations}}
  DRT_CAM_Kernel_encodingOut {{parent.encoding_out}}
  DRT_CAM_Kernel_primariesOut {{parent.primaries_out}}
  DRT_CAM_Kernel_clampOutput {{parent.clamp_output}}
  DRT_CAM_Kernel_invert {{parent.invert}}
  DRT_CAM_Kernel_XYZ_to_LMS_ZCAM {
      {{DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink3.preMatrix.matrix*matrixScaler}}
    }
  DRT_CAM_Kernel_zcam_rho {{"1.7 * 2523.0 / pow(2.0,5.0)"}}
  DRT_CAM_Kernel_Lp {{parent.ssts_luminance.z}}
  DRT_CAM_Kernel_su 2
  DRT_CAM_Kernel_c0 1.2
  DRT_CAM_Kernel_cs {{0.18**(1-DRT_CAM_Kernel_c0)}}
  DRT_CAM_Kernel_c1 1.1
  DRT_CAM_Kernel_p {{DRT_CAM_Kernel_c1*(0.9+0.05*DRT_CAM_Kernel_su)}}
  DRT_CAM_Kernel_w1 {{(0.595*DRT_CAM_Kernel_Lp/10000)**0.931+1.037}}
  DRT_CAM_Kernel_s1 {{DRT_CAM_Kernel_w1*DRT_CAM_Kernel_Lp/100}}
  DRT_CAM_Kernel_ex -0.26
  DRT_CAM_Kernel_eb 0.08
  DRT_CAM_Kernel_e0 {{2**(DRT_CAM_Kernel_ex+DRT_CAM_Kernel_eb*log(DRT_CAM_Kernel_s1)/log(2))}}
  DRT_CAM_Kernel_s0 {{(DRT_CAM_Kernel_s1/DRT_CAM_Kernel_e0)**(1/DRT_CAM_Kernel_c1)}}
  DRT_CAM_Kernel_fl 0.01
  DRT_CAM_Kernel_dch 0.55
  DRT_CAM_Kernel_sat {{max(1,1.125-0.00025*DRT_CAM_Kernel_Lp)}}
  DRT_CAM_Kernel_mmScaleFactor 100
  DRT_CAM_Kernel_n {{ssts_luminance.z}}
  DRT_CAM_Kernel_nr 100
  DRT_CAM_Kernel_g 1.1
  DRT_CAM_Kernel_w 0.84
  DRT_CAM_Kernel_t_1 0.075
  DRT_CAM_Kernel_catDataSelection 2
  DRT_CAM_Kernel_rxy {0.84 0.17}
  DRT_CAM_Kernel_gxy {-1.25 2.4}
  DRT_CAM_Kernel_bxy {-0.14 -0.6}
  DRT_CAM_Kernel_wxy {0.3333333333 0.3333333333}
  DRT_CAM_Kernel_XYZ_w {95.05 100 108.88}
  DRT_CAM_Kernel_L_A 318.31
  DRT_CAM_Kernel_Y_b 20
  DRT_CAM_Kernel_L_B 0.1
  DRT_CAM_Kernel_surround {1 0.69 1}
  rebuild_finalise ""
  name BlinkScript1
  note_font "Bitstream Vera Sans"
  selected true
  xpos -908
  ypos -184
  addUserKnob {20 User}
  addUserKnob {7 matrixScaler R 0 2}
  matrixScaler 0.99415
 }
set N3d692400 [stack 0]
 Clamp {
  minimum_enable false
  maximum {{parent.parent.DRT_CAM_Blink3.ssts_luminance.z/100}}
  name Clamp1
  xpos -908
  ypos -114
  disable {{1-parent.clamp_output}}
 }
 Output {
  name Output1
  xpos -908
  ypos -10
 }
push $N3d692400
 Multiply {
  value 0.01
  name Multiply1
  xpos -757
  ypos -139
 }
push $N3d692c00
 Colorspace {
  primary_in ACES
  colorspace_out sRGB
  primary_out DCI-P3
  name Colorspace1
  xpos -632
  ypos -195
 }
push $N3d692400
 Ramp {
  inputs 0
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {0 1556}
  name Ramp1
  xpos -480
  ypos -373
 }
 Ramp {
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {0 1556}
  color 140
  name Ramp6
  xpos -480
  ypos -341
 }
 Ramp {
  output {-rgba.red -rgba.green rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {2048 0}
  color 360
  name Ramp2
  xpos -480
  ypos -309
 }
 Expression {
  temp_name0 factor
  temp_expr0 4
  expr0 10
  expr2 int(b/factor)*factor
  name Expression2
  xpos -480
  ypos -277
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 0 3 rgba.alpha 0 3 rgba.green 0 1 rgba.green 0 1"
  name Shuffle1
  xpos -480
  ypos -253
  disable true
 }
 Multiply {
  channels {-rgba.red rgba.green -rgba.blue none}
  value {{frame-1}}
  name Multiply2
  xpos -480
  ypos -229
  disable true
 }
 Multiply {
  value {5 10 1 1}
  name Multiply4
  xpos -480
  ypos -205
  disable true
 }
 Reformat {
  type "to box"
  box_width 82
  box_height 1324
  box_fixed true
  resize distort
  name Reformat1
  xpos -480
  ypos -173
 }
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/nukeHellwig2022/hellwig2022_linearExtension.blink
  recompileCount 323
  ProgramGroup 1
  KernelDescription "2 \"hellwig2022\" iterate pixelWise e241ce45670a10e81f0fc5ad752b2a44bf7918d63eb7dceb30d062b6852c2d8f 2 \"src\" Read Point \"dst\" Write Point 12 \"direction\" Int 1 AAAAAA== \"catDataSelection\" Int 1 AAAAAA== \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"L_B\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== \"rxy\" Float 2 AAAAAAAAAAA= \"gxy\" Float 2 AAAAAAAAAAA= \"bxy\" Float 2 AAAAAAAAAAA= \"wxy\" Float 2 AAAAAAAAAAA= 12 \"direction\" 1 1 \"catDataSelection\" 1 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"L_B\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 \"rxy\" 2 1 \"gxy\" 2 1 \"bxy\" 2 1 \"wxy\" 2 1 3 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  kernelSource "\nkernel hellwig2022 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n\n    // the kernel parameters\n    int direction; // the direction of the convolution\n    int catDataSelection; // original vs modified CAT16 matrix\n\n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float L_B;\n    float3 surround;\n    bool discount_illuminant;\n\n    // xy coordintes for custom CAT matrix\n    float2 rxy;\n    float2 gxy;\n    float2 bxy;\n    float2 wxy;\n\n\n  local:\n    float HALF_MIN;\n    float HALF_MAX;\n\n    float3x3 CAT_CAT16;\n\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n        // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n    // this one initially returned -pow(abs(b), e) for negative b\n    // but this ended up producing undesirable results in some cases\n    // so now it just returns 0.0 instead\n    float spow( float base, float exponent )\n    \{\n        if(base < 0.0f && exponent != floor(exponent) )\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return pow(base, exponent); \n        \}\n    \}\n\n    float3 float3spow( float3 base, float exponent )\n    \{\n        return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n    \}\n\n    float3 float3sign( float3 v )\n    \{\n        return float3(sign(v.x), sign(v.y), sign(v.z));\n    \}\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    // convert radians to degrees\n    float degrees( float radians )\n    \{\n      return radians * 180.0f / PI;\n    \}\n\n    float abs( float a )\n    \{\n      return fabs(a);\n    \}\n\n    float3 float3abs( float3 a )\n    \{\n      return fabs(a);\n    \}\n  \n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n\n\n  float hue_angle( float a, float b )\n  \{\n    // \"\"\"\n    // Return the *hue* angle :math:`h` in degrees.\n\n    // Parameters\n    // ----------\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Hue* angle :math:`h` in degrees.\n\n    // Examples\n    // --------\n    // >>> a = -0.000624112068243\n    // >>> b = -0.000506270106773\n    // >>> hue_angle(a, b)  # doctest: +ELLIPSIS\n    // 219.0484326...\n    // \"\"\"\n\n    // a = as_float_array(a);\n    // b = as_float_array(b);\n\n    float h = degrees(atan2(b, a)) / 360;\n\n    return h;\n  \}\n\n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n  float radians(float a)\n  \{\n    return a * PI / 180.0f;\n  \}\n\n\n\n  float3x3  RGBPrimsToXYZMatrix(float2 rxy, float2 gxy, float2 bxy, float2 wxy,float Y, bool direction)\n  \{\n    // # given r g b chromaticities and whitepoint, convert RGB colors to XYZ\n    // # based on CtlColorSpace.cpp from the CTL source code : 77\n    // # param: xy - dict of chromaticity xy coordinates: rxy: float2(x, y) etc\n    // # param: Y - luminance of \"white\" - defaults to 1.0\n    // # param: inverse - calculate XYZ to RGB instead\n\n    float2 r = rxy;\n    float2 g = gxy;\n    float2 b = bxy;\n    float2 w = wxy;\n\n    float X = w.x * Y / w.y;\n    float Z = (1 - w.x - w.y) * Y / w.y;\n\n    // # Scale factors for matrix rows\n    float d = r.x * (b.y - g.y) + b.x * (g.y - r.y) + g.x * (r.y - b.y);\n\n    float Sr =    (X * (b.y - g.y) -      \\\n            g.x * (Y * (b.y - 1.0f) +  \\\n            b.y  * (X + Z)) +       \\\n            b.x  * (Y * (g.y - 1.0f) + \\\n            g.y * (X + Z))) / d ;\n    \n    float Sg =    (X * (r.y - b.y) +      \\\n            r.x * (Y * (b.y - 1.0f) +  \\\n            b.y * (X + Z)) -        \\\n            b.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    float Sb =    (X * (g.y - r.y) -      \\\n            r.x * (Y * (g.y - 1.0f) +  \\\n            g.y * (X + Z)) +        \\\n            g.x * (Y * (r.y - 1.0f) +  \\\n            r.y * (X + Z))) / d ;\n\n    // # Assemble the matrix\n    float Mdata\[] =\n    \{\n            Sr * r.x, Sr * r.y, Sr * (1.0f - r.x - r.y),\n            Sg * g.x, Sg * g.y, Sg * (1.0f - g.x - g.y),\n            Sb * b.x, Sb * b.y, Sb * (1.0f - b.x - b.y),\n    \};\n\n    float MdataNukeOrder\[] = \{\n      Mdata\[0], Mdata\[3], Mdata\[6],\n      Mdata\[1], Mdata\[4], Mdata\[7],\n      Mdata\[2], Mdata\[5], Mdata\[8],\n    \};\n\n    float3x3 newMatrix;\n    newMatrix.setArray(MdataNukeOrder);\n\n    // create inverse matrix\n    float3x3 newMatrixInverse = newMatrix.invert();\n\n    // return forward or inverse matrix\n    if (direction == 0)\n    \{\n      return newMatrix;\n    \}\n    else if (direction == 1)\n    \{\n      return newMatrixInverse;\n    \}\n  \}\n\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n    //   \"\"\"\n    //   Return the achromatic response :math:`A` from given compressed\n    //   *CAM16* transform sharpened *RGB* array and :math:`N_\{bb\}` chromatic\n    //   induction factor for forward *Hellwig and Fairchild (2022)* implementation.\n\n    //   Parameters\n    //   ----------\n    //   RGB\n    //       Compressed *CAM16* transform sharpened *RGB* array.\n\n    //   Returns\n    //   -------\n    //   :class:`numpy.floating` or :class:`numpy.ndarray`\n    //       Achromatic response :math:`A`.\n\n    //   Examples\n    //   --------\n    //   >>> RGB = np.array(\[7.94634384, 7.94713791, 7.9488967])\n    //   >>> achromatic_response_forward(RGB)  # doctest: +ELLIPSIS\n    //   23.9322704...\n    //   \"\"\"\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n    // \"\"\"\n    // Return the *colourfulness* correlate :math:`M`.\n\n    // Parameters\n    // ----------\n    // N_c\n    //     Surround chromatic induction factor :math:`N_\{c\}`.\n    // e_t\n    //     Eccentricity factor :math:`e_t`.\n    // a\n    //     Opponent colour dimension :math:`a`.\n    // b\n    //     Opponent colour dimension :math:`b`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     *Colourfulness* correlate :math:`M`.\n\n    // Examples\n    // --------\n    // >>> N_c = 1\n    // >>> e_t = 1.13423124867\n    // >>> a = -0.00063418423001\n    // >>> b = -0.000479072513542\n    // >>> colourfulness_correlate(N_c, e_t, a, b)  # doctest: +ELLIPSIS\n    // 0.0387637...\n    // \"\"\"\n\n    // N_c = as_float_array(N_c)\n    // e_t = as_float_array(e_t)\n    // a = as_float_array(a)\n    // b = as_float_array(b)\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    // \"\"\"\n    // Return the degree of adaptation :math:`D` from given surround maximum\n    // degree of adaptation :math:`F` and adapting field *luminance* :math:`L_A`\n    // in :math:`cd/m^2`.\n\n    // Parameters\n    // ----------\n    // F\n    //     Surround maximum degree of adaptation :math:`F`.\n    // L_A\n    //     Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`.\n\n    // Returns\n    // -------\n    // :class:`numpy.floating` or :class:`numpy.ndarray`\n    //     Degree of adaptation :math:`D`.\n\n    // Examples\n    // --------\n    // >>> degree_of_adaptation(1.0, 318.31)  # doctest: +ELLIPSIS\n    // 0.9944687...\n    // \"\"\"\n\n    // F = as_float_array(F)\n    // L_A = as_float_array(L_A)\n\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n\n\n    // def d_post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n    //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n    \n    //     d_RGB_a = (\n    //         400\n    //         * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100)\n    //         / (F_L_RGB + 27.13) ** 2\n    //     )\n    \n    //     return d_RGB_a\n\n    // ** example\n        // (a**2 + b**2)\n        // (a * a + b * b);\n    \n\n\n\n        \n    // def post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n\n\n    //     RGB = as_float_array(RGB)\n    //     F_L = as_float_array(F_L)\n\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB) / 100, 0.42)\n    //     RGB_c = (400 * np.sign(RGB) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n\n    //     return RGB_c\n\n\n    float3 post_adaptation_non_linear_response_compression_forward(float3 RGB, float F_L)\n    \{\n        // RGB = as_float_array(RGB)\n        // F_L = as_float_array(F_L)\n    \n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB) / 100.0f, 0.42f);\n        float3 RGB_c = (400.0f * sign(RGB) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n    \n        return RGB_c;\n    \}\n\n    \n    float3 post_adaptation_non_linear_response_compression_inverse(float3 RGB,float F_L)\n    \{\n        // RGB = as_float_array(RGB)\n        // F_L = as_float_array(F_L)\n\n\n        // RGB_p = (\n        //     np.sign(RGB - 0.1)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)),\n        //         1 / 0.42,\n        //     )\n        // )\n\n\n        // RGB_p = ( np.sign(RGB - 0.1) * 100 / F_L\[..., np.newaxis] * spow( (27.13 * np.absolute(RGB - 0.1)) / (400 - np.absolute(RGB - 0.1)), 1 / 0.42, ))\n\n        // older compression formula subbed in\n        // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n\n        // float3 RGB_p =  sign(RGB - 0.1f) * 100.0f / F_L * spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f);\n        float3 RGB_p =  (float3sign(RGB - 0.1f) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f) );\n        // float3 RGB_p =   float3sign(RGB) * 100.0f / F_L        * float3spow((27.13f * float3abs(RGB)) / (400.0f - float3abs(RGB)), 1.0f / 0.42f);\n        return RGB_p;\n    \}\n\n\n    // def d_post_adaptation_non_linear_response_compression_forward(\n    //     RGB: ArrayLike, F_L: FloatingOrArrayLike\n    // ) -> NDArray:\n    //     F_L_RGB = spow(F_L\[..., np.newaxis] * RGB / 100, 0.42)\n    //     F_L_100 = spow(F_L\[..., np.newaxis] / 100, 0.42)\n    \n    //     d_RGB_a = (  400 * ((0.42 * 27.13) * spow(RGB, -0.58) * F_L_100) / (F_L_RGB + 27.13) ** 2  )\n    \n    //     return d_RGB_a\n    \n    \n    float3 d_post_adaptation_non_linear_response_compression_forward( float3 RGB, float F_L)\n    \{\n        float3 F_L_RGB = float3spow(F_L * RGB / 100.0f, 0.42f);\n        float F_L_100 = spow(F_L / 100.0f, 0.42f);\n    \n        // float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ (F_L_RGB + 27.13f) ** 2.0f );\n           float3 d_RGB_a = ( 400.0f * ((0.42f * 27.13f) * float3spow(RGB, -0.58f) * F_L_100)/ ( (F_L_RGB + 27.13f) *  (F_L_RGB + 27.13f) ));\n        //    d_RGB_a = d_RGB_a * d_RGB_a;\n\n        return d_RGB_a;\n    \}\n\n\n  float3 XYZ_to_Hellwig2022_linearExtension_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n    //     \"\"\"\n    //     Compute the *Hellwig and Fairchild (2022)* colour appearance model\n    //     correlates from given *CIE XYZ* tristimulus values.\n\n    //     Parameters\n    //     ----------\n    //     XYZ\n    //         *CIE XYZ* tristimulus values of test sample / stimulus.\n    //     XYZ_w\n    //         *CIE XYZ* tristimulus values of reference white.\n    //     L_A\n    //         Adapting field *luminance* :math:`L_A` in :math:`cd/m^2`, (often taken\n    //         to be 20% of the luminance of a white object in the scene).\n    //     Y_b\n    //         Luminous factor of background :math:`Y_b` such as\n    //         :math:`Y_b = 100 x L_b / L_w` where :math:`L_w` is the luminance of the\n    //         light source and :math:`L_b` is the luminance of the background. For\n    //         viewing images, :math:`Y_b` can be the average :math:`Y` value for the\n    //         pixels in the entire image, or frequently, a :math:`Y` value of 20,\n    //         approximate an :math:`L^*` of 50 is used.\n    //     surround\n    //         Surround viewing conditions induction factors.\n    //     discount_illuminant\n    //         Truth value indicating if the illuminant should be discounted.\n\n    //     Returns\n    //     -------\n    //     :class:`colour.CAM_Specification_Hellwig2022`\n    //         *Hellwig and Fairchild (2022)* colour appearance model specification.\n\n    //     Notes\n    //     -----\n    //     +------------+-----------------------+---------------+\n    //     | **Domain** | **Scale - Reference** | **Scale - 1** |\n    //     +============+=======================+===============+\n    //     | ``XYZ``    | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n    //     | ``XYZ_w``  | \[0, 100]              | \[0, 1]        |\n    //     +------------+-----------------------+---------------+\n\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | **Range**                           | **Scale - Reference** | **Scale - \\\n    // 1** |\n    //     +=====================================+=======================+===========\\\n    // ====+\n    //     | ``CAM_Specification_Hellwig2022.J`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.C`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.h`` | \[0, 360]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.s`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.Q`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.M`` | \[0, 100]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n    //     | ``CAM_Specification_Hellwig2022.H`` | \[0, 400]              | \[0, 1]    \\\n    //     |\n    //     +-------------------------------------+-----------------------+-----------\\\n    // ----+\n\n    //     References\n    //     ----------\n    //     :cite:`Fairchild2022`, :cite:`Hellwig2022`\n\n    //     Examples\n    //     --------\n    //     >>> XYZ = np.array(\[19.01, 20.00, 21.78])\n    //     >>> XYZ_w = np.array(\[95.05, 100.00, 108.88])\n    //     >>> L_A = 318.31\n    //     >>> Y_b = 20.0\n    //     >>> surround = VIEWING_CONDITIONS_Hellwig2022\['Average']\n    //     >>> XYZ_to_Hellwig2022(XYZ, XYZ_w, L_A, Y_b, surround)\n    //     ... # doctest: +ELLIPSIS\n    //     CAM_Specification_Hellwig2022(J=41.7312079..., C=0.0257636..., \\\n    // h=217.0679597..., s=0.0608550..., Q=55.8523226..., M=0.0339889..., \\\n    // H=275.5949861..., HC=None)\n    //     \"\"\"\n\n        XYZ = float3_to_domain_100(XYZ);\n        XYZ_w = float3_to_domain_100(XYZ_w);\n        float _X_w = XYZ_w.x ;\n        float Y_w = XYZ_w.y ;\n        float _Z_w = XYZ_w.z ;\n        // L_A = as_float_array(L_A)\n        // Y_b = as_float_array(Y_b)\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n        \n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 1\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB = vector_dot(MATRIX_16, XYZ)\n\n        float3 RGB = vector_dot(MATRIX_16, XYZ);\n        // float3 RGB = XYZ;\n\n        // # Step 2\n        // RGB_c = D_RGB * RGB\n        float3 RGB_c = D_RGB * RGB;\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_c) / 100, 0.42)\n        // float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n        // // RGB_a = (400 * np.sign(RGB_c) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        // float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        // RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L)\n        // RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // ) * (\n        //     RGB_c - L_B\n        // ) + post_adaptation_non_linear_response_compression_forward(\n        //     full(3, L_B), F_L\n        // )\n        // RGB_a = np.where(RGB_c < L_B, RGB_a_l, RGB_a)\n\n        // # Step 3\n        // # Applying forward post-adaptation non-linear response compression.\n        float3 RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L);\n        // float3 RGB_a = RGB_c;\n        float3 RGB_a_l = d_post_adaptation_non_linear_response_compression_forward(L_B, F_L) * ( RGB_c - L_B) + post_adaptation_non_linear_response_compression_forward( L_B, F_L );\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_a_l.x: RGB_a.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_a_l.y: RGB_a.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_a_l.z: RGB_a.z;\n\n\n\n\n        // # Step 4\n        // # Converting to preliminary cartesian coordinates.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a = RGB_d.x ;\n        float G_a = RGB_d.y ;\n        float B_a = RGB_d.z ;\n        // a = R_a - 12 * G_a / 11 + B_a / 11\n        float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n        // b = (R_a + G_a - 2 * B_a) / 9\n        float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n\n        // # Computing the *hue* angle :math:`h`.\n        // h = np.degrees(np.arctan2(b, a)) % 360\n        // Unclear why this isnt matching the python version.\n        float h = mod(degrees(atan2(b, a)), 360.0f);\n\n        \n\n        // # Step 5\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n\n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Step 6\n        // # Computing achromatic responses for the stimulus.\n        // R_a, G_a, B_a = tsplit(RGB_a)\n        float R_a2 = RGB_a.x ;\n        float G_a2 = RGB_a.y ;\n        float B_a2 = RGB_a.z ;\n        // A = 2 * R_a + G_a + 0.05 * B_a - 0.305\n        float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n\n        // # Step 7\n        // # Computing the correlate of *Lightness* :math:`J`.\n        // with sdiv_mode():\n        //     J = 100 * spow(sdiv(A, A_w), surround.c * z)\n\n        float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n\n        // # Step 8\n        // # Computing the correlate of *brightness* :math:`Q`.\n        // with sdiv_mode():\n        //     Q = (2 / as_float(surround.c)) * (J / 100) * A_w\n        float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n\n        // # Step 9\n        // # Computing the correlate of *colourfulness* :math:`M`.\n        // M = 43 * surround.N_c * e_t * np.sqrt(a**2 + b**2)\n        float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n\n        // # Computing the correlate of *chroma* :math:`C`.\n        // with sdiv_mode():\n        //     C = 35 * sdiv(M, A_w)\n        float C = 35.0f * sdiv(M, A_w);\n\n\n        // # Computing the correlate of *saturation* :math:`s`.\n        // with sdiv_mode():\n        //     s = 100 * sdiv(M, Q)\n        float s = 100.0f * sdiv(M, Q);\n\n\n\n        // return XYZ_w;\n        // return RGB_w;\n        // return \{D,k,k4\};\n        // return \{F_L,n,z\};\n        // return RGB_c;\n        return \{J,M,h\};\n        // return XYZ;\n    \}\n\n    float3 Hellwig2022_linearExtension_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n        // # Step 2\n        // # Computing eccentricity factor *e_t*.\n        // hr = np.radians(h)\n        float hr = radians(h);\n\n\n        // _h = hr\n        // _2_h = 2 * hr\n        // _3_h = 3 * hr\n        // _4_h = 4 * hr\n        float _h = hr;\n        float _2_h = 2 * hr;\n        float _3_h = 3 * hr;\n        float _4_h = 4 * hr;\n    \n        // e_t = (\n        //     -0.0582 * np.cos(_h)\n        //     - 0.0258 * np.cos(_2_h)\n        //     - 0.1347 * np.cos(_3_h)\n        //     + 0.0289 * np.cos(_4_h)\n        //     - 0.1475 * np.sin(_h)\n        //     - 0.0308 * np.sin(_2_h)\n        //     + 0.0385 * np.sin(_3_h)\n        //     + 0.0096 * np.sin(_4_h)\n        //     + 1\n        // )\n        float e_t = (\n            -0.0582f * cos(_h)\n            - 0.0258f * cos(_2_h)\n            - 0.1347f * cos(_3_h)\n            + 0.0289f * cos(_4_h)\n            - 0.1475f * sin(_h)\n            - 0.0308f * sin(_2_h)\n            + 0.0385f * sin(_3_h)\n            + 0.0096f * sin(_4_h)\n            + 1.0f\n        );\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n        float P_p_1 = 43.0f * surround.z * e_t;\n        float P_p_2 = A;\n\n\n        // # Step 3\n        // # Computing opponent colour dimensions :math:`a` and :math:`b`.\n        // with sdiv_mode():\n        //     gamma = M / P_p_1\n        float gamma = M / P_p_1;\n    \n        // a = gamma * np.cos(hr)\n        float a = gamma * cos(hr);\n        // b = gamma * np.sin(hr)\n        float b = gamma * sin(hr);\n\n\n        // # Step 4\n        // # Applying post-adaptation non-linear response compression matrix.\n        // RGB_a = (\n        //     vector_dot(\n        //         \[\n        //             \[460, 451, 288],\n        //             \[460, -891, -261],\n        //             \[460, -220, -6300],\n        //         ],\n        //         tstack(\[P_p_2, a, b]),\n        //     )\n        //     / 1403\n        // )\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = (\n        //     np.sign(RGB_a)\n        //     * 100\n        //     / F_L\[..., np.newaxis]\n        //     * spow(\n        //         (27.13 * np.absolute(RGB_a)) / (400 - np.absolute(RGB_a)),\n        //         1 / 0.42,\n        //     )\n        // )\n        // float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n\n\n        // # Step 5\n        // # Applying inverse post-adaptation non-linear response compression.\n        // RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L)\n        // RGB_c_l = (\n        //     RGB_a\n        //     - post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) / (\n        //     d_post_adaptation_non_linear_response_compression_forward(\n        //         full(3, L_B), F_L\n        //     )\n        // ) + L_B\n        // RGB_c = np.where(RGB_c < L_B, RGB_c_l, RGB_c)\n\n        // Adding 0.1 here seems to fix the inversion issue, not really clear on why I'm needing to do this\n        RGB_a = RGB_a + 0.1f;\n        float3 RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a, F_L);\n        // float3 RGB_c = RGB_a;\n        float3 RGB_c_l = ( RGB_a - post_adaptation_non_linear_response_compression_forward( L_B, F_L)) / (d_post_adaptation_non_linear_response_compression_forward( L_B, F_L)) + L_B;\n\n        float3 RGB_d;\n        RGB_d.x = RGB_c.x < L_B ? RGB_c_l.x : RGB_c.x;\n        RGB_d.y = RGB_c.y < L_B ? RGB_c_l.y : RGB_c.y;\n        RGB_d.z = RGB_c.z < L_B ? RGB_c_l.z : RGB_c.z;\n\n\n        // # Step 6\n        // RGB = RGB_c / D_RGB\n        float3 RGB = RGB_d / D_RGB;\n        \n    \n        // # Step 7\n        // XYZ = vector_dot(MATRIX_INVERSE_16, RGB)\n        float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n        float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n\n\n        // return XYZ;\n        return XYZ;\n\n    \}\n\n\n    float3 Hellwig2022_JMh_to_linearJ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n    \{\n        float J = JMh.x;\n        float M = JMh.y;\n        float h = JMh.z;\n\n        // L_A = as_float_array(L_A)\n        // XYZ_w = to_domain_100(XYZ_w)\n        // _X_w, Y_w, _Z_w = tsplit(XYZ_w)\n        float _X_w = XYZ_w.x;\n        float Y_w = XYZ_w.y;\n        float _Z_w = XYZ_w.z;\n\n        // # Step 0\n        // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.\n        // RGB_w = vector_dot(MATRIX_16, XYZ_w)\n        float3x3 MATRIX_16 = CAT_CAT16;\n        float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n\n\n        // # Computing degree of adaptation :math:`D`.\n        float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n        if(discount_illuminant)\n        \{\n            D = 1.0f;\n        \}\n\n        // # Viewing conditions dependent parameters\n        float k = 1 / (5 * L_A + 1);\n        float k4 = pow(k,4);\n        float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n        float n = sdiv(Y_b, Y_w);\n        float z = 1.48 + sqrt(n);\n\n        // // float D_RGB = ( D\[..., np.newaxis] * Y_w\[..., np.newaxis] / RGB_w + 1 - D\[..., np.newaxis] )\n        float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n        float3 RGB_wc = D_RGB * RGB_w;\n        \n        // # Applying forward post-adaptation non-linear response compression.\n        // F_L_RGB = spow(F_L\[..., np.newaxis] * np.absolute(RGB_wc) / 100, 0.42)\n        float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n\n        // # Computing achromatic responses for the whitepoint.\n        // RGB_aw = (400 * np.sign(RGB_wc) * F_L_RGB) / (27.13 + F_L_RGB) + 0.1\n        float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n\n        // # Computing achromatic responses for the whitepoint.\n        // R_aw, G_aw, B_aw = tsplit(RGB_aw)\n        float R_aw = RGB_aw.x ;\n        float G_aw = RGB_aw.y ;\n        float B_aw = RGB_aw.z ;\n        // A_w = 2 * R_aw + G_aw + 0.05 * B_aw - 0.305\n        float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n\n\n        // # Computing achromatic response :math:`A` for the stimulus.\n        // A = A = A_w * spow(J / 100, 1 / (surround.c * z))\n        float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n\n        // # Computing *P_p_1* to *P_p_2*.\n        // P_p_1 = 43 * surround.N_c * e_t\n        // P_p_2 = A\n\n        float P_p_2 = A;\n\n\n\n        float panlrcm_data\[]=\n        \{\n            460.0f, 451.0f, 288.0f,\n            460.0f, -891.0f, -261.0f,\n            460.0f, -220.0f, -6300.0f,\n        \};\n        float3x3 panlrcm;\n        panlrcm.setArray(panlrcm_data);\n\n        float3 Mono_A = vector_dot(panlrcm, float3(A, 0, 0)) / 1403.0f;\n\n\n        float linear_A = sign(Mono_A.x) * 100.0f / F_L * spow((27.13f * abs(Mono_A.x)) / (400.0f - abs(Mono_A.x)), 1.0f / 0.42f);\n        // float3 Mono_c = float3sign(Mono_a) * 100.0f / F_L * float3spow((27.13f * float3abs(Mono_a)) / (400.0f - float3abs(Mono_a)), 1.0f / 0.42f);\n\n        return \{linear_A,linear_A,linear_A\};\n\n    \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    float Modified_CAT16_data\[]=\n    \{\n      0.656619, 0.342071, 0.00131062,\n      -0.222571, 1.10658, 0.115987,\n      -0.000634146, 0.05855, 0.942084,\n    \};\n\n    if (catDataSelection == 0)\n    \{\n        CAT_CAT16.setArray(CAT_CAT16_data);\n    \}\n    else if (catDataSelection == 1)\n    \{\n        CAT_CAT16.setArray(Modified_CAT16_data);\n    \}\n    else if (catDataSelection == 2)\n    \{\n      CAT_CAT16 = RGBPrimsToXYZMatrix(rxy,gxy,bxy,wxy,1.0f,1);\n    \}\n\n\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    // diagnostic =  srcRGB;\n\n    // float3 surround(1.0f, 0.69f, 1.0f);\n    // float3 XYZ_w(95.05f, 100.00f, 108.88f);\n\n    if (direction == 0)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_linearExtension_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        dstRGB = JMh;\n    \}\n    else if (direction == 1)\n    \{\n        float3 XYZ_out = Hellwig2022_linearExtension_JMh_to_XYZ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n    else if (direction == 2)\n    \{\n      float3 linearJ = Hellwig2022_JMh_to_linearJ(srcRGB, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n      dstRGB = linearJ;\n    \}\n    else if (direction == 3)\n    \{\n        float3 compressed = post_adaptation_non_linear_response_compression_forward(srcRGB,L_A);\n        float3 uncompressed = post_adaptation_non_linear_response_compression_inverse(compressed,L_A);\n        dstRGB = uncompressed;\n    \}\n    else if (direction == 4)\n    \{\n        float3 JMh = XYZ_to_Hellwig2022_linearExtension_JMh(srcRGB, XYZ_w, L_A, Y_b,surround,discount_illuminant);\n        float3 XYZ_out = Hellwig2022_linearExtension_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant);\n        dstRGB = XYZ_out;\n    \}\n\n\n    diagnostic = dstRGB;\n\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  rebuild ""
  hellwig2022_direction 1
  hellwig2022_catDataSelection 2
  hellwig2022_XYZ_w {95.05 100 108.88}
  hellwig2022_L_A 318.31
  hellwig2022_Y_b 20
  hellwig2022_L_B {{parent.BlinkScript1.DRT_CAM_Kernel_L_B}}
  hellwig2022_surround {1 0.69 1}
  hellwig2022_rxy {{parent.BlinkScript1.DRT_CAM_Kernel_rxy} {parent.BlinkScript1.DRT_CAM_Kernel_rxy}}
  hellwig2022_gxy {{parent.BlinkScript1.DRT_CAM_Kernel_gxy} {parent.BlinkScript1.DRT_CAM_Kernel_gxy}}
  hellwig2022_bxy {{parent.BlinkScript1.DRT_CAM_Kernel_bxy} {parent.BlinkScript1.DRT_CAM_Kernel_bxy}}
  hellwig2022_wxy {{parent.BlinkScript1.DRT_CAM_Kernel_wxy} {parent.BlinkScript1.DRT_CAM_Kernel_wxy}}
  rebuild_finalise ""
  name BlinkScript5
  label "\[python nuke.thisNode().knob('kernelSourceFile').value().split('/').pop(-1)]"
  xpos -480
  ypos -104
 }
 Group {
  name PlotChromaticity3
  xpos -480
  ypos -26
  addUserKnob {20 PlotChromaticity_tab l PlotChromaticity}
  addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
  use_gpu true
  addUserKnob {26 ""}
  addUserKnob {6 plot_input l "plot input" t "Enable plotting of the input pixels" +STARTLINE}
  plot_input true
  addUserKnob {41 input_gamut l gamut t "Set the gamut that the input colors are encoded in" -STARTLINE T GamutToXYZ.gamut}
  addUserKnob {4 diagram l in t "Choose the type of chromaticity diagram: \nCIE 1931 xy Chromaticity Diagram\nCIE 1976 u' v' Uniform Chromaticity Scale Diagram" -STARTLINE M {"CIE 1931 xy" "CIE 1976 u' v'" "" ""}}
  addUserKnob {6 enable_sample_color l "sample color" t "Enable plotting of the sampled color" +STARTLINE}
  enable_sample_color true
  addUserKnob {41 sample_color l color t "sample and plot selected color" T SampleColor.color}
  addUserKnob {22 follow_viewer l "follow viewer" t "Follow the selected viewer node. This causes this node to automatically connect to whatever the followed viewer is connected to.\n\nThis is useful if you want to have a 2nd viewer showing a chromaticity plot for whever you're looking at in your main viewer." T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to follow.')\nelse:\n    v\['knobChanged'].setValue('v = nuke.activeViewer().node()\\nif v and v.name() == nuke.thisNode().name():\\n    con = v.input(nuke.activeViewer().activeInput())\\n    plt = nuke.toNode(\"\{0\}\")\\n    plt.setInput(0, con)'.format(n.name()))" +STARTLINE}
  addUserKnob {22 unfollow_viewer l "unfollow viewer" -STARTLINE T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to unfollow.')\nelse:\n    v\['knobChanged'].setValue('')"}
  addUserKnob {26 plot_dimensions_label l " " T "<b>Chromaticity Diagram"}
  addUserKnob {3 resolution l " resolution" t "resolution to output"}
  resolution 2048
  addUserKnob {7 right_margin l "right margin" R 1 1.5}
  right_margin 1.1
  addUserKnob {7 left_margin l "left margin" R 0 0.2}
  left_margin 0.1
  addUserKnob {6 draw_spectral_locus l "spectrum locus" t "draw the spectrum locus: the boundary of color the human eye can see." +STARTLINE}
  draw_spectral_locus true
  addUserKnob {6 draw_line_of_purples l "line of purples" t "draw the \"line of purples\"" -STARTLINE}
  draw_line_of_purples true
  addUserKnob {6 draw_planckian_locus l "planckian locus" t "Display the planckian locus or the blackbody locus." +STARTLINE}
  draw_planckian_locus true
  addUserKnob {6 gamut_grid l "gamut grid" t "Display a gamut boundary with a grid or dot pattern" +STARTLINE}
  addUserKnob {41 gamut_gamutgrid l "" t "gamut for gamutgrid" -STARTLINE T RGBToXYZ_GamutGrid.gamut}
  addUserKnob {4 gamut_grid_style l style t "Choose the style to display the gamut plot" -STARTLINE M {grid dots "" "" "" ""}}
  addUserKnob {4 distribution l dist t "Which chromaticity space should the overlays be constructed in? \n\nYxy is familiar, but not very perceptually uniform.\n\nu'v' is designed to be more perceptually uniform." -STARTLINE M {"1931 Yxy" "1976 u'v'" "" ""}}
  addUserKnob {7 density t "Density of the grid or points" R 10 100}
  density 50
  addUserKnob {6 gamut_a l "gamut a" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_a_1 l "" -STARTLINE T RGBToXYZ_GamutA.gamut}
  addUserKnob {6 gamut_b l "gamut b" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_b_1 l "" -STARTLINE T RGBToXYZ_GamutB.gamut}
  addUserKnob {6 gamut_c l "gamut c" t "Display a gamut outline" +STARTLINE}
  addUserKnob {41 gamut_c_1 l "" -STARTLINE T RGBToXYZ_GamutC.gamut}
  addUserKnob {6 draw_pointers_gamut l "pointer's gamut" t "DrawPointer's gamut boundary" +STARTLINE}
  addUserKnob {6 draw_pointers_samples l "pointers sample colors" t "show the individual pointer gamut samples" -STARTLINE}
  addUserKnob {6 draw_macbeth_chart l "macbeth chart" t "draw a ColorChecker24 aka Macbeth Chart" +STARTLINE}
  addUserKnob {6 coordinate_system l "coordinate system" t "Draw CIE xy coordinate grid x and y axes" +STARTLINE}
  coordinate_system true
  addUserKnob {6 map_overlays_to_input_gamut l "map overlays to input gamut" t "This maps the overlays like the spectral locus, pointer's gamut, and the gamut overlay to the working gamut instead of keeping them as XYZ.\n\nFor example if the input gamut is ACEScg, these overlays will be mapped to that. Note that this can cause most of the overlays to be negative or highly saturated which might harm the visual appearance." +STARTLINE}
  map_overlays_to_input_gamut true
 }
  Group {
   inputs 0
   name GamutGrid1
   xpos -920
   ypos -201
   postage_stamp true
   addUserKnob {20 GamutGrid}
   addUserKnob {3 style}
   style {{!parent.gamut_grid_style}}
   addUserKnob {3 distribution -STARTLINE}
   distribution {{parent.distribution}}
   addUserKnob {7 density R 10 150}
   density {{parent.density}}
   addUserKnob {26 ""}
   addUserKnob {41 matrix T ColorMatrix.matrix}
   addUserKnob {12 wxy}
   wxy {{parent.RGBToXYZ_GamutGrid.wxy} {parent.RGBToXYZ_GamutGrid.wxy}}
  }
   ColorWheel {
    inputs 0
    format "512 512 0 0 512 512 1 square_512"
    centerSaturation 1
    fillFormat false
    area {-170 -158 682 670}
    name ColorWheel4
    xpos -260
    ypos -15
    postage_stamp false
   }
   Crop {
    box {0 0 {width} {height}}
    crop false
    name Crop2
    xpos -260
    ypos 27
   }
   Reformat {
    type scale
    scale {{max(parent.density/50,0.25)}}
    resize distort
    filter impulse
    pbb true
    name Reformat3
    xpos -260
    ypos 110
   }
set N3da01c00 [stack 0]
push $N3da01c00
   ContactSheet {
    inputs 2
    width {{width*columns}}
    height {{height/pixel_aspect*rows}}
    rows 1
    columns 2
    roworder TopBottom
    name ContactSheet2
    xpos -260
    ypos 169
   }
   Dot {
    name Dot1
    label " "
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -226
    ypos 246
   }
   ColorWheel {
    inputs 0
    format "512 512 0 0 512 512 1 square_512"
    fillFormat false
    area {40 40 472 472}
    name ColorWheel1
    xpos -40
    ypos -664
    postage_stamp false
   }
   Reformat {
    type scale
    scale {{max(parent.density/50,0.25)}}
    resize distort
    filter impulse
    pbb true
    name Reformat1
    xpos -40
    ypos -628
   }
   Crop {
    box {0 0 {width} {height}}
    reformat true
    name Crop1
    xpos -40
    ypos -602
   }
   Unpremult {
    name Unpremult1
    xpos -40
    ypos -526
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos -415
   }
   Colorspace {
    colorspace_in CIE-XYZ
    colorspace_out CIE-Yxy
    name Colorspace1
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -40
    ypos -341
   }
set N3d997000 [stack 0]
   Dot {
    name Dot2
    label " "
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -556
    ypos -331
   }
   Expression {
    expr0 r
    expr1 "4*g / ( -2*g + 12*b + 3)"
    expr2 "9*b / ( -2*g + 12*b + 3)"
    name Expression5
    label "CIE Yxy to CIELuv"
    xpos -590
    ypos -304
    disable {{!parent.distribution}}
   }
   Expression {
    expr0 r
    expr1 "(-(degrees(atan2(g-white.x, b-white.y))-180)+270)%360/360"
    expr2 "hypot(g-white.x, b-white.y)"
    expr3 a
    name Expression3
    xpos -590
    ypos -261
    cached true
    addUserKnob {20 User}
    addUserKnob {12 white}
    white {{"parent.distribution ? 4*parent.wxy.x / ( -2 * parent.wxy.x + 12 * parent.wxy.y + 3) : parent.wxy"} {"parent.distribution ? 9*parent.wxy.y / ( -2*parent.wxy.x + 12*parent.wxy.y + 3) : parent.wxy"}}
   }
set N3d996400 [stack 0]
   Posterize {
    channels rgb
    Colors {{rint(parent.density/3*2)}}
    name Posterize1
    xpos -590
    ypos -191
   }
set N3d996000 [stack 0]
push $N3d996400
   Dot {
    name Dot15
    xpos -446
    ypos -257
   }
   Copy {
    inputs 2
    from0 rgba.blue
    to0 rgba.blue
    name Copy1
    xpos -480
    ypos -154
   }
push $N3d996000
push $N3d996400
   Dot {
    name Dot16
    xpos -666
    ypos -257
   }
   Copy {
    inputs 2
    from0 rgba.green
    to0 rgba.green
    name Copy2
    xpos -700
    ypos -153
   }
   ContactSheet {
    inputs 2
    width {{width*columns}}
    height {{height/pixel_aspect*rows}}
    rows 1
    columns 2
    center true
    roworder TopBottom
    name ContactSheet3
    xpos -590
    ypos -106
   }
   Expression {
    expr0 r
    expr1 cos(radians(g*360))*b+white.x
    expr2 sin(radians(g*360))*b+white.y
    expr3 a
    name Expression19
    xpos -590
    ypos -58
    cached true
    addUserKnob {20 User}
    addUserKnob {12 white}
    white {{parent.Expression3.white} {parent.Expression3.white}}
   }
   Expression {
    expr0 r
    expr1 "9*g / ( 6*g - 16*b + 12)"
    expr2 "4*b/ ( 6*g - 16*b + 12)"
    name Expression2
    label "CIELuv to CIE Yxy"
    xpos -590
    ypos -16
    disable {{!parent.distribution}}
   }
   Colorspace {
    colorspace_in CIE-Yxy
    colorspace_out CIE-XYZ
    name Colorspace2
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -590
    ypos 32
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    invert true
    name ColorMatrix1
    label "XYZ to RGB"
    xpos -590
    ypos 81
   }
   Clamp {
    channels rgba
    maximum_enable false
    name ClampMin2
    xpos -590
    ypos 119
   }
   Clamp {
    channels alpha
    minimum 1
    MinClampTo_enable true
    MaxClampTo_enable true
    name Clamp1
    xpos -590
    ypos 152
   }
   Premult {
    name Premult1
    xpos -590
    ypos 194
   }
   Merge2 {
    inputs 2
    operation under
    bbox B
    name Merge2
    xpos -590
    ypos 242
   }
   Fill {
    output alpha
    name Fill1
    xpos -590
    ypos 297
   }
   Dot {
    name Dot3
    label " GRID"
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -556
    ypos 378
   }
push $N3da01c00
push $N3d997000
   Expression {
    expr0 r
    expr1 "4*g / ( -2*g + 12*b + 3)"
    expr2 "9*b / ( -2*g + 12*b + 3)"
    name Expression4
    label "CIE Yxy to CIELuv"
    xpos -40
    ypos -280
    disable {{!parent.distribution}}
   }
   Expression {
    expr0 r
    expr1 rint(g*Colors)/Colors
    expr2 rint(b*Colors)/Colors
    expr3 a
    name Expression1
    label rint
    xpos -40
    ypos -232
    addUserKnob {20 User}
    addUserKnob {7 Colors R 1 256}
    Colors {{parent.density}}
   }
   Expression {
    expr0 r
    expr1 "9*g / ( 6*g - 16*b + 12)"
    expr2 "4*b/ ( 6*g - 16*b + 12)"
    name Expression6
    label "CIELuv to CIE Yxy"
    xpos -40
    ypos -184
    disable {{!parent.distribution}}
   }
   Colorspace {
    colorspace_in CIE-Yxy
    colorspace_out CIE-XYZ
    name Colorspace3
    label "\[value colorspace_in] -> \[value colorspace_out]"
    xpos -40
    ypos -112
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    invert true
    name ColorMatrix3
    label "XYZ to RGB"
    xpos -40
    ypos -57
   }
   Clamp {
    channels alpha
    minimum 1
    MinClampTo_enable true
    MaxClampTo_enable true
    name Clamp4
    xpos -40
   }
   Premult {
    name Premult2
    xpos -40
    ypos 55
   }
   Merge2 {
    inputs 2
    operation under
    bbox B
    name Merge1
    xpos -40
    ypos 110
   }
   Clamp {
    channels rgba
    maximum_enable false
    name ClampMin1
    xpos -40
    ypos 273
   }
   Dot {
    name Dot4
    label " DOTS"
    note_font "Helvetica Bold"
    note_font_size 24
    note_font_color 0xa5a5a501
    xpos -6
    ypos 378
   }
   Switch {
    inputs 2
    which {{parent.style}}
    name Switch1
    xpos -257
    ypos 483
   }
   ColorMatrix {
    matrix {
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
        {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
      }
    name ColorMatrix2
    label "RGB to XYZ"
    xpos -257
    ypos 560
   }
   Output {
    name Output
    xpos -257
    ypos 740
   }
   ColorWheel {
    inputs 0
    format "256 256 0 0 256 256 1 square_256"
    area {40 40 472 472}
    name ColorWheel2
    xpos -37
    ypos -705
    postage_stamp false
   }
  end_group
set N3da10f00 [stack 0]
  Group {
   name RGBToXYZ_GamutGrid
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1030
   ypos -184
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut ACEScg
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   centerSaturation 1
   fillFormat false
   area {-196 -184 708 696}
   name ColorWheel1
   xpos -920
   ypos 5
  }
  Crop {
   box {0 0 {width} {height}}
   name Crop1
   xpos -920
   ypos 87
  }
  BlackOutside {
   name BlackOutside3
   xpos -920
   ypos 134
  }
set N3dcad000 [stack 0]
  Group {
   name RGBToXYZ_GamutC
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1140
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut Rec709
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r+input.width} {parent.ReformatBox4.box_width-input.height}}
   name Position6
   xpos -1140
   ypos 254
  }
push $N3dcad000
  Group {
   name RGBToXYZ_GamutB
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -1030
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut P3D65
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height*2}}
   name Position5
   xpos -1030
   ypos 254
  }
push $N3dcad000
  Group {
   name RGBToXYZ_GamutA
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos -920
   ypos 176
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   gamut Rec2020
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Position {
   translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
   name Position4
   xpos -920
   ypos 254
  }
push $N3da10f00
  Reformat {
   type scale
   scale 0.8
   turn true
   filter impulse
   black_outside true
   name Reformat2
   xpos -920
   ypos -129
  }
  BlackOutside {
   name BlackOutside2
   xpos -920
   ypos -106
  }
  Position {
   translate {{Rectangle1.area.r} {parent.Position3.translate.y-input.height}}
   name Position2
   xpos -920
   ypos -81
  }
  Group {
   inputs 0
   name ColorChecker24_After_November_2014
   label "CIE XYZ D50"
   xpos -920
   ypos -352
   addUserKnob {20 colorchecker_tab l "ColorChecker24 - After November 2014"}
   addUserKnob {3 patch_resolution}
   patch_resolution 48
  }
   Group {
    inputs 0
    name bluish_green
    selected true
    xpos 622
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.30451114 0.4143554688 0.344352688 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "bluish green"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 6
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue_flower
    xpos 512
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2419823988 0.2287175998 0.3282104382 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "blue flower"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 5
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name foliage
    xpos 402
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1114392339 0.1346792679 0.05239320311 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob foliage
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 4
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue_sky
    xpos 292
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1652470004 0.1785519348 0.2546024121 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "blue sky"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 3
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name light_skin
    xpos 180
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3811104477 0.336202304 0.1852590702 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "light skin"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 2
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 63
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 135
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name dark_skin
    xpos 70
    ypos -321
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1136398927 0.09832436105 0.047793811 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "dark skin"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 1
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 290
     ypos 63
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 290
     ypos 158
    }
    Output {
     name Output
     xpos 290
     ypos 230
    }
   end_group
   Group {
    inputs 0
    name orange_yellow
    xpos 622
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.4769723742 0.4293377578 0.06005041429 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "orange yellow"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 12
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name yellow_green
    xpos 512
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3427379502 0.4331759409 0.08330791241 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "yellow green"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 11
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name purple
    xpos 401
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.08353888545 0.06276662955 0.1042075686 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob purple
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 10
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name moderate_red
    xpos 290
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2915036416 0.188999956 0.09736350318 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "moderate red"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 9
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name purplish_blue
    xpos 180
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1200518326 0.1091090233 0.2874447494 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "purplish blue"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 8
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name orange
    xpos 74
    ypos -201
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.4073691399 0.3126416159 0.05130591012 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob orange
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 7
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name cyan
    xpos 622
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1247966941 0.180609913 0.2913392383 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob cyan
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 18
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name magenta
    xpos 512
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.299122798 0.1895114577 0.2213469194 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob magenta
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 17
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name yellow
    xpos 399
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.5888922356 0.5992976803 0.07077420003 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob yellow
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 16
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 182
    }
   end_group
   Group {
    inputs 0
    name red
    xpos 292
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.2143728424 0.127800835 0.03868150726 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob red
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 15
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name green
    xpos 182
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1413517689 0.2233437582 0.07287461742 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob green
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 14
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name blue
    xpos 72
    ypos -81
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.06809095613 0.05596214063 0.2077405936 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob blue
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 13
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name black_2
    xpos 623
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.03042544265 0.03151319431 0.02656724434 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "black 2 (1.5 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 24
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 125
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_3
    xpos 512
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.08448968042 0.08817234828 0.07391630753 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 3.5 (1.05 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 23
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_5
    xpos 403
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.1835495863 0.1906228754 0.1566717383 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 5 (.70 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 22
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_6
    xpos 292
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.3495921991 0.3648652066 0.3013565492 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 6.5 (.44 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 21
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name neutral_8
    xpos 179
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.5665335579 0.5899709702 0.4828473821 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "neutral 8 (.23 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 20
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   Group {
    inputs 0
    name white_9
    xpos 70
    ypos 39
    postage_stamp true
    addUserKnob {20 sample_Tab l Sample}
    addUserKnob {19 colour_RGBA_Color_Knob l Colour}
    colour_RGBA_Color_Knob {0.8436985288 0.8806903203 0.6936778752 1}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {1 name_Text_Knob l Name}
    name_Text_Knob "white 9.5 (.05 D)"
    addUserKnob {1 index_Text_Knob l Index}
    index_Text_Knob 19
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
    addUserKnob {3 resolution}
    resolution {{parent.patch_resolution}}
   }
    Constant {
     inputs 0
     color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
     format "512 512 0 0 512 512 1 square_512"
     name Constant
     xpos 262
     ypos 53
    }
    Reformat {
     type "to box"
     box_width {{parent.resolution}}
     box_height {{parent.resolution}}
     box_fixed true
     filter impulse
     black_outside true
     name Reformat1
     xpos 262
     ypos 134
    }
    Output {
     name Output
     xpos 262
     ypos 173
    }
   end_group
   ContactSheet {
    inputs 24
    width {{"rint(parent.patch_resolution * 6 + gap * 7)"}}
    height {{"rint(parent.patch_resolution * 4 + gap * 5)"}}
    rows 4
    columns 6
    startframe 1
    endframe 1
    name ContactSheet
    xpos 620
    ypos 206
   }
   Unpremult {
    name Unpremult1
    xpos 620
    ypos 278
   }
   Output {
    name Output
    xpos 620
    ypos 446
   }
  end_group
  BlackOutside {
   name BlackOutside4
   xpos -920
   ypos -298
  }
  Position {
   translate {{parent.Reformat1.box_width*3+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
   name Position7
   xpos -920
   ypos -273
  }
  Constant {
   inputs 0
   format "256 256 0 0 256 256 1 square_256"
   name Constant5
   xpos -700
   ypos -1354
   postage_stamp false
  }
  Dot {
   name Dot25
   xpos -666
   ypos -1302
  }
set N3ddd1400 [stack 0]
  Dot {
   name Dot27
   xpos -1546
   ypos -1302
  }
  Reformat {
   type "to box"
   box_width {{parent.Reformat1.box_width}}
   box_height 100
   box_fixed true
   name ReformatBox1
   xpos -1580
   ypos -994
  }
  Ramp {
   p0 {0 0}
   p1 {{input.width} 0}
   color {{p1}}
   name Ramp3
   xpos -1580
   ypos -898
  }
  ColorLookup {
   lut {master {}
     red {curve}
     green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
     blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
     alpha {}}
   name ColorLookup7
   label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
   xpos -1580
   ypos -790
  }
  Colorspace {
   colorspace_in CIE-Yxy
   primary_in "Adobe (1998)"
   colorspace_out CIE-XYZ
   name Colorspace12
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -1580
   ypos -688
  }
  Fill {
   output alpha
   name Fill5
   xpos -1580
   ypos -639
  }
  BlackOutside {
   name BlackOutside7
   xpos -1580
   ypos -562
  }
  Position {
   translate {6 {parent.Position1.translate.y-input.height}}
   name Position3
   xpos -1580
   ypos -538
  }
  Dot {
   name Dot15
   xpos -1546
   ypos -414
  }
push $N3ddd1400
  Reformat {
   type "to box"
   box_width 2048
   box_height 2048
   box_fixed true
   name ReformatBox4
   xpos -700
   ypos -1258
  }
  Expression {
   temp_name0 n
   temp_expr0 input.width/8
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 x/width*(1-y/height)
   channel3 alpha
   expr3 1
   name Expression7
   xpos -700
   ypos -1209
  }
  Dot {
   name Dot10
   xpos -666
   ypos -1158
  }
set N3dd89800 [stack 0]
  Dot {
   name Dot26
   xpos -886
   ypos -1158
  }
set N3dd89400 [stack 0]
  Dot {
   name Dot23
   xpos -1106
   ypos -1158
  }
set N3dd89000 [stack 0]
  Dot {
   name Dot12
   xpos -1326
   ypos -1158
  }
  Mirror2 {
   flip true
   flop true
   name Mirror2_1
   xpos -1360
   ypos -1042
  }
  Reformat {
   type "to box"
   box_width 512
   box_height {{box_width}}
   box_fixed true
   name Reformat1
   xpos -1360
   ypos -994
  }
  Gamma {
   channels rgb
   value 2
   name Gamma1
   xpos -1360
   ypos -898
  }
  Multiply {
   channels rgb
   value 8000
   name Multiply1
   label "\[value value]"
   xpos -1360
   ypos -811
  }
  ColorLookup {
   lut {master {}
     red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
     green {curve R 0.6589999795 x50 0.6542205811 0.6484853029 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6457066536 0.6532088518 0.6575522423 0.6589999795}
     blue {curve R 0.3160000145 x50 0.324739933 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
     alpha {}}
   name ColorLookup5
   label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
   xpos -1360
   ypos -775
  }
  Multiply {
   channels rgb
   value {0.31 1 1 1}
   name Multiply2
   label "dim boundary"
   xpos -1360
   ypos -725
  }
  Colorspace {
   colorspace_in CIE-Yxy
   primary_in "Adobe (1998)"
   colorspace_out CIE-XYZ
   name Colorspace5
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -1360
   ypos -688
  }
  Fill {
   output alpha
   name Fill4
   xpos -1360
   ypos -639
  }
  BlackOutside {
   name BlackOutside1
   xpos -1360
   ypos -562
  }
  Position {
   translate {6 {ReformatBox4.box_width-input.width}}
   name Position1
   xpos -1360
   ypos -538
  }
  Dot {
   name Dot24
   xpos -1326
   ypos -486
  }
push $N3dd89000
  Reformat {
   type "to box"
   box_width {{parent.Reformat1.box_width}}
   box_height 100
   box_fixed true
   name ReformatBox2
   xpos -1140
   ypos -994
  }
  Expression {
   temp_name0 n
   temp_expr0 input.width/8
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 x/width*(1-y/height)
   channel3 alpha
   expr3 1
   name Expression1
   xpos -1140
   ypos -898
  }
set N3dd48c00 [stack 0]
  Dot {
   name Dot8
   xpos -996
   ypos -894
  }
  ColorLookup {
   lut {master {curve L 0 s0 t0.9499999881 C k x0.308139503 1 s0}
     red {}
     green {}
     blue {}
     alpha {}}
   name ColorLookup1
   xpos -1030
   ypos -849
  }
  Dot {
   name Dot14
   xpos -996
   ypos -750
  }
push $N3dd48c00
  Multiply {
   channels rgb
   value 269
   name Multiply5
   label "\[value value]"
   xpos -1140
   ypos -856
  }
  ColorLookup {
   lut {master {}
     red {curve C 1.8783474 1.85965741 1.8410753 1.82260251 1.80424976 1.78602886 1.76794314 1.75000143 1.73221421 1.71458244 1.69711792 1.67982578 1.66271067 1.6457777 1.62903571 1.6124835 1.59613538 1.57998943 1.56404996 1.54832447 1.5328095 1.51751649 1.50244594 1.48759735 1.47297573 1.45858264 1.44442391 1.43049574 1.41680288 1.40334678 1.39012623 1.37714779 1.36440396 1.35190022 1.33963728 1.32761216 1.31582856 1.30428183 1.29297352 1.28190565 1.27107596 1.2604804 1.25012183 1.23999798 1.23010659 1.22044563 1.21101499 1.20181489 1.19284034 1.18408906 1.17556167 1.16725397 1.15916491 1.15129638 1.14363372 1.13618886 1.12895167 1.12192106 1.11509454 1.10846853 1.10204577 1.09580922 1.08977199 1.08392429 1.07826447 1.07278681 1.06749392 1.06237841 1.05743873 1.05267084 1.04807138 1.04364109 1.03937256 1.03526449 1.03131545 1.02751946 1.02387333 1.02037668 1.01702523 1.01381445 1.01074362 1.00780725 1.00500631 1.00233305 0.99978602 0.99736285 0.9950608 0.99287677 0.99080539 0.98884678 0.98699367 0.9852494 0.98361033 0.98206747 0.98062134 0.97926998 0.97800934 0.97683728 0.97575116 0.97474778 0.97382426 0.97297859 0.97220623 0.97150886 0.97087657 0.97031689 0.96981871 0.96938527 0.96900952 0.96869147 0.96842706 0.96821606 0.96805781 0.96794283 0.96787858 0.96785843 0.96787864 0.96793604 0.96803701 0.96817231 0.96833968 0.96854311 0.96877253 0.96903455 0.96932232 0.96963543 0.96997368 0.97033387 0.97071254 0.9711163 0.97153723 0.97197378 0.97242606 0.97289121 0.97337079 0.97386622 0.97437072 0.97488332 0.97540969 0.97594237 0.97647977 0.97702706 0.97757769 0.97813445 0.97869468 0.97925854 0.97982538 0.98039114 0.98096472 0.98153675 0.98210776 0.98267955 0.98325121 0.98382008 0.98438704 0.9849571 0.98552132 0.98608243 0.98664182 0.98719966 0.98775077 0.98829895 0.98884273 0.98938417 0.98991877 0.9904511 0.99097681 0.99149919 0.99201453 0.99252397 0.99303031 0.99353105 0.99402624 0.99451613 0.99499857 0.99547589 0.99594522 0.99641174 0.99687338 0.99732745 0.99777603 0.9982177 0.99865389 0.999084 0.99950838 0.99992663 1.00033772 1.00074494 1.00114489 1.00153947 1.00192833 1.00231075 1.00268865 1.00305855 1.00342607 1.00378489 1.00413895 1.00448751 1.00483036 1.00517035 1.00550389 1.00583148 1.00615203 1.00646758 1.00678015 1.00708604 1.00738645 1.00768471 1.00797844 1.0082655 1.00854778 1.00882483 1.00909901 1.00936711 1.00963116 1.00989032 1.0101465 1.01039672 1.01064491 1.01088691 1.0111258 1.01135957 1.01158977 1.01181614 1.01203847 1.01225793 1.01247287 1.01268291 1.01289058 1.01309609 1.01329684 1.01349473 1.0136888 1.0138787 1.01406395 1.01424909 1.01442885 1.01460576 1.01478052 1.01495218 1.01512218 1.01528883 1.01545072 1.01561022 1.01576698 1.01592219 1.01607502 1.01622343 1.01636875 1.0165143 1.01665616 1.01679492 1.0169313 1.01706588 1.01719737 1.01732695 1.01745498 1.01757956 1.01770294 1.01782393 1.01794255 1.0180583 1.01817465 1.01828551 1.01839495 1.01850486 1.01861191 1.01871693 1.01882088 1.01891339}
     green {curve C 1}
     blue {curve C 0.00879261 0.00962762 0.010532 0.01151017 0.01256675 0.01370643 0.01493413 0.01625487 0.01767381 0.01919618 0.02082733 0.02257277 0.02443803 0.02642871 0.02855051 0.03080913 0.0332104 0.0357601 0.03846392 0.04132775 0.04435719 0.04755813 0.05093599 0.05449668 0.0582453 0.0621875 0.06632853 0.07067341 0.07522713 0.07999477 0.08498063 0.09018957 0.09562518 0.10129225 0.10719412 0.11333443 0.11971687 0.12634411 0.133219 0.14034435 0.14772213 0.15535444 0.16324303 0.17138906 0.179794 0.18845794 0.197382 0.20656651 0.21601067 0.22571453 0.23567709 0.24589771 0.25637382 0.26710594 0.2780903 0.28932518 0.30080822 0.3125369 0.32450783 0.33671761 0.34916404 0.36183971 0.37474373 0.38787127 0.40121818 0.41477671 0.42854655 0.44251823 0.45668846 0.47105014 0.48559928 0.50033116 0.5152359 0.5303098 0.5455451 0.56093836 0.5764783 0.59215891 0.60797763 0.62392306 0.63999057 0.65616876 0.6724565 0.68884456 0.70532417 0.72188419 0.73852479 0.7552371 0.77200818 0.78883314 0.80570388 0.82261622 0.83956301 0.8565321 0.87351894 0.89051074 0.90751225 0.92450547 0.94148719 0.95845115 0.97538745 0.99229181 1.00915313 1.02597356 1.04273522 1.05944169 1.07608175 1.09265125 1.10914159 1.12555146 1.14187002 1.15809321 1.1742171 1.190238 1.20614767 1.22194457 1.23762202 1.2531724 1.26859927 1.28389311 1.29905295 1.31407428 1.32895291 1.34368753 1.35827363 1.3727088 1.38699389 1.40111876 1.41508293 1.42889357 1.44254065 1.45602405 1.46934104 1.48249614 1.49548101 1.50830269 1.5209527 1.53343177 1.54574537 1.5578897 1.56985986 1.5816654 1.59329891 1.60476208 1.61605716 1.62718153 1.63813758 1.64892519 1.65955138 1.67000985 1.68030369 1.69043732 1.70040607 1.71021223 1.71985734 1.72934508 1.73867714 1.74785423 1.75688136 1.76575518 1.77447391 1.78304338 1.79146802 1.79975164 1.80788386 1.81587982 1.82373333 1.83144975 1.83902776 1.84647095 1.85378456 1.86096811 1.86802399 1.87495112 1.88175035 1.88842535 1.89497983 1.90141833 1.90774179 1.91394711 1.92004013 1.92602086 1.93188739 1.93765306 1.94330883 1.94886208 1.95430994 1.95965815 1.96490622 1.97005856 1.97511387 1.98007631 1.98494554 1.98972344 1.99441445 1.99901712 2.00353193 2.00796437 2.01231384 2.01658392 2.02076721 2.02487659 2.02890825 2.03286695 2.03675175 2.04056406 2.04430199 2.04797506 2.05157685 2.05511236 2.0585804 2.06198287 2.06532407 2.06860161 2.07181907 2.07497644 2.07807779 2.0811162 2.08409977 2.08702946 2.08990335 2.09272337 2.09549189 2.0982089 2.10087585 2.10349345 2.10606146 2.1085825 2.11105394 2.11348104 2.11586332 2.11820364 2.12050176 2.12275648 2.12496805 2.127141 2.12927723 2.13136625 2.13341999 2.13543844 2.13741732 2.13936305 2.1412704 2.1431427 2.14498401 2.14678812 2.14856291 2.1503005 2.15200949 2.15368938 2.15533352 2.15695238 2.15853977 2.16009951 2.16162968 2.16313291 2.16460824 2.16605687 2.16747928 2.16887903 2.17024994 2.1715951 2.17291784 2.17421341 2.17548871 2.17674041 2.17797112 2.17918396 2.18036819 2.18143296}
     alpha {}}
   name ColorLookup3
   label "Planckian Locus 0-269"
   xpos -1140
   ypos -808
  }
  Multiply {
   inputs 1+1
   channels rgb
   value 0
   maskChannelMask rgba.red
   invert_mask true
   name Multiply3
   label dim
   xpos -1140
   ypos -760
  }
  BlackOutside {
   name BlackOutside6
   xpos -1140
   ypos -706
  }
  Position {
   translate {6 {parent.Position2.translate.y-input.height}}
   name Position8
   xpos -1140
   ypos -682
  }
  Dot {
   name Dot28
   xpos -1106
   ypos -654
  }
push $N3dd89400
  Dot {
   name Dot4
   xpos -886
   ypos -1086
  }
set N3e0e2000 [stack 0]
  Rectangle {
   replace true
   area {0 0 6 {height}}
   name Rectangle1
   xpos -810
   ypos -1089
  }
  BlackOutside {
   name BlackOutside5
   xpos -810
   ypos -1041
  }
push $N3e0e2000
  Radial {
   inputs 1+1
   replace true
   area {-5422 -3542 7470 5590}
   softness 0
   ramp linear
   color {0.0719 0.02604 0.0001 1}
   p1 {0 0}
   color0 {0.039378 0.001097 0.188331 1}
   p0 {0 2048}
   name Radial1
   xpos -920
   ypos -1041
  }
  Dot {
   name Dot9
   xpos -886
   ypos -894
  }
push $N3dd89800
  Gamma {
   channels rgba
   value 0.5
   name Gamma2
   xpos -700
   ypos -1120
  }
  Expression {
   temp_name0 start
   temp_expr0 360
   temp_name1 end
   temp_expr1 830
   channel0 {rgba.red rgba.green rgba.blue none}
   expr0 r*(end-start)+start
   channel1 none
   channel2 none
   expr3 1
   name Expression2
   label "360nm to 830nm"
   xpos -700
   ypos -1096
  }
  ColorLookup {
   lut {master {}
     red {curve x360 0.0001299 C 0.00014585 0.0001638 0.000184 0.00020669 0.0002321 0.00026073 0.00029307 0.00032939 0.00036991 0.0004149 0.00046416 0.00051899 0.00058185 0.00065523 0.0007416 0.00084503 0.00096453 0.00109495 0.00123115 0.001368 0.00150205 0.00164233 0.00180238 0.00199576 0.002236 0.00253539 0.0028926 0.00330083 0.00375324 0.004243 0.00476239 0.00533005 0.00597871 0.00674112 0.00765 0.00875137 0.01002888 0.0114217 0.01286901 0.01431 0.01570443 0.01714744 0.01878122 0.02074801 0.02319 0.02620736 0.02978248 0.03388092 0.03846824 0.04351 0.0489956 0.0550226 0.0617188 0.069212 0.07763 0.08695811 0.09717672 0.1084063 0.1207672 0.13438 0.1493582 0.16539571 0.1819831 0.19861101 0.21477 0.23018681 0.24487969 0.25877729 0.27180791 0.28389999 0.29494381 0.3048965 0.31378731 0.32164541 0.3285 0.3343513 0.33921009 0.34312129 0.3461296 0.34828001 0.3495999 0.3501474 0.35001299 0.349287 0.34806001 0.34637329 0.34426239 0.3418088 0.3390941 0.3362 0.33319771 0.33004111 0.32663569 0.32288679 0.31869999 0.3140251 0.30888399 0.3032904 0.2972579 0.29080001 0.28397009 0.27672139 0.2689178 0.26042271 0.2511 0.2408475 0.2298512 0.2184072 0.2068115 0.19536 0.18421359 0.1733273 0.16268811 0.1522833 0.14210001 0.1321786 0.1225696 0.1132752 0.1042979 0.09564 0.08729955 0.07930804 0.07171776 0.06458099 0.05795001 0.05186211 0.04628152 0.04115088 0.03641283 0.03201 0.0279172 0.0241444 0.020687 0.0175404 0.0147 0.01216179 0.00991996 0.00796724 0.00629635 0.0049 0.00377717 0.00294532 0.00242488 0.00223629 0.0024 0.00292552 0.00383656 0.00517484 0.00698208 0.0093 0.01214949 0.01553588 0.01947752 0.02399277 0.0291 0.03481485 0.04112016 0.04798504 0.05537861 0.06327 0.07163501 0.08046224 0.08973996 0.09945645 0.1096 0.1201674 0.1311145 0.1423679 0.15385421 0.1655 0.17725711 0.18914001 0.2011694 0.21336579 0.2257499 0.2383209 0.2510668 0.26399219 0.2771017 0.2904 0.30389121 0.31757259 0.33143839 0.3454828 0.35969999 0.37408391 0.3886396 0.4033784 0.41831151 0.43344989 0.44879529 0.46433601 0.480064 0.49597129 0.51205009 0.52829587 0.54469162 0.56120938 0.57782149 0.59450001 0.6112209 0.62797582 0.64476019 0.66156971 0.67839998 0.69523919 0.7120586 0.72882837 0.7455188 0.76209998 0.77854317 0.79482561 0.81092638 0.82682478 0.84249997 0.85793251 0.87308162 0.88789439 0.90231812 0.9163 0.9297995 0.94279838 0.95527762 0.96721792 0.97860003 0.9893856 0.99954879 1.00908923 1.01800644 1.02629995 1.03398275 1.04098594 1.04718804 1.05246675 1.05669999 1.05979443 1.06179917 1.06280684 1.0629096 1.06219995 1.06073523 1.05844355 1.05522442 1.05097675 1.04560006 1.03903687 1.03136074 1.02266622 1.0130477 1.00259995 0.99136752 0.97933137 0.96649158 0.9528479 0.93839997 0.92319399 0.90724403 0.89050198 0.87291998 0.85444993 0.83508402 0.814946 0.794186 0.77295399 0.75139999 0.72958362 0.70758879 0.68560219 0.66381037 0.64240003 0.62151492 0.6011138 0.58110517 0.56139767 0.54189998 0.52259952 0.50354642 0.4847436 0.46619391 0.4479 0.42986131 0.41209799 0.39464399 0.37753329 0.3608 0.34445629 0.32851681 0.31301919 0.29800111 0.28349999 0.26954481 0.25611839 0.2431896 0.2307272 0.21870001 0.2070971 0.19592319 0.1851708 0.1748323 0.1649 0.1553667 0.14623 0.13749 0.1291467 0.1212 0.1136397 0.106465 0.09969044 0.09333061 0.0874 0.08190096 0.07680428 0.07207712 0.06768664 0.0636 0.05980685 0.05628216 0.05297104 0.04981861 0.04677 0.04378405 0.04087536 0.03807264 0.03540461 0.0329 0.03056419 0.02838056 0.02634484 0.02445275 0.0227 0.02108429 0.01959988 0.01823732 0.01698717 0.01584 0.01479064 0.01383132 0.01294868 0.0121292 0.01135916 0.01062935 0.00993885 0.00928842 0.00867885 0.00811092 0.00758239 0.00708875 0.00662731 0.00619541 0.00579035 0.00540983 0.00505258 0.00471751 0.00440351 0.00410946 0.00383391 0.00357575 0.00333434 0.00310907 0.00289933 0.00270435 0.00252302 0.00235417 0.00219662 0.00204919 0.00191096 0.00178144 0.00166011 0.00154646 0.00143997 0.00134004 0.00124628 0.00115847 0.00107643 0.00099995 0.00092874 0.00086243 0.00080075 0.0007434 0.00069008 0.00064052 0.0005945 0.00055186 0.00051243 0.00047602 0.00044245 0.00041151 0.00038298 0.00035665 0.0003323 0.00030976 0.00028889 0.00026954 0.00025157 0.00023483 0.00021917 0.00020453 0.00019084 0.00017807 0.00016615 0.00015502 0.00014462 0.00013491 0.00012585 0.00011741 0.00010955 0.00010222 9.539e-05 8.902e-05 8.308e-05 7.751e-05 7.231e-05 6.746e-05 6.293e-05 5.871e-05 5.477e-05 5.11e-05 4.768e-05 4.449e-05 4.151e-05 3.873e-05 3.614e-05 3.372e-05 3.146e-05 2.935e-05 2.738e-05 2.552e-05 2.379e-05 2.218e-05 2.067e-05 1.927e-05 1.797e-05 1.675e-05 1.562e-05 1.456e-05 1.357e-05 1.265e-05 1.18e-05 1.1e-05 1.025e-05 9.56e-06 8.91e-06 8.31e-06 7.75e-06 7.22e-06 6.73e-06 6.28e-06 5.85e-06 5.46e-06 5.09e-06 4.74e-06 4.42e-06 4.12e-06 3.84e-06 3.58e-06 3.34e-06 3.11e-06 2.9e-06 2.71e-06 2.52e-06 2.35e-06 2.19e-06 2.04e-06 1.91e-06 1.78e-06 1.66e-06 1.54e-06 1.44e-06 1.34e-06 S 1.25e-06}
     green {curve x360 3.92e-06 C 4.39e-06 4.93e-06 5.53e-06 6.21e-06 6.97e-06 7.81e-06 8.77e-06 9.84e-06 1.104e-05 1.239e-05 1.389e-05 1.556e-05 1.744e-05 1.958e-05 2.202e-05 2.484e-05 2.804e-05 3.153e-05 3.522e-05 3.9e-05 4.283e-05 4.691e-05 5.159e-05 5.718e-05 6.4e-05 7.234e-05 8.221e-05 9.351e-05 0.00010614 0.00012 0.00013498 0.00015149 0.00017021 0.00019182 0.000217 0.00024691 0.00028124 0.00031852 0.00035727 0.000396 0.00043371 0.00047302 0.00051788 0.00057222 0.00064 0.00072456 0.0008255 0.00094116 0.00106988 0.00121 0.00136209 0.00153075 0.00172037 0.00193532 0.00218 0.0024548 0.002764 0.0031178 0.0035264 0.004 0.00454624 0.00515932 0.00582928 0.00654616 0.0073 0.00808651 0.00890872 0.00976768 0.01066443 0.0116 0.01257317 0.01358272 0.01462968 0.01571509 0.01684 0.01800736 0.01921448 0.02045392 0.02171824 0.023 0.02429461 0.02561024 0.02695857 0.02835125 0.0298 0.03131083 0.03288368 0.03452112 0.03622571 0.038 0.03984667 0.041768 0.043766 0.04584267 0.048 0.05024368 0.05257304 0.05498056 0.05745872 0.06 0.06260197 0.06527752 0.06804208 0.07091109 0.0739 0.077016 0.0802664 0.0836668 0.0872328 0.09098 0.09491755 0.09904584 0.1033674 0.1078846 0.1126 0.117532 0.1226744 0.12799279 0.1334528 0.13902 0.1446764 0.1504693 0.15646189 0.1627177 0.1693 0.1762431 0.18355811 0.1912735 0.19941799 0.20802 0.2171199 0.2267345 0.2368571 0.2474812 0.2586 0.2701849 0.28229389 0.2950505 0.30857801 0.32300001 0.33840209 0.35468581 0.37169859 0.3892875 0.4073 0.42562991 0.44430959 0.4633944 0.48293951 0.50300002 0.52356929 0.54451197 0.56568998 0.58696532 0.60820001 0.6293456 0.65030682 0.67087519 0.69084239 0.70999998 0.72818518 0.74546361 0.76196939 0.7778368 0.79320002 0.80811042 0.82249618 0.83630681 0.8494916 0.86199999 0.87381083 0.88496238 0.89549363 0.90544319 0.91485012 0.92373478 0.93209243 0.93992257 0.94722521 0.954 0.9602561 0.96600741 0.97126061 0.97602248 0.98030001 0.98409241 0.98741817 0.99031281 0.99281162 0.99495012 0.99671078 0.99809831 0.99911201 0.99974817 1 0.99985671 0.99930459 0.99832553 0.99689871 0.995 0.9926005 0.98974258 0.98644441 0.98272407 0.97860003 0.97408372 0.96917123 0.96385682 0.95813489 0.95200002 0.94545043 0.93849921 0.93116277 0.92345762 0.91540003 0.90700638 0.89827722 0.8892048 0.8797816 0.87 0.85986131 0.849392 0.83862197 0.82758129 0.81629997 0.80479473 0.793082 0.781192 0.76915473 0.75700003 0.74475408 0.73242241 0.7200036 0.70749652 0.69489998 0.68221921 0.66947162 0.65667439 0.64384478 0.63099998 0.61815548 0.60531437 0.59247559 0.57963789 0.5668 0.5539611 0.54113722 0.5283528 0.51563227 0.50300002 0.4904688 0.47803041 0.46567759 0.4534032 0.44119999 0.42908001 0.417036 0.40503201 0.39303201 0.38100001 0.36891839 0.3568272 0.34477681 0.33281761 0.32100001 0.30933809 0.2978504 0.28659359 0.27562451 0.26499999 0.25476319 0.2448896 0.2353344 0.22605281 0.21699999 0.20816161 0.1995488 0.1911552 0.1829744 0.175 0.1672235 0.15964641 0.1522776 0.1451259 0.1382 0.1315003 0.1250248 0.1187792 0.1127691 0.107 0.1014762 0.09618864 0.09112296 0.08626485 0.0816 0.07712064 0.07282552 0.06871008 0.06476976 0.061 0.05739621 0.05395504 0.05067376 0.04754965 0.04458 0.04175872 0.03908496 0.03656384 0.03420048 0.032 0.02996261 0.02807664 0.02632936 0.02470805 0.0232 0.02180077 0.02050112 0.01928108 0.01812069 0.017 0.01590379 0.01483718 0.01381068 0.01283478 0.01192 0.01106831 0.01027339 0.00953331 0.00884616 0.00821 0.00762378 0.00708542 0.00659148 0.00613848 0.005723 0.00534306 0.0049958 0.0046764 0.00438007 0.004102 0.00383845 0.0035891 0.00335422 0.00313409 0.002929 0.00273814 0.00255988 0.00239324 0.00223728 0.002091 0.00195359 0.00182458 0.00170358 0.00159019 0.001484 0.0013845 0.00129127 0.00120409 0.00112274 0.001047 0.00097659 0.00091111 0.00085013 0.00079324 0.00074 0.00069008 0.00064331 0.0005995 0.00055845 0.00052 0.00048391 0.00045005 0.00041835 0.00038872 0.0003611 0.00033538 0.00031144 0.00028917 0.00026845 0.0002492 0.0002313 0.00021469 0.00019929 0.00018505 0.0001719 0.00015978 0.0001486 0.0001383 0.00012879 0.00012 0.00011186 0.00010432 9.734e-05 9.085e-05 8.48e-05 7.915e-05 7.386e-05 6.892e-05 6.43e-05 6e-05 5.598e-05 5.223e-05 4.872e-05 4.545e-05 4.24e-05 3.956e-05 3.692e-05 3.445e-05 3.215e-05 3e-05 2.799e-05 2.611e-05 2.436e-05 2.272e-05 2.12e-05 1.978e-05 1.845e-05 1.722e-05 1.606e-05 1.499e-05 1.399e-05 1.305e-05 1.218e-05 1.136e-05 1.06e-05 9.89e-06 9.22e-06 8.59e-06 8.01e-06 7.47e-06 6.96e-06 6.49e-06 6.05e-06 5.64e-06 5.26e-06 4.9e-06 4.57e-06 4.26e-06 3.97e-06 3.7e-06 3.45e-06 3.22e-06 3e-06 2.8e-06 2.61e-06 2.43e-06 2.27e-06 2.11e-06 1.97e-06 1.84e-06 1.71e-06 1.6e-06 1.49e-06 1.39e-06 1.29e-06 1.21e-06 1.12e-06 1.05e-06 9.8e-07 9.1e-07 8.5e-07 7.9e-07 7.4e-07 6.9e-07 6.4e-07 6e-07 5.6e-07 5.2e-07 4.8e-07 S 4.5e-07}
     blue {curve x360 0.0006061 C 0.00068088 0.00076515 0.00086001 0.00096659 0.001086 0.00122059 0.00137273 0.00154358 0.00173429 0.001946 0.00217778 0.00243581 0.00273195 0.00307806 0.003486 0.00397523 0.00454088 0.00515832 0.00580291 0.00645 0.00708322 0.00774549 0.00850115 0.00941454 0.01054999 0.0119658 0.01365587 0.01558805 0.01773015 0.02005001 0.02251136 0.02520288 0.02827972 0.03189704 0.03621 0.04143771 0.04750372 0.05411988 0.06099803 0.06785001 0.07448632 0.08136156 0.08915364 0.09854048 0.1102 0.1246133 0.1417017 0.16130351 0.1832568 0.20739999 0.23369209 0.26261139 0.29477459 0.33079851 0.37130001 0.4162091 0.4654642 0.51969481 0.5795303 0.64560002 0.71848381 0.79671329 0.87784588 0.95943898 1.0390501 1.11536729 1.18849707 1.25812328 1.32392955 1.38559997 1.44263518 1.49480355 1.54219031 1.58488071 1.62295997 1.65640485 1.68529594 1.70987451 1.73038209 1.74705994 1.76004458 1.76962328 1.77626371 1.78043342 1.78260004 1.78296816 1.78169978 1.77919817 1.7758671 1.77210998 1.76825893 1.76403904 1.7589438 1.75246632 1.74409997 1.73355949 1.7208581 1.70593691 1.68873715 1.66919994 1.64752865 1.62341273 1.59602225 1.56452799 1.52810001 1.4861114 1.43952155 1.38987994 1.33873618 1.28763998 1.23742235 1.18782425 1.13876104 1.09014797 1.04190004 0.99419761 0.94734728 0.90145308 0.8566193 0.81295007 0.77051729 0.7294448 0.68991357 0.65210491 0.61619997 0.58232862 0.55041617 0.52033758 0.49196729 0.46518001 0.4399246 0.41618359 0.39388219 0.3729459 0.35330001 0.33485779 0.31755209 0.30133751 0.28616861 0.27200001 0.25881711 0.2464838 0.2347718 0.2234533 0.2123 0.20116919 0.19011959 0.1792254 0.1685608 0.1582 0.1481383 0.1383758 0.1289942 0.1200751 0.1117 0.1039048 0.09666748 0.08998272 0.08384531 0.07824999 0.07320899 0.06867816 0.06456784 0.06078835 0.05725001 0.05390435 0.05074664 0.04775276 0.04489859 0.04216 0.03950728 0.03693564 0.03445836 0.03208872 0.02984 0.02771181 0.02569444 0.02378716 0.02198925 0.0203 0.01871805 0.01724036 0.01586364 0.01458461 0.0134 0.01230723 0.01130188 0.01037792 0.00952931 0.00875 0.0080352 0.0073816 0.0067854 0.0062428 0.00575 0.0053036 0.0048998 0.0045342 0.0042024 0.0039 0.0036232 0.0033706 0.0031414 0.0029348 0.00275 0.0025852 0.0024386 0.0023094 0.0021968 0.0021 0.00201773 0.0019482 0.0018898 0.00184093 0.0018 0.00176627 0.0017378 0.0017112 0.00168307 0.00165 0.00161013 0.0015644 0.0015136 0.00145853 0.0014 0.00133667 0.00127 0.001205 0.00114667 0.0011 0.0010688 0.0010494 0.0010356 0.0010212 0.001 0.00096864 0.00092992 0.00088688 0.00084256 0.0008 0.00076096 0.00072368 0.00068592 0.00064544 0.0006 0.00054787 0.0004916 0.0004354 0.00038347 0.00034 0.00030725 0.00028316 0.00026544 0.00025181 0.00024 0.00022955 0.00022064 0.00021196 0.00020219 0.00019 0.00017421 0.00015564 0.00013596 0.00011685 0.0001 8.613e-05 7.46e-05 6.5e-05 5.693e-05 5e-05 4.416e-05 3.948e-05 3.572e-05 3.264e-05 3e-05 2.765e-05 2.556e-05 2.364e-05 2.181e-05 2e-05 1.813e-05 1.62e-05 1.42e-05 1.213e-05 1e-05 7.73e-06 5.4e-06 3.2e-06 1.33e-06 0 0 0 0 0 0 0 0 S 0}
     alpha {}}
   name ColorLookup4
   label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
   xpos -700
   ypos -1030
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeLineOfPurples
   xpos -700
   ypos -897
   disable {{!parent.draw_line_of_purples}}
  }
  Fill {
   color {0 0 0 1}
   name Disable_SpectralLocus
   xpos -700
   ypos -826
   disable {{parent.draw_spectral_locus}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePlanckianLocus
   xpos -700
   ypos -658
   disable {{!parent.draw_planckian_locus}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePointerGamut
   xpos -700
   ypos -489
   disable {{!parent.draw_pointers_gamut}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergePointerGamut_Samples
   xpos -700
   ypos -417
   disable {{!draw_pointers_samples}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeMacbeth
   xpos -700
   ypos -273
   disable {{!parent.draw_macbeth_chart}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutGrid
   xpos -700
   ypos -81
   disable {{!parent.gamut_grid}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutA
   xpos -700
   ypos 255
   disable {{!parent.gamut_a}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutB
   xpos -700
   ypos 279
   disable {{!parent.gamut_b}}
  }
  Merge2 {
   inputs 2
   bbox B
   name MergeGamutC
   xpos -700
   ypos 303
   disable {{!parent.gamut_c}}
  }
  Dot {
   name Dot2
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -666
   ypos 450
  }
set N3e07d400 [stack 0]
  Dot {
   name Dot5
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 450
  }
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace6
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -590
   ypos 488
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression5
   label "CIE Yxy to CIELuv"
   xpos -590
   ypos 536
   disable {{!parent.diagram}}
  }
  Dot {
   name Dot11
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 618
  }
push $N3e07d400
  ColorMatrix {
   matrix {
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix1
   label "XYZ to working"
   xpos -700
   ypos 488
   disable {{!map_overlays_to_input_gamut}}
  }
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity_grid\" iterate pixelWise b2e7b5f8a89bdb0629aa8cc2eae387ef3436f24cb0af642eeba41235874506c4 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 6 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== \"draw_axes\" Bool 1 AA== \"grid_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== 6 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 \"draw_axes\" 1 1 \"grid_color\" 4 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity_grid : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n  bool draw_axes;\n  float4 grid_color;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  void draw_grid() \{\n    // grid width in pixels. expresses a 0 to 1 range in CIE xy\n    float grid_width = 1.0f * outsize + offset;\n    // draw grid lines\n    float i = offset;\n    while (i <= grid_width && i > 0.0f) \{\n      write_aa(offset, i, grid_color);\n      write_aa(i, offset, grid_color);\n      i += 1.0;\n    \}\n    // cross-hatching interval in pixels\n    float hatch_interval = (grid_width - offset) * 0.1f;\n    // cross-hatch length in pixels\n    float hatch_width = outsize * 0.01f;\n    i = offset;\n    while (i <= grid_width) \{\n      i += hatch_interval;\n      float j = 0.0;\n      while (j <= hatch_width/2) \{\n        write_aa(offset+j, i, grid_color);\n        write_aa(offset-j, i, grid_color);\n        write_aa(i, offset+j, grid_color);\n        write_aa(i, offset-j, grid_color);\n        j += 1.0;\n      \}\n    \}\n  \}\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n\n    // draw CIExy coordinate system axes\n    if (draw_axes && pos.x == 0 && pos.y == 0) \{\n      draw_grid();\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_grid_padding {{parent.PlotChromaticities.PlotChromaticity_padding}}
   PlotChromaticity_grid_left_margin {{parent.PlotChromaticities.PlotChromaticity_left_margin}}
   PlotChromaticity_grid_tolerance 0.8
   PlotChromaticity_grid_antialias true
   PlotChromaticity_grid_draw_axes {{parent.coordinate_system}}
   PlotChromaticity_grid_grid_color {0.15 0 0.005 1}
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotInput2
   xpos -700
   ypos 608
  }
  FrameHold {
   firstFrame 1
   name FrameHold1
   xpos -700
   ypos 680
   cached true
  }
  Dot {
   name Dot3
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -666
   ypos 762
  }
  Input {
   inputs 0
   name Input
   xpos 620
   ypos -1426
  }
  AddChannels {
   name AddChannels1
   xpos 620
   ypos -1360
  }
  Reformat {
   type "to box"
   box_width {{parent.resolution}}
   box_height {{box_width}}
   box_fixed true
   box_pixel_aspect {{input.pixel_aspect}}
   resize distort
   filter impulse
   name OutputFormat
   xpos 620
   ypos -1282
   disable {{!parent.resample_input}}
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name CropBBox
   xpos 620
   ypos -1257
  }
  Dot {
   name Dot7
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 654
   ypos 162
  }
set N3e009c00 [stack 0]
  Constant {
   inputs 0
   channels rgb
   color {0 0 0 1}
   format "256 256 0 0 256 256 1 square_256"
   name Constant2
   xpos 400
   ypos 38
   postage_stamp false
  }
  Reformat {
   type "to box"
   box_width {{parent.resolution}}
   box_height {{box_width}}
   box_fixed true
   box_pixel_aspect {{input.pixel_aspect}}
   resize distort
   filter impulse
   name OutputFormat1
   xpos 400
   ypos 64
   disable {{!parent.resample_input}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0]"}}
   name Switch1
   xpos 400
   ypos 158
  }
  Fill {
   output rgb
   color 0.18
   name SampleColor
   xpos 290
   ypos 158
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop2
   xpos 290
   ypos 184
  }
  Fill {
   output alpha
   name Fill3
   xpos 290
   ypos 224
  }
  Dot {
   name Dot6
   xpos 324
   ypos 282
  }
set N3dfafc00 [stack 0]
  ColorMatrix {
   matrix {
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
       {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
     }
   name ColorMatrix4
   label "working to XYZ"
   xpos 180
   ypos 272
  }
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace1
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos 180
   ypos 320
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression6
   label "CIE Yxy to CIELuv"
   xpos 180
   ypos 368
   disable {{!parent.diagram}}
  }
push $N3dfafc00
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity_sample\" iterate pixelWise 20e14b615a937bac78c1a771cbdfd10cc7c5fb6c487f65d0bb2d6633e404b958 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 3 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== 3 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity_sample : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  void process(int2 pos) \{\n    // only process the first pixel\n    if (pos.x > 0 && pos.y > 0) return;\n\n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    int2 p = int2(round(out_coord.x), round(out_coord.y));\n    if (dst.bounds.inside(p.x, p.y)) \{\n      for (int k=0; k<3; k++) \{\n        dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n      \}\n      dst(p.x, p.y, 3) = 1.0f;\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_sample_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
   PlotChromaticity_sample_left_margin {{parent.left_margin}}
   PlotChromaticity_sample_tolerance 1
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotChromaticities1
   xpos 290
   ypos 368
  }
  Dot {
   name Dot22
   xpos 324
   ypos 450
  }
set N3dfae800 [stack 0]
  Dilate {
   channels rgba
   size {{Output.width/2048}}
   name Dilate1
   label "\[value size]"
   xpos 290
   ypos 488
  }
set N3dfae400 [stack 0]
  Dilate {
   channels rgba
   size {{Output.width/2048*2}}
   name Dilate2
   label "\[value size]"
   xpos 180
   ypos 488
  }
push $N3dfae800
  Dot {
   name Dot21
   xpos -6
   ypos 450
  }
  FilterErode {
   channels rgba
   size {{-Output.width/2048/5}}
   filter triangle
   name FilterErode1
   label "\[value size]"
   xpos -40
   ypos 489
  }
set N3dfad800 [stack 0]
  Dilate {
   channels rgba
   size {0 {parent.Dilate3.size.w}}
   name Dilate4
   label "\[value size]"
   xpos -40
   ypos 584
  }
push $N3dfad800
  Dilate {
   channels rgba
   size {{Output.width*plus_size/100} 0}
   name Dilate3
   label "\[value size]"
   xpos 70
   ypos 488
   addUserKnob {20 User}
   addUserKnob {7 plus_size R 0 4}
   plus_size 0.8
  }
  Merge2 {
   inputs 2
   operation screen
   bbox B
   name Merge9
   xpos 70
   ypos 591
  }
  Merge2 {
   inputs 2
   operation stencil
   bbox B
   name Merge10
   xpos 180
   ypos 591
  }
  Group {
   name HueRotate
   xpos 180
   ypos 639
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -24
   }
   Unpremult {
    name Unpremult1
    xpos -40
    ypos 15
   }
   Colorspace {
    colorspace_out HSV
    name Colorspace1
    xpos -40
    ypos 72
   }
   Add {
    channels {rgba.red -rgba.green -rgba.blue none}
    value 0.5
    name Add1
    xpos -40
    ypos 111
   }
   Fill {
    output {-rgba.red -rgba.green rgba.blue none}
    name Fill1
    xpos -40
    ypos 147
   }
   Colorspace {
    colorspace_in HSV
    name Colorspace2
    xpos -40
    ypos 183
   }
   Premult {
    name Premult1
    xpos -40
    ypos 231
   }
   Output {
    name Output1
    xpos -40
    ypos 302
   }
  end_group
push $N3dfae400
  Merge2 {
   inputs 2
   bbox B
   name Merge8
   xpos 290
   ypos 638
  }
  Dot {
   name Dot20
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 324
   ypos 690
  }
push $N3e009c00
  Dot {
   name Dot1
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 764
   ypos 162
  }
  Group {
   name GamutToXYZ
   label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
   xpos 730
   ypos 247
   addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
   addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
   addUserKnob {6 invert +STARTLINE}
   addUserKnob {26 ""}
   addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
   addUserKnob {41 rxy T ColorMatrix.rxy}
   addUserKnob {41 gxy T ColorMatrix.gxy}
   addUserKnob {41 bxy T ColorMatrix.bxy}
   addUserKnob {41 wxy T ColorMatrix.wxy}
   addUserKnob {41 matrix T ColorMatrix.matrix}
  }
   Input {
    inputs 0
    name Input
    xpos -40
    ypos -10
   }
   ColorMatrix {
    matrix {
        {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
        {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
        {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
      }
    invert {{parent.invert}}
    name ColorMatrix
    label "RGB to XYZ"
    xpos -40
    ypos 32
    addUserKnob {20 Gamut}
    addUserKnob {3 which}
    which {{parent.gamut}}
    addUserKnob {12 rxy}
    rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
    addUserKnob {12 gxy}
    gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
    addUserKnob {12 bxy}
    bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
    addUserKnob {12 wxy}
    wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
   }
   Output {
    name Output
    xpos -40
    ypos 86
   }
  end_group
  Colorspace {
   colorspace_in CIE-XYZ
   primary_in "Adobe (1998)"
   colorspace_out CIE-Yxy
   name Colorspace2
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos 730
   ypos 296
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression4
   label "CIE Yxy to CIELuv"
   xpos 730
   ypos 344
   disable {{!parent.diagram}}
  }
  Dot {
   name Dot13
   label " Pos"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 764
   ypos 546
  }
push $N3e009c00
  Dot {
   name Dot16
   label " Col"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos 654
   ypos 450
  }
  BlinkScript {
   inputs 2
   KernelDescription "2 \"PlotChromaticity\" iterate pixelWise 3e86399c7642fe5c35c23528a644f88a8bf13f967de084ae6842f8be55098c6b 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 4 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== 4 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
   kernelSource "kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n  \}\n\};"
   useGPUIfAvailable {{parent.use_gpu}}
   rebuild ""
   PlotChromaticity_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
   PlotChromaticity_left_margin {{parent.left_margin}}
   PlotChromaticity_tolerance 2
   PlotChromaticity_antialias true
   format "2048 2048 0 0 2048 2048 1 square_2K"
   rebuild_finalise ""
   name PlotChromaticities
   xpos 620
   ypos 536
   disable {{!parent.plot_input}}
  }
  Fill {
   color 0
   name BLACK
   tile_color 0x111111ff
   xpos 620
   ypos 591
   disable {{parent.plot_input}}
  }
  Merge2 {
   inputs 2
   bbox B
   name Merge7
   xpos 620
   ypos 686
   disable {{!parent.enable_sample_color}}
  }
  Merge2 {
   inputs 2
   name Merge1
   xpos 620
   ypos 758
  }
  Output {
   name Output
   xpos 620
   ypos 1046
  }
 end_group
 Viewer {
  inputs 2
  frame_range 1-77
  gl_buffer_depth half-float
  name Viewer1
  xpos -1063
  ypos -86
 }
end_group
Colorspace {
 inputs 0
 colorspace_in CIE-XYZ
 illuminant_in ACES
 primary_in ACES
 colorspace_out CIE-XYZ
 bradford_matrix true
 name Colorspace7
 xpos 939
 ypos -43
}
push $Nc5b84400
OCIOColorSpace {
 in_colorspace "ACES - ACES2065-1"
 out_colorspace scene_linear
 name OCIOColorSpace3
 xpos 634
 ypos -299
}
push $N3b423000
Group {
 name PlotChromaticity2
 xpos 82
 ypos 20
 addUserKnob {20 PlotChromaticity_tab l PlotChromaticity}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
 addUserKnob {26 ""}
 addUserKnob {6 plot_input l "plot input" t "Enable plotting of the input pixels" +STARTLINE}
 plot_input true
 addUserKnob {41 input_gamut l gamut t "Set the gamut that the input colors are encoded in" -STARTLINE T GamutToXYZ.gamut}
 addUserKnob {4 diagram l in t "Choose the type of chromaticity diagram: \nCIE 1931 xy Chromaticity Diagram\nCIE 1976 u' v' Uniform Chromaticity Scale Diagram" -STARTLINE M {"CIE 1931 xy" "CIE 1976 u' v'" "" ""}}
 addUserKnob {6 enable_sample_color l "sample color" t "Enable plotting of the sampled color" +STARTLINE}
 enable_sample_color true
 addUserKnob {41 sample_color l color t "sample and plot selected color" T SampleColor.color}
 addUserKnob {22 follow_viewer l "follow viewer" t "Follow the selected viewer node. This causes this node to automatically connect to whatever the followed viewer is connected to.\n\nThis is useful if you want to have a 2nd viewer showing a chromaticity plot for whever you're looking at in your main viewer." T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to follow.')\nelse:\n    v\['knobChanged'].setValue('v = nuke.activeViewer().node()\\nif v and v.name() == nuke.thisNode().name():\\n    con = v.input(nuke.activeViewer().activeInput())\\n    plt = nuke.toNode(\"\{0\}\")\\n    plt.setInput(0, con)'.format(n.name()))" +STARTLINE}
 addUserKnob {22 unfollow_viewer l "unfollow viewer" -STARTLINE T "n = nuke.thisNode()\nnuke.root().begin()\nv = nuke.selectedNode()\nif not v or v.Class() != 'Viewer':\n    nuke.message('Please select a viewer node to unfollow.')\nelse:\n    v\['knobChanged'].setValue('')"}
 addUserKnob {26 plot_dimensions_label l " " T "<b>Chromaticity Diagram"}
 addUserKnob {3 resolution l " resolution" t "resolution to output"}
 resolution 2048
 addUserKnob {7 right_margin l "right margin" R 1 1.5}
 right_margin 1.1
 addUserKnob {7 left_margin l "left margin" R 0 0.2}
 left_margin 0.1
 addUserKnob {6 draw_spectral_locus l "spectrum locus" t "draw the spectrum locus: the boundary of color the human eye can see." +STARTLINE}
 draw_spectral_locus true
 addUserKnob {6 draw_line_of_purples l "line of purples" t "draw the \"line of purples\"" -STARTLINE}
 draw_line_of_purples true
 addUserKnob {6 draw_planckian_locus l "planckian locus" t "Display the planckian locus or the blackbody locus." +STARTLINE}
 draw_planckian_locus true
 addUserKnob {6 gamut_grid l "gamut grid" t "Display a gamut boundary with a grid or dot pattern" +STARTLINE}
 addUserKnob {41 gamut_gamutgrid l "" t "gamut for gamutgrid" -STARTLINE T RGBToXYZ_GamutGrid.gamut}
 addUserKnob {4 gamut_grid_style l style t "Choose the style to display the gamut plot" -STARTLINE M {grid dots "" "" "" ""}}
 addUserKnob {4 distribution l dist t "Which chromaticity space should the overlays be constructed in? \n\nYxy is familiar, but not very perceptually uniform.\n\nu'v' is designed to be more perceptually uniform." -STARTLINE M {"1931 Yxy" "1976 u'v'" "" ""}}
 addUserKnob {7 density t "Density of the grid or points" R 10 100}
 density 50
 addUserKnob {6 gamut_a l "gamut a" t "Display a gamut outline" +STARTLINE}
 addUserKnob {41 gamut_a_1 l "" -STARTLINE T RGBToXYZ_GamutA.gamut}
 addUserKnob {6 gamut_b l "gamut b" t "Display a gamut outline" +STARTLINE}
 gamut_b true
 addUserKnob {41 gamut_b_1 l "" -STARTLINE T RGBToXYZ_GamutB.gamut}
 addUserKnob {6 gamut_c l "gamut c" t "Display a gamut outline" +STARTLINE}
 gamut_c true
 addUserKnob {41 gamut_c_1 l "" -STARTLINE T RGBToXYZ_GamutC.gamut}
 addUserKnob {6 draw_pointers_gamut l "pointer's gamut" t "DrawPointer's gamut boundary" +STARTLINE}
 addUserKnob {6 draw_pointers_samples l "pointers sample colors" t "show the individual pointer gamut samples" -STARTLINE}
 addUserKnob {6 draw_macbeth_chart l "macbeth chart" t "draw a ColorChecker24 aka Macbeth Chart" +STARTLINE}
 addUserKnob {6 coordinate_system l "coordinate system" t "Draw CIE xy coordinate grid x and y axes" +STARTLINE}
 coordinate_system true
 addUserKnob {6 map_overlays_to_input_gamut l "map overlays to input gamut" t "This maps the overlays like the spectral locus, pointer's gamut, and the gamut overlay to the working gamut instead of keeping them as XYZ.\n\nFor example if the input gamut is ACEScg, these overlays will be mapped to that. Note that this can cause most of the overlays to be negative or highly saturated which might harm the visual appearance." +STARTLINE}
 map_overlays_to_input_gamut true
}
 Group {
  inputs 0
  name GamutGrid1
  xpos -920
  ypos -201
  postage_stamp true
  addUserKnob {20 GamutGrid}
  addUserKnob {3 style}
  style {{!parent.gamut_grid_style}}
  addUserKnob {3 distribution -STARTLINE}
  distribution {{parent.distribution}}
  addUserKnob {7 density R 10 150}
  density {{parent.density}}
  addUserKnob {26 ""}
  addUserKnob {41 matrix T ColorMatrix.matrix}
  addUserKnob {12 wxy}
  wxy {{parent.RGBToXYZ_GamutGrid.wxy} {parent.RGBToXYZ_GamutGrid.wxy}}
 }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   centerSaturation 1
   fillFormat false
   area {-170 -158 682 670}
   name ColorWheel4
   xpos -260
   ypos -15
   postage_stamp false
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop2
   xpos -260
   ypos 27
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat3
   xpos -260
   ypos 110
  }
set N3c5cd400 [stack 0]
push $N3c5cd400
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   roworder TopBottom
   name ContactSheet2
   xpos -260
   ypos 169
  }
  Dot {
   name Dot1
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -226
   ypos 246
  }
  ColorWheel {
   inputs 0
   format "512 512 0 0 512 512 1 square_512"
   fillFormat false
   area {40 40 472 472}
   name ColorWheel1
   xpos -40
   ypos -664
   postage_stamp false
  }
  Reformat {
   type scale
   scale {{max(parent.density/50,0.25)}}
   resize distort
   filter impulse
   pbb true
   name Reformat1
   xpos -40
   ypos -628
  }
  Crop {
   box {0 0 {width} {height}}
   reformat true
   name Crop1
   xpos -40
   ypos -602
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos -526
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos -415
  }
  Colorspace {
   colorspace_in CIE-XYZ
   colorspace_out CIE-Yxy
   name Colorspace1
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -341
  }
set N3d1d2800 [stack 0]
  Dot {
   name Dot2
   label " "
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos -331
  }
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression5
   label "CIE Yxy to CIELuv"
   xpos -590
   ypos -304
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 "(-(degrees(atan2(g-white.x, b-white.y))-180)+270)%360/360"
   expr2 "hypot(g-white.x, b-white.y)"
   expr3 a
   name Expression3
   xpos -590
   ypos -261
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{"parent.distribution ? 4*parent.wxy.x / ( -2 * parent.wxy.x + 12 * parent.wxy.y + 3) : parent.wxy"} {"parent.distribution ? 9*parent.wxy.y / ( -2*parent.wxy.x + 12*parent.wxy.y + 3) : parent.wxy"}}
  }
set N3d1d1c00 [stack 0]
  Posterize {
   channels rgb
   Colors {{rint(parent.density/3*2)}}
   name Posterize1
   xpos -590
   ypos -191
  }
set N3d1d1800 [stack 0]
push $N3d1d1c00
  Dot {
   name Dot15
   xpos -446
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.blue
   to0 rgba.blue
   name Copy1
   xpos -480
   ypos -154
  }
push $N3d1d1800
push $N3d1d1c00
  Dot {
   name Dot16
   xpos -666
   ypos -257
  }
  Copy {
   inputs 2
   from0 rgba.green
   to0 rgba.green
   name Copy2
   xpos -700
   ypos -153
  }
  ContactSheet {
   inputs 2
   width {{width*columns}}
   height {{height/pixel_aspect*rows}}
   rows 1
   columns 2
   center true
   roworder TopBottom
   name ContactSheet3
   xpos -590
   ypos -106
  }
  Expression {
   expr0 r
   expr1 cos(radians(g*360))*b+white.x
   expr2 sin(radians(g*360))*b+white.y
   expr3 a
   name Expression19
   xpos -590
   ypos -58
   cached true
   addUserKnob {20 User}
   addUserKnob {12 white}
   white {{parent.Expression3.white} {parent.Expression3.white}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression2
   label "CIELuv to CIE Yxy"
   xpos -590
   ypos -16
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace2
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -590
   ypos 32
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix1
   label "XYZ to RGB"
   xpos -590
   ypos 81
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin2
   xpos -590
   ypos 119
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp1
   xpos -590
   ypos 152
  }
  Premult {
   name Premult1
   xpos -590
   ypos 194
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge2
   xpos -590
   ypos 242
  }
  Fill {
   output alpha
   name Fill1
   xpos -590
   ypos 297
  }
  Dot {
   name Dot3
   label " GRID"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -556
   ypos 378
  }
push $N3c5cd400
push $N3d1d2800
  Expression {
   expr0 r
   expr1 "4*g / ( -2*g + 12*b + 3)"
   expr2 "9*b / ( -2*g + 12*b + 3)"
   name Expression4
   label "CIE Yxy to CIELuv"
   xpos -40
   ypos -280
   disable {{!parent.distribution}}
  }
  Expression {
   expr0 r
   expr1 rint(g*Colors)/Colors
   expr2 rint(b*Colors)/Colors
   expr3 a
   name Expression1
   label rint
   xpos -40
   ypos -232
   addUserKnob {20 User}
   addUserKnob {7 Colors R 1 256}
   Colors {{parent.density}}
  }
  Expression {
   expr0 r
   expr1 "9*g / ( 6*g - 16*b + 12)"
   expr2 "4*b/ ( 6*g - 16*b + 12)"
   name Expression6
   label "CIELuv to CIE Yxy"
   xpos -40
   ypos -184
   disable {{!parent.distribution}}
  }
  Colorspace {
   colorspace_in CIE-Yxy
   colorspace_out CIE-XYZ
   name Colorspace3
   label "\[value colorspace_in] -> \[value colorspace_out]"
   xpos -40
   ypos -112
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   invert true
   name ColorMatrix3
   label "XYZ to RGB"
   xpos -40
   ypos -57
  }
  Clamp {
   channels alpha
   minimum 1
   MinClampTo_enable true
   MaxClampTo_enable true
   name Clamp4
   xpos -40
  }
  Premult {
   name Premult2
   xpos -40
   ypos 55
  }
  Merge2 {
   inputs 2
   operation under
   bbox B
   name Merge1
   xpos -40
   ypos 110
  }
  Clamp {
   channels rgba
   maximum_enable false
   name ClampMin1
   xpos -40
   ypos 273
  }
  Dot {
   name Dot4
   label " DOTS"
   note_font "Helvetica Bold"
   note_font_size 24
   note_font_color 0xa5a5a501
   xpos -6
   ypos 378
  }
  Switch {
   inputs 2
   which {{parent.style}}
   name Switch1
   xpos -257
   ypos 483
  }
  ColorMatrix {
   matrix {
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
       {{parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix} {parent.parent.RGBToXYZ_GamutGrid.ColorMatrix.matrix}}
     }
   name ColorMatrix2
   label "RGB to XYZ"
   xpos -257
   ypos 560
  }
  Output {
   name Output
   xpos -257
   ypos 740
  }
  ColorWheel {
   inputs 0
   format "256 256 0 0 256 256 1 square_256"
   area {40 40 472 472}
   name ColorWheel2
   xpos -37
   ypos -705
   postage_stamp false
  }
 end_group
set N3c600100 [stack 0]
 Group {
  name RGBToXYZ_GamutGrid
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos -184
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut ACEScg
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 ColorWheel {
  inputs 0
  format "512 512 0 0 512 512 1 square_512"
  centerSaturation 1
  fillFormat false
  area {-196 -184 708 696}
  name ColorWheel1
  xpos -920
  ypos 5
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop1
  xpos -920
  ypos 87
 }
 BlackOutside {
  name BlackOutside3
  xpos -920
  ypos 134
 }
set N3d4f8800 [stack 0]
 Group {
  name RGBToXYZ_GamutC
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1140
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec709
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r+input.width} {parent.ReformatBox4.box_width-input.height}}
  name Position6
  xpos -1140
  ypos 254
 }
push $N3d4f8800
 Group {
  name RGBToXYZ_GamutB
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -1030
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut P3D65
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height*2}}
  name Position5
  xpos -1030
  ypos 254
 }
push $N3d4f8800
 Group {
  name RGBToXYZ_GamutA
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos -920
  ypos 176
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" "DaVinci WG" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut Rec2020
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.7006223798 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.1487748176 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.101058729 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2741185129 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.8736318946 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 -0.1477504075 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 -0.09896291792 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 -0.1378953159 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 1.325916052 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.313 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.1682 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.9877 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.079 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 -0.1155 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Position {
  translate {{parent.Reformat1.box_width+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position4
  xpos -920
  ypos 254
 }
push $N3c600100
 Reformat {
  type scale
  scale 0.8
  turn true
  filter impulse
  black_outside true
  name Reformat2
  xpos -920
  ypos -129
 }
 BlackOutside {
  name BlackOutside2
  xpos -920
  ypos -106
 }
 Position {
  translate {{Rectangle1.area.r} {parent.Position3.translate.y-input.height}}
  name Position2
  xpos -920
  ypos -81
 }
 Group {
  inputs 0
  name ColorChecker24_After_November_2014
  label "CIE XYZ D50"
  xpos -920
  ypos -352
  addUserKnob {20 colorchecker_tab l "ColorChecker24 - After November 2014"}
  addUserKnob {3 patch_resolution}
  patch_resolution 48
 }
  Group {
   inputs 0
   name bluish_green
   selected true
   xpos 622
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.30451114 0.4143554688 0.344352688 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "bluish green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 6
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_flower
   xpos 512
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2419823988 0.2287175998 0.3282104382 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue flower"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 5
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name foliage
   xpos 402
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1114392339 0.1346792679 0.05239320311 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob foliage
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 4
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue_sky
   xpos 292
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1652470004 0.1785519348 0.2546024121 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "blue sky"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 3
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name light_skin
   xpos 180
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3811104477 0.336202304 0.1852590702 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "light skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 2
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 135
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name dark_skin
   xpos 70
   ypos -321
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1136398927 0.09832436105 0.047793811 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "dark skin"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 1
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 290
    ypos 63
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 290
    ypos 158
   }
   Output {
    name Output
    xpos 290
    ypos 230
   }
  end_group
  Group {
   inputs 0
   name orange_yellow
   xpos 622
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4769723742 0.4293377578 0.06005041429 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "orange yellow"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 12
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow_green
   xpos 512
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3427379502 0.4331759409 0.08330791241 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "yellow green"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 11
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purple
   xpos 401
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08353888545 0.06276662955 0.1042075686 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob purple
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 10
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name moderate_red
   xpos 290
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2915036416 0.188999956 0.09736350318 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "moderate red"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 9
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name purplish_blue
   xpos 180
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1200518326 0.1091090233 0.2874447494 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "purplish blue"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 8
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name orange
   xpos 74
   ypos -201
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.4073691399 0.3126416159 0.05130591012 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob orange
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 7
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name cyan
   xpos 622
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1247966941 0.180609913 0.2913392383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob cyan
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 18
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name magenta
   xpos 512
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.299122798 0.1895114577 0.2213469194 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob magenta
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 17
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name yellow
   xpos 399
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5888922356 0.5992976803 0.07077420003 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob yellow
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 16
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 182
   }
  end_group
  Group {
   inputs 0
   name red
   xpos 292
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.2143728424 0.127800835 0.03868150726 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob red
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 15
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name green
   xpos 182
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1413517689 0.2233437582 0.07287461742 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob green
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 14
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name blue
   xpos 72
   ypos -81
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.06809095613 0.05596214063 0.2077405936 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob blue
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 13
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name black_2
   xpos 623
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.03042544265 0.03151319431 0.02656724434 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "black 2 (1.5 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 24
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 125
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_3
   xpos 512
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.08448968042 0.08817234828 0.07391630753 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 3.5 (1.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 23
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_5
   xpos 403
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.1835495863 0.1906228754 0.1566717383 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 5 (.70 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 22
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_6
   xpos 292
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.3495921991 0.3648652066 0.3013565492 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 6.5 (.44 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 21
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name neutral_8
   xpos 179
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.5665335579 0.5899709702 0.4828473821 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "neutral 8 (.23 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 20
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  Group {
   inputs 0
   name white_9
   xpos 70
   ypos 39
   postage_stamp true
   addUserKnob {20 sample_Tab l Sample}
   addUserKnob {19 colour_RGBA_Color_Knob l Colour}
   colour_RGBA_Color_Knob {0.8436985288 0.8806903203 0.6936778752 1}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 colour_RGBA_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {1 name_Text_Knob l Name}
   name_Text_Knob "white 9.5 (.05 D)"
   addUserKnob {1 index_Text_Knob l Index}
   index_Text_Knob 19
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {6 label_colour_RGB_Color_Knob_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
   addUserKnob {3 resolution}
   resolution {{parent.patch_resolution}}
  }
   Constant {
    inputs 0
    color {{parent.colour_RGBA_Color_Knob.r} {parent.colour_RGBA_Color_Knob.g} {parent.colour_RGBA_Color_Knob.b} {parent.colour_RGBA_Color_Knob.a}}
    format "512 512 0 0 512 512 1 square_512"
    name Constant
    xpos 262
    ypos 53
   }
   Reformat {
    type "to box"
    box_width {{parent.resolution}}
    box_height {{parent.resolution}}
    box_fixed true
    filter impulse
    black_outside true
    name Reformat1
    xpos 262
    ypos 134
   }
   Output {
    name Output
    xpos 262
    ypos 173
   }
  end_group
  ContactSheet {
   inputs 24
   width {{"rint(parent.patch_resolution * 6 + gap * 7)"}}
   height {{"rint(parent.patch_resolution * 4 + gap * 5)"}}
   rows 4
   columns 6
   startframe 1
   endframe 1
   name ContactSheet
   xpos 620
   ypos 206
  }
  Unpremult {
   name Unpremult1
   xpos 620
   ypos 278
  }
  Output {
   name Output
   xpos 620
   ypos 446
  }
 end_group
 BlackOutside {
  name BlackOutside4
  xpos -920
  ypos -298
 }
 Position {
  translate {{parent.Reformat1.box_width*3+Rectangle1.area.r} {parent.ReformatBox4.box_width-input.height}}
  name Position7
  xpos -920
  ypos -273
 }
 Constant {
  inputs 0
  format "256 256 0 0 256 256 1 square_256"
  name Constant5
  xpos -700
  ypos -1354
  postage_stamp false
 }
 Dot {
  name Dot25
  xpos -666
  ypos -1302
 }
set N3d604c00 [stack 0]
 Dot {
  name Dot27
  xpos -1546
  ypos -1302
 }
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox1
  xpos -1580
  ypos -994
 }
 Ramp {
  p0 {0 0}
  p1 {{input.width} 0}
  color {{p1}}
  name Ramp3
  xpos -1580
  ypos -898
 }
 ColorLookup {
  lut {master {}
    red {curve}
    green {curve 0.433 0.464 0.513 0.611 0.576 0.46 0.426 0.412 0.404 0.397 0.384 0.374 0.346 0.333 0.311 0.287 0.257 0.23 0.21 0.219 0.208 0.211 0.208 0.187 0.191 0.187 0.18 0.164 0.17 0.177 0.175 0.188 0.252 0.325 0.385 0.416 0.433 0.487 0.532 0.588 0.637 0.634 0.549 0.506 0.49 0.458 0.426 0.412 0.397 0.365 0.337 0.301 0.262 0.221 0.192 0.164 0.167 0.162 0.176 0.179 0.148 0.156 0.142 0.148 0.138 0.145 0.145 0.161 0.197 0.256 0.324 0.393 0.451 0.487 0.508 0.538 0.587 0.634 0.659 0.611 0.552 0.526 0.484 0.452 0.428 0.406 0.371 0.334 0.293 0.243 0.204 0.177 0.151 0.151 0.162 0.158 0.161 0.142 0.141 0.129 0.134 0.14 0.156 0.166 0.192 0.221 0.265 0.325 0.392 0.451 0.508 0.48 0.513 0.554 0.597 0.63 0.634 0.58 0.546 0.499 0.466 0.434 0.408 0.372 0.332 0.288 0.242 0.202 0.179 0.16 0.157 0.162 0.157 0.159 0.149 0.153 0.147 0.154 0.164 0.18 0.199 0.226 0.25 0.279 0.325 0.38 0.439 0.48 0.436 0.468 0.502 0.541 0.57 0.605 0.594 0.555 0.511 0.473 0.439 0.409 0.371 0.332 0.288 0.252 0.217 0.196 0.181 0.178 0.185 0.176 0.173 0.168 0.176 0.178 0.19 0.202 0.214 0.235 0.254 0.27 0.291 0.323 0.366 0.41 0.436 0.396 0.414 0.438 0.465 0.485 0.527 0.566 0.557 0.523 0.478 0.442 0.409 0.371 0.334 0.294 0.265 0.244 0.223 0.225 0.212 0.218 0.211 0.211 0.207 0.214 0.217 0.229 0.237 0.244 0.264 0.275 0.285 0.3 0.321 0.348 0.376 0.396 0.357 0.368 0.377 0.391 0.402 0.431 0.481 0.503 0.521 0.482 0.444 0.409 0.372 0.337 0.307 0.286 0.27 0.257 0.247 0.251 0.257 0.255 0.254 0.25 0.258 0.259 0.265 0.269 0.278 0.284 0.292 0.297 0.305 0.317 0.33 0.344 0.357 0.321 0.322 0.328 0.332 0.333 0.346 0.365 0.389 0.411 0.459 0.443 0.399 0.352 0.327 0.313 0.304 0.3 0.294 0.295 0.294 0.293 0.292 0.291 0.295 0.3 0.301 0.302 0.304 0.304 0.304 0.305 0.307 0.309 0.312 0.313 0.316 0.321}
    blue {curve 0.26 0.281 0.298 0.306 0.342 0.365 0.39 0.381 0.392 0.416 0.413 0.43 0.448 0.446 0.433 0.425 0.419 0.394 0.362 0.328 0.305 0.298 0.286 0.247 0.26 0.219 0.199 0.168 0.178 0.14 0.11 0.084 0.104 0.158 0.18 0.225 0.26 0.235 0.26 0.28 0.298 0.327 0.372 0.395 0.417 0.43 0.435 0.455 0.488 0.479 0.521 0.522 0.515 0.49 0.436 0.383 0.331 0.295 0.282 0.258 0.219 0.208 0.179 0.168 0.141 0.129 0.106 0.094 0.095 0.112 0.127 0.165 0.199 0.235 0.226 0.258 0.28 0.298 0.316 0.361 0.399 0.427 0.446 0.461 0.482 0.52 0.521 0.553 0.563 0.573 0.524 0.454 0.389 0.33 0.295 0.266 0.247 0.214 0.195 0.168 0.178 0.142 0.14 0.128 0.129 0.126 0.131 0.144 0.167 0.199 0.226 0.238 0.266 0.289 0.31 0.329 0.351 0.395 0.428 0.453 0.475 0.494 0.533 0.542 0.568 0.584 0.576 0.53 0.451 0.385 0.331 0.299 0.266 0.245 0.22 0.206 0.184 0.174 0.167 0.166 0.166 0.173 0.172 0.165 0.172 0.187 0.208 0.238 0.258 0.28 0.3 0.321 0.343 0.362 0.391 0.427 0.458 0.482 0.503 0.546 0.554 0.573 0.582 0.546 0.499 0.431 0.375 0.33 0.304 0.275 0.254 0.234 0.225 0.212 0.209 0.206 0.203 0.21 0.215 0.212 0.204 0.208 0.214 0.231 0.258 0.277 0.294 0.31 0.328 0.348 0.372 0.397 0.427 0.462 0.487 0.51 0.544 0.558 0.559 0.556 0.503 0.444 0.402 0.355 0.329 0.309 0.289 0.275 0.26 0.254 0.245 0.245 0.241 0.238 0.249 0.249 0.245 0.241 0.242 0.246 0.258 0.277 0.295 0.305 0.315 0.327 0.339 0.359 0.39 0.421 0.461 0.491 0.515 0.54 0.546 0.522 0.478 0.429 0.393 0.368 0.345 0.325 0.313 0.303 0.295 0.286 0.284 0.279 0.277 0.274 0.277 0.277 0.28 0.276 0.273 0.274 0.279 0.285 0.295 0.311 0.314 0.316 0.32 0.323 0.331 0.346 0.367 0.397 0.468 0.513 0.494 0.425 0.388 0.372 0.348 0.336 0.331 0.326 0.32 0.316 0.314 0.312 0.309 0.321 0.32 0.319 0.305 0.317 0.316 0.316 0.315 0.316 0.317 0.319 0.321 0.311}
    alpha {}}
  name ColorLookup7
  label "Pointers Samples Yxy\nSource: https://www.rit.edu/cos/colorscience/rc_useful_data.php"
  xpos -1580
  ypos -790
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace12
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1580
  ypos -688
 }
 Fill {
  output alpha
  name Fill5
  xpos -1580
  ypos -639
 }
 BlackOutside {
  name BlackOutside7
  xpos -1580
  ypos -562
 }
 Position {
  translate {6 {parent.Position1.translate.y-input.height}}
  name Position3
  xpos -1580
  ypos -538
 }
 Dot {
  name Dot15
  xpos -1546
  ypos -414
 }
push $N3d604c00
 Reformat {
  type "to box"
  box_width 2048
  box_height 2048
  box_fixed true
  name ReformatBox4
  xpos -700
  ypos -1258
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression7
  xpos -700
  ypos -1209
 }
 Dot {
  name Dot10
  xpos -666
  ypos -1158
 }
set N3d5bd000 [stack 0]
 Dot {
  name Dot26
  xpos -886
  ypos -1158
 }
set N3d5bcc00 [stack 0]
 Dot {
  name Dot23
  xpos -1106
  ypos -1158
 }
set N3d5bc800 [stack 0]
 Dot {
  name Dot12
  xpos -1326
  ypos -1158
 }
 Mirror2 {
  flip true
  flop true
  name Mirror2_1
  xpos -1360
  ypos -1042
 }
 Reformat {
  type "to box"
  box_width 512
  box_height {{box_width}}
  box_fixed true
  name Reformat1
  xpos -1360
  ypos -994
 }
 Gamma {
  channels rgb
  value 2
  name Gamma1
  xpos -1360
  ypos -898
 }
 Multiply {
  channels rgb
  value 8000
  name Multiply1
  label "\[value value]"
  xpos -1360
  ypos -811
 }
 ColorLookup {
  lut {master {}
    red {curve R 0.4830000103 x50 0.5045000315 0.5260000229 0.5475000143 0.5690000057 0.5904999971 0.6119999886 0.63349998 0.6549999714 0.6805312037 0.7087500095 0.7315937281 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.7409999967 0.75459373 0.7845000029 0.8144062757 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8280000091 0.8009687662 0.74150002 0.6820312142 0.6549999714 0.6684374809 0.6980000138 0.7275624871 0.7409999967 0.7315937281 0.7087500095 0.6805312037 0.6549999714 0.629468739 0.6012499928 0.5784062743 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5555624962 0.5260000229 0.4964375198 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4964375198 0.5260000229 0.5555624962 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5690000057 0.5653046966 0.5555624962 0.5417890549 0.5260000229 0.5102109313 0.4964375198 0.4866953194 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4695625007 0.4400000274 0.4104375243 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.3970000148 0.4104375243 0.4400000274 0.4695625007 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103 0.4830000103}
    green {curve R 0.6589999795 x50 0.6542205811 0.6484853029 0.6414804459 0.6340000033 0.6249843836 0.6147499681 0.6041406393 0.5939999819 0.5844687223 0.575124979 0.5659687519 0.5569999814 0.5484530926 0.5402500033 0.5319218636 0.5230000019 0.5131718516 0.5027499795 0.4922031164 0.4819999933 0.4722187519 0.4626249969 0.4532187581 0.4440000057 0.4351093769 0.4265000224 0.4178906381 0.4090000093 0.3997343779 0.3902499974 0.380640626 0.3709999919 0.3614374995 0.3518749774 0.3421249986 0.3319999874 0.321398437 0.3104375005 0.2992577851 0.2879999876 0.2764999866 0.2647500038 0.2531249821 0.2419999987 0.2312265635 0.2206875086 0.2108047009 0.202000007 0.1947187632 0.1886250079 0.1829687506 0.1770000011 0.1693515629 0.1608124971 0.1538671851 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1509999931 0.1527187377 0.1564999968 0.1602812558 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1620000005 0.1612187475 0.1595000029 0.1577812582 0.1570000052 0.1573124975 0.1579999924 0.1586875021 0.1589999944 0.1575781256 0.1543750018 0.1509843767 0.1490000039 0.1485625058 0.1484999955 0.1484375 0.1480000019 0.1467812508 0.1449999958 0.1432187557 0.1420000046 0.1415625066 0.1414999962 0.1414375007 0.1410000026 0.1397656202 0.1378750056 0.1357968748 0.1340000033 0.1323750019 0.1307500005 0.1295000017 0.1289999932 0.130031243 0.1324999928 0.1354687512 0.1379999965 0.1402187496 0.1424999982 0.1442812532 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1449999958 0.1464921832 0.1503124982 0.1554765552 0.1609999985 0.1673984379 0.1749375015 0.1822578013 0.1879999936 0.1906718612 0.1913749874 0.1926406175 0.1969999969 0.2064140588 0.2199375033 0.2357421964 0.2520000041 0.2688750029 0.2871249914 0.3058125079 0.324000001 0.3417187631 0.359375 0.3765937686 0.3930000067 0.4082968831 0.4227499962 0.4368281364 0.451000005 0.4659531415 0.4812500179 0.4956718981 0.5080000162 0.5169296861 0.5234375 0.5297265649 0.5379999876 0.5491171479 0.5618124604 0.5751015544 0.5879999995 0.6009531021 0.6142500043 0.6266719103 0.6370000243 0.6457066536 0.6532088518 0.6575522423 0.6589999795}
    blue {curve R 0.3160000145 x50 0.324739933 0.3330312669 0.3418398499 0.351000011 0.3607422113 0.3709374964 0.3811640739 0.3910000026 0.4003046751 0.4093124866 0.4181640446 0.4269999862 0.4359609187 0.4449374974 0.453695327 0.4620000124 0.4697890878 0.4771875143 0.4842422009 0.4909999967 0.4971874952 0.5028749704 0.5086249709 0.5149999857 0.5227031112 0.53125 0.5394218564 0.5460000038 0.5502656102 0.5530000329 0.5552343726 0.5580000281 0.561632812 0.5655625463 0.5694609284 0.5730000138 0.5765469074 0.5801249743 0.5828906298 0.5839999914 0.5838750005 0.5830000043 0.5806249976 0.5759999752 0.5682968497 0.5576249957 0.5446406007 0.5299999714 0.5128515363 0.4931874871 0.4729296863 0.4539999962 0.4368359447 0.420437485 0.4045703113 0.3889999986 0.3731718659 0.3573749959 0.3426406384 0.3300000131 0.3193906248 0.310375005 0.3034218848 0.298999995 0.2972500026 0.2969999909 0.2967499793 0.2949999869 0.2899531126 0.2821249962 0.2734843791 0.2660000026 0.2602812648 0.2552500069 0.2503437698 0.2450000048 0.2380000055 0.2300000042 0.2232500017 0.2199999988 0.2195625007 0.2194999903 0.2194374949 0.2189999968 0.2183593661 0.2176249921 0.2163281292 0.2140000015 0.2101874948 0.205249995 0.1999374926 0.1949999928 0.1904453039 0.185937494 0.1817109436 0.1780000031 0.1754062474 0.1736250073 0.1715312451 0.1679999977 0.1620937437 0.1546249986 0.147093758 0.1410000026 0.1372031271 0.1347499937 0.1324218661 0.1289999932 0.1237656176 0.1174999923 0.1112343743 0.1059999987 0.1021796837 0.09918750077 0.09660156071 0.09399999678 0.09089062363 0.0876249969 0.0850468725 0.08399999887 0.08524999768 0.0882499963 0.09187500179 0.09499999881 0.09706249833 0.09875000268 0.1008125022 0.1040000021 0.1084140688 0.1136875004 0.1198671907 0.1270000041 0.1355390698 0.145312503 0.1554296911 0.1650000066 0.1739453226 0.1826875061 0.1910859346 0.199000001 0.2061250061 0.2126249969 0.2190624923 0.2259999961 0.2338827997 0.2423124909 0.2505859137 0.2579999864 0.2642968595 0.26987499 0.2750156224 0.2800000012 0.2847812474 0.2892500162 0.2935937643 0.2980000079 0.3025000095 0.3070000112 0.3115000129 0.3160000145}
    alpha {}}
  name ColorLookup5
  label "Pointer's Gamut Boundary Yxy\ninterpolated: incr 50 - 0 to 8000"
  xpos -1360
  ypos -775
 }
 Multiply {
  channels rgb
  value {0.31 1 1 1}
  name Multiply2
  label "dim boundary"
  xpos -1360
  ypos -725
 }
 Colorspace {
  colorspace_in CIE-Yxy
  primary_in "Adobe (1998)"
  colorspace_out CIE-XYZ
  name Colorspace5
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -1360
  ypos -688
 }
 Fill {
  output alpha
  name Fill4
  xpos -1360
  ypos -639
 }
 BlackOutside {
  name BlackOutside1
  xpos -1360
  ypos -562
 }
 Position {
  translate {6 {ReformatBox4.box_width-input.width}}
  name Position1
  xpos -1360
  ypos -538
 }
 Dot {
  name Dot24
  xpos -1326
  ypos -486
 }
push $N3d5bc800
 Reformat {
  type "to box"
  box_width {{parent.Reformat1.box_width}}
  box_height 100
  box_fixed true
  name ReformatBox2
  xpos -1140
  ypos -994
 }
 Expression {
  temp_name0 n
  temp_expr0 input.width/8
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 x/width*(1-y/height)
  channel3 alpha
  expr3 1
  name Expression1
  xpos -1140
  ypos -898
 }
set N3d56c400 [stack 0]
 Dot {
  name Dot8
  xpos -996
  ypos -894
 }
 ColorLookup {
  lut {master {curve L 0 s0 t0.9499999881 C k x0.308139503 1 s0}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup1
  xpos -1030
  ypos -849
 }
 Dot {
  name Dot14
  xpos -996
  ypos -750
 }
push $N3d56c400
 Multiply {
  channels rgb
  value 269
  name Multiply5
  label "\[value value]"
  xpos -1140
  ypos -856
 }
 ColorLookup {
  lut {master {}
    red {curve C 1.8783474 1.85965741 1.8410753 1.82260251 1.80424976 1.78602886 1.76794314 1.75000143 1.73221421 1.71458244 1.69711792 1.67982578 1.66271067 1.6457777 1.62903571 1.6124835 1.59613538 1.57998943 1.56404996 1.54832447 1.5328095 1.51751649 1.50244594 1.48759735 1.47297573 1.45858264 1.44442391 1.43049574 1.41680288 1.40334678 1.39012623 1.37714779 1.36440396 1.35190022 1.33963728 1.32761216 1.31582856 1.30428183 1.29297352 1.28190565 1.27107596 1.2604804 1.25012183 1.23999798 1.23010659 1.22044563 1.21101499 1.20181489 1.19284034 1.18408906 1.17556167 1.16725397 1.15916491 1.15129638 1.14363372 1.13618886 1.12895167 1.12192106 1.11509454 1.10846853 1.10204577 1.09580922 1.08977199 1.08392429 1.07826447 1.07278681 1.06749392 1.06237841 1.05743873 1.05267084 1.04807138 1.04364109 1.03937256 1.03526449 1.03131545 1.02751946 1.02387333 1.02037668 1.01702523 1.01381445 1.01074362 1.00780725 1.00500631 1.00233305 0.99978602 0.99736285 0.9950608 0.99287677 0.99080539 0.98884678 0.98699367 0.9852494 0.98361033 0.98206747 0.98062134 0.97926998 0.97800934 0.97683728 0.97575116 0.97474778 0.97382426 0.97297859 0.97220623 0.97150886 0.97087657 0.97031689 0.96981871 0.96938527 0.96900952 0.96869147 0.96842706 0.96821606 0.96805781 0.96794283 0.96787858 0.96785843 0.96787864 0.96793604 0.96803701 0.96817231 0.96833968 0.96854311 0.96877253 0.96903455 0.96932232 0.96963543 0.96997368 0.97033387 0.97071254 0.9711163 0.97153723 0.97197378 0.97242606 0.97289121 0.97337079 0.97386622 0.97437072 0.97488332 0.97540969 0.97594237 0.97647977 0.97702706 0.97757769 0.97813445 0.97869468 0.97925854 0.97982538 0.98039114 0.98096472 0.98153675 0.98210776 0.98267955 0.98325121 0.98382008 0.98438704 0.9849571 0.98552132 0.98608243 0.98664182 0.98719966 0.98775077 0.98829895 0.98884273 0.98938417 0.98991877 0.9904511 0.99097681 0.99149919 0.99201453 0.99252397 0.99303031 0.99353105 0.99402624 0.99451613 0.99499857 0.99547589 0.99594522 0.99641174 0.99687338 0.99732745 0.99777603 0.9982177 0.99865389 0.999084 0.99950838 0.99992663 1.00033772 1.00074494 1.00114489 1.00153947 1.00192833 1.00231075 1.00268865 1.00305855 1.00342607 1.00378489 1.00413895 1.00448751 1.00483036 1.00517035 1.00550389 1.00583148 1.00615203 1.00646758 1.00678015 1.00708604 1.00738645 1.00768471 1.00797844 1.0082655 1.00854778 1.00882483 1.00909901 1.00936711 1.00963116 1.00989032 1.0101465 1.01039672 1.01064491 1.01088691 1.0111258 1.01135957 1.01158977 1.01181614 1.01203847 1.01225793 1.01247287 1.01268291 1.01289058 1.01309609 1.01329684 1.01349473 1.0136888 1.0138787 1.01406395 1.01424909 1.01442885 1.01460576 1.01478052 1.01495218 1.01512218 1.01528883 1.01545072 1.01561022 1.01576698 1.01592219 1.01607502 1.01622343 1.01636875 1.0165143 1.01665616 1.01679492 1.0169313 1.01706588 1.01719737 1.01732695 1.01745498 1.01757956 1.01770294 1.01782393 1.01794255 1.0180583 1.01817465 1.01828551 1.01839495 1.01850486 1.01861191 1.01871693 1.01882088 1.01891339}
    green {curve C 1}
    blue {curve C 0.00879261 0.00962762 0.010532 0.01151017 0.01256675 0.01370643 0.01493413 0.01625487 0.01767381 0.01919618 0.02082733 0.02257277 0.02443803 0.02642871 0.02855051 0.03080913 0.0332104 0.0357601 0.03846392 0.04132775 0.04435719 0.04755813 0.05093599 0.05449668 0.0582453 0.0621875 0.06632853 0.07067341 0.07522713 0.07999477 0.08498063 0.09018957 0.09562518 0.10129225 0.10719412 0.11333443 0.11971687 0.12634411 0.133219 0.14034435 0.14772213 0.15535444 0.16324303 0.17138906 0.179794 0.18845794 0.197382 0.20656651 0.21601067 0.22571453 0.23567709 0.24589771 0.25637382 0.26710594 0.2780903 0.28932518 0.30080822 0.3125369 0.32450783 0.33671761 0.34916404 0.36183971 0.37474373 0.38787127 0.40121818 0.41477671 0.42854655 0.44251823 0.45668846 0.47105014 0.48559928 0.50033116 0.5152359 0.5303098 0.5455451 0.56093836 0.5764783 0.59215891 0.60797763 0.62392306 0.63999057 0.65616876 0.6724565 0.68884456 0.70532417 0.72188419 0.73852479 0.7552371 0.77200818 0.78883314 0.80570388 0.82261622 0.83956301 0.8565321 0.87351894 0.89051074 0.90751225 0.92450547 0.94148719 0.95845115 0.97538745 0.99229181 1.00915313 1.02597356 1.04273522 1.05944169 1.07608175 1.09265125 1.10914159 1.12555146 1.14187002 1.15809321 1.1742171 1.190238 1.20614767 1.22194457 1.23762202 1.2531724 1.26859927 1.28389311 1.29905295 1.31407428 1.32895291 1.34368753 1.35827363 1.3727088 1.38699389 1.40111876 1.41508293 1.42889357 1.44254065 1.45602405 1.46934104 1.48249614 1.49548101 1.50830269 1.5209527 1.53343177 1.54574537 1.5578897 1.56985986 1.5816654 1.59329891 1.60476208 1.61605716 1.62718153 1.63813758 1.64892519 1.65955138 1.67000985 1.68030369 1.69043732 1.70040607 1.71021223 1.71985734 1.72934508 1.73867714 1.74785423 1.75688136 1.76575518 1.77447391 1.78304338 1.79146802 1.79975164 1.80788386 1.81587982 1.82373333 1.83144975 1.83902776 1.84647095 1.85378456 1.86096811 1.86802399 1.87495112 1.88175035 1.88842535 1.89497983 1.90141833 1.90774179 1.91394711 1.92004013 1.92602086 1.93188739 1.93765306 1.94330883 1.94886208 1.95430994 1.95965815 1.96490622 1.97005856 1.97511387 1.98007631 1.98494554 1.98972344 1.99441445 1.99901712 2.00353193 2.00796437 2.01231384 2.01658392 2.02076721 2.02487659 2.02890825 2.03286695 2.03675175 2.04056406 2.04430199 2.04797506 2.05157685 2.05511236 2.0585804 2.06198287 2.06532407 2.06860161 2.07181907 2.07497644 2.07807779 2.0811162 2.08409977 2.08702946 2.08990335 2.09272337 2.09549189 2.0982089 2.10087585 2.10349345 2.10606146 2.1085825 2.11105394 2.11348104 2.11586332 2.11820364 2.12050176 2.12275648 2.12496805 2.127141 2.12927723 2.13136625 2.13341999 2.13543844 2.13741732 2.13936305 2.1412704 2.1431427 2.14498401 2.14678812 2.14856291 2.1503005 2.15200949 2.15368938 2.15533352 2.15695238 2.15853977 2.16009951 2.16162968 2.16313291 2.16460824 2.16605687 2.16747928 2.16887903 2.17024994 2.1715951 2.17291784 2.17421341 2.17548871 2.17674041 2.17797112 2.17918396 2.18036819 2.18143296}
    alpha {}}
  name ColorLookup3
  label "Planckian Locus 0-269"
  xpos -1140
  ypos -808
 }
 Multiply {
  inputs 1+1
  channels rgb
  value 0
  maskChannelMask rgba.red
  invert_mask true
  name Multiply3
  label dim
  xpos -1140
  ypos -760
 }
 BlackOutside {
  name BlackOutside6
  xpos -1140
  ypos -706
 }
 Position {
  translate {6 {parent.Position2.translate.y-input.height}}
  name Position8
  xpos -1140
  ypos -682
 }
 Dot {
  name Dot28
  xpos -1106
  ypos -654
 }
push $N3d5bcc00
 Dot {
  name Dot4
  xpos -886
  ypos -1086
 }
set N3d919800 [stack 0]
 Rectangle {
  replace true
  area {0 0 6 {height}}
  name Rectangle1
  xpos -810
  ypos -1089
 }
 BlackOutside {
  name BlackOutside5
  xpos -810
  ypos -1041
 }
push $N3d919800
 Radial {
  inputs 1+1
  replace true
  area {-5422 -3542 7470 5590}
  softness 0
  ramp linear
  color {0.0719 0.02604 0.0001 1}
  p1 {0 0}
  color0 {0.039378 0.001097 0.188331 1}
  p0 {0 2048}
  name Radial1
  xpos -920
  ypos -1041
 }
 Dot {
  name Dot9
  xpos -886
  ypos -894
 }
push $N3d5bd000
 Gamma {
  channels rgba
  value 0.5
  name Gamma2
  xpos -700
  ypos -1120
 }
 Expression {
  temp_name0 start
  temp_expr0 360
  temp_name1 end
  temp_expr1 830
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 r*(end-start)+start
  channel1 none
  channel2 none
  expr3 1
  name Expression2
  label "360nm to 830nm"
  xpos -700
  ypos -1096
 }
 ColorLookup {
  lut {master {}
    red {curve x360 0.0001299 C 0.00014585 0.0001638 0.000184 0.00020669 0.0002321 0.00026073 0.00029307 0.00032939 0.00036991 0.0004149 0.00046416 0.00051899 0.00058185 0.00065523 0.0007416 0.00084503 0.00096453 0.00109495 0.00123115 0.001368 0.00150205 0.00164233 0.00180238 0.00199576 0.002236 0.00253539 0.0028926 0.00330083 0.00375324 0.004243 0.00476239 0.00533005 0.00597871 0.00674112 0.00765 0.00875137 0.01002888 0.0114217 0.01286901 0.01431 0.01570443 0.01714744 0.01878122 0.02074801 0.02319 0.02620736 0.02978248 0.03388092 0.03846824 0.04351 0.0489956 0.0550226 0.0617188 0.069212 0.07763 0.08695811 0.09717672 0.1084063 0.1207672 0.13438 0.1493582 0.16539571 0.1819831 0.19861101 0.21477 0.23018681 0.24487969 0.25877729 0.27180791 0.28389999 0.29494381 0.3048965 0.31378731 0.32164541 0.3285 0.3343513 0.33921009 0.34312129 0.3461296 0.34828001 0.3495999 0.3501474 0.35001299 0.349287 0.34806001 0.34637329 0.34426239 0.3418088 0.3390941 0.3362 0.33319771 0.33004111 0.32663569 0.32288679 0.31869999 0.3140251 0.30888399 0.3032904 0.2972579 0.29080001 0.28397009 0.27672139 0.2689178 0.26042271 0.2511 0.2408475 0.2298512 0.2184072 0.2068115 0.19536 0.18421359 0.1733273 0.16268811 0.1522833 0.14210001 0.1321786 0.1225696 0.1132752 0.1042979 0.09564 0.08729955 0.07930804 0.07171776 0.06458099 0.05795001 0.05186211 0.04628152 0.04115088 0.03641283 0.03201 0.0279172 0.0241444 0.020687 0.0175404 0.0147 0.01216179 0.00991996 0.00796724 0.00629635 0.0049 0.00377717 0.00294532 0.00242488 0.00223629 0.0024 0.00292552 0.00383656 0.00517484 0.00698208 0.0093 0.01214949 0.01553588 0.01947752 0.02399277 0.0291 0.03481485 0.04112016 0.04798504 0.05537861 0.06327 0.07163501 0.08046224 0.08973996 0.09945645 0.1096 0.1201674 0.1311145 0.1423679 0.15385421 0.1655 0.17725711 0.18914001 0.2011694 0.21336579 0.2257499 0.2383209 0.2510668 0.26399219 0.2771017 0.2904 0.30389121 0.31757259 0.33143839 0.3454828 0.35969999 0.37408391 0.3886396 0.4033784 0.41831151 0.43344989 0.44879529 0.46433601 0.480064 0.49597129 0.51205009 0.52829587 0.54469162 0.56120938 0.57782149 0.59450001 0.6112209 0.62797582 0.64476019 0.66156971 0.67839998 0.69523919 0.7120586 0.72882837 0.7455188 0.76209998 0.77854317 0.79482561 0.81092638 0.82682478 0.84249997 0.85793251 0.87308162 0.88789439 0.90231812 0.9163 0.9297995 0.94279838 0.95527762 0.96721792 0.97860003 0.9893856 0.99954879 1.00908923 1.01800644 1.02629995 1.03398275 1.04098594 1.04718804 1.05246675 1.05669999 1.05979443 1.06179917 1.06280684 1.0629096 1.06219995 1.06073523 1.05844355 1.05522442 1.05097675 1.04560006 1.03903687 1.03136074 1.02266622 1.0130477 1.00259995 0.99136752 0.97933137 0.96649158 0.9528479 0.93839997 0.92319399 0.90724403 0.89050198 0.87291998 0.85444993 0.83508402 0.814946 0.794186 0.77295399 0.75139999 0.72958362 0.70758879 0.68560219 0.66381037 0.64240003 0.62151492 0.6011138 0.58110517 0.56139767 0.54189998 0.52259952 0.50354642 0.4847436 0.46619391 0.4479 0.42986131 0.41209799 0.39464399 0.37753329 0.3608 0.34445629 0.32851681 0.31301919 0.29800111 0.28349999 0.26954481 0.25611839 0.2431896 0.2307272 0.21870001 0.2070971 0.19592319 0.1851708 0.1748323 0.1649 0.1553667 0.14623 0.13749 0.1291467 0.1212 0.1136397 0.106465 0.09969044 0.09333061 0.0874 0.08190096 0.07680428 0.07207712 0.06768664 0.0636 0.05980685 0.05628216 0.05297104 0.04981861 0.04677 0.04378405 0.04087536 0.03807264 0.03540461 0.0329 0.03056419 0.02838056 0.02634484 0.02445275 0.0227 0.02108429 0.01959988 0.01823732 0.01698717 0.01584 0.01479064 0.01383132 0.01294868 0.0121292 0.01135916 0.01062935 0.00993885 0.00928842 0.00867885 0.00811092 0.00758239 0.00708875 0.00662731 0.00619541 0.00579035 0.00540983 0.00505258 0.00471751 0.00440351 0.00410946 0.00383391 0.00357575 0.00333434 0.00310907 0.00289933 0.00270435 0.00252302 0.00235417 0.00219662 0.00204919 0.00191096 0.00178144 0.00166011 0.00154646 0.00143997 0.00134004 0.00124628 0.00115847 0.00107643 0.00099995 0.00092874 0.00086243 0.00080075 0.0007434 0.00069008 0.00064052 0.0005945 0.00055186 0.00051243 0.00047602 0.00044245 0.00041151 0.00038298 0.00035665 0.0003323 0.00030976 0.00028889 0.00026954 0.00025157 0.00023483 0.00021917 0.00020453 0.00019084 0.00017807 0.00016615 0.00015502 0.00014462 0.00013491 0.00012585 0.00011741 0.00010955 0.00010222 9.539e-05 8.902e-05 8.308e-05 7.751e-05 7.231e-05 6.746e-05 6.293e-05 5.871e-05 5.477e-05 5.11e-05 4.768e-05 4.449e-05 4.151e-05 3.873e-05 3.614e-05 3.372e-05 3.146e-05 2.935e-05 2.738e-05 2.552e-05 2.379e-05 2.218e-05 2.067e-05 1.927e-05 1.797e-05 1.675e-05 1.562e-05 1.456e-05 1.357e-05 1.265e-05 1.18e-05 1.1e-05 1.025e-05 9.56e-06 8.91e-06 8.31e-06 7.75e-06 7.22e-06 6.73e-06 6.28e-06 5.85e-06 5.46e-06 5.09e-06 4.74e-06 4.42e-06 4.12e-06 3.84e-06 3.58e-06 3.34e-06 3.11e-06 2.9e-06 2.71e-06 2.52e-06 2.35e-06 2.19e-06 2.04e-06 1.91e-06 1.78e-06 1.66e-06 1.54e-06 1.44e-06 1.34e-06 S 1.25e-06}
    green {curve x360 3.92e-06 C 4.39e-06 4.93e-06 5.53e-06 6.21e-06 6.97e-06 7.81e-06 8.77e-06 9.84e-06 1.104e-05 1.239e-05 1.389e-05 1.556e-05 1.744e-05 1.958e-05 2.202e-05 2.484e-05 2.804e-05 3.153e-05 3.522e-05 3.9e-05 4.283e-05 4.691e-05 5.159e-05 5.718e-05 6.4e-05 7.234e-05 8.221e-05 9.351e-05 0.00010614 0.00012 0.00013498 0.00015149 0.00017021 0.00019182 0.000217 0.00024691 0.00028124 0.00031852 0.00035727 0.000396 0.00043371 0.00047302 0.00051788 0.00057222 0.00064 0.00072456 0.0008255 0.00094116 0.00106988 0.00121 0.00136209 0.00153075 0.00172037 0.00193532 0.00218 0.0024548 0.002764 0.0031178 0.0035264 0.004 0.00454624 0.00515932 0.00582928 0.00654616 0.0073 0.00808651 0.00890872 0.00976768 0.01066443 0.0116 0.01257317 0.01358272 0.01462968 0.01571509 0.01684 0.01800736 0.01921448 0.02045392 0.02171824 0.023 0.02429461 0.02561024 0.02695857 0.02835125 0.0298 0.03131083 0.03288368 0.03452112 0.03622571 0.038 0.03984667 0.041768 0.043766 0.04584267 0.048 0.05024368 0.05257304 0.05498056 0.05745872 0.06 0.06260197 0.06527752 0.06804208 0.07091109 0.0739 0.077016 0.0802664 0.0836668 0.0872328 0.09098 0.09491755 0.09904584 0.1033674 0.1078846 0.1126 0.117532 0.1226744 0.12799279 0.1334528 0.13902 0.1446764 0.1504693 0.15646189 0.1627177 0.1693 0.1762431 0.18355811 0.1912735 0.19941799 0.20802 0.2171199 0.2267345 0.2368571 0.2474812 0.2586 0.2701849 0.28229389 0.2950505 0.30857801 0.32300001 0.33840209 0.35468581 0.37169859 0.3892875 0.4073 0.42562991 0.44430959 0.4633944 0.48293951 0.50300002 0.52356929 0.54451197 0.56568998 0.58696532 0.60820001 0.6293456 0.65030682 0.67087519 0.69084239 0.70999998 0.72818518 0.74546361 0.76196939 0.7778368 0.79320002 0.80811042 0.82249618 0.83630681 0.8494916 0.86199999 0.87381083 0.88496238 0.89549363 0.90544319 0.91485012 0.92373478 0.93209243 0.93992257 0.94722521 0.954 0.9602561 0.96600741 0.97126061 0.97602248 0.98030001 0.98409241 0.98741817 0.99031281 0.99281162 0.99495012 0.99671078 0.99809831 0.99911201 0.99974817 1 0.99985671 0.99930459 0.99832553 0.99689871 0.995 0.9926005 0.98974258 0.98644441 0.98272407 0.97860003 0.97408372 0.96917123 0.96385682 0.95813489 0.95200002 0.94545043 0.93849921 0.93116277 0.92345762 0.91540003 0.90700638 0.89827722 0.8892048 0.8797816 0.87 0.85986131 0.849392 0.83862197 0.82758129 0.81629997 0.80479473 0.793082 0.781192 0.76915473 0.75700003 0.74475408 0.73242241 0.7200036 0.70749652 0.69489998 0.68221921 0.66947162 0.65667439 0.64384478 0.63099998 0.61815548 0.60531437 0.59247559 0.57963789 0.5668 0.5539611 0.54113722 0.5283528 0.51563227 0.50300002 0.4904688 0.47803041 0.46567759 0.4534032 0.44119999 0.42908001 0.417036 0.40503201 0.39303201 0.38100001 0.36891839 0.3568272 0.34477681 0.33281761 0.32100001 0.30933809 0.2978504 0.28659359 0.27562451 0.26499999 0.25476319 0.2448896 0.2353344 0.22605281 0.21699999 0.20816161 0.1995488 0.1911552 0.1829744 0.175 0.1672235 0.15964641 0.1522776 0.1451259 0.1382 0.1315003 0.1250248 0.1187792 0.1127691 0.107 0.1014762 0.09618864 0.09112296 0.08626485 0.0816 0.07712064 0.07282552 0.06871008 0.06476976 0.061 0.05739621 0.05395504 0.05067376 0.04754965 0.04458 0.04175872 0.03908496 0.03656384 0.03420048 0.032 0.02996261 0.02807664 0.02632936 0.02470805 0.0232 0.02180077 0.02050112 0.01928108 0.01812069 0.017 0.01590379 0.01483718 0.01381068 0.01283478 0.01192 0.01106831 0.01027339 0.00953331 0.00884616 0.00821 0.00762378 0.00708542 0.00659148 0.00613848 0.005723 0.00534306 0.0049958 0.0046764 0.00438007 0.004102 0.00383845 0.0035891 0.00335422 0.00313409 0.002929 0.00273814 0.00255988 0.00239324 0.00223728 0.002091 0.00195359 0.00182458 0.00170358 0.00159019 0.001484 0.0013845 0.00129127 0.00120409 0.00112274 0.001047 0.00097659 0.00091111 0.00085013 0.00079324 0.00074 0.00069008 0.00064331 0.0005995 0.00055845 0.00052 0.00048391 0.00045005 0.00041835 0.00038872 0.0003611 0.00033538 0.00031144 0.00028917 0.00026845 0.0002492 0.0002313 0.00021469 0.00019929 0.00018505 0.0001719 0.00015978 0.0001486 0.0001383 0.00012879 0.00012 0.00011186 0.00010432 9.734e-05 9.085e-05 8.48e-05 7.915e-05 7.386e-05 6.892e-05 6.43e-05 6e-05 5.598e-05 5.223e-05 4.872e-05 4.545e-05 4.24e-05 3.956e-05 3.692e-05 3.445e-05 3.215e-05 3e-05 2.799e-05 2.611e-05 2.436e-05 2.272e-05 2.12e-05 1.978e-05 1.845e-05 1.722e-05 1.606e-05 1.499e-05 1.399e-05 1.305e-05 1.218e-05 1.136e-05 1.06e-05 9.89e-06 9.22e-06 8.59e-06 8.01e-06 7.47e-06 6.96e-06 6.49e-06 6.05e-06 5.64e-06 5.26e-06 4.9e-06 4.57e-06 4.26e-06 3.97e-06 3.7e-06 3.45e-06 3.22e-06 3e-06 2.8e-06 2.61e-06 2.43e-06 2.27e-06 2.11e-06 1.97e-06 1.84e-06 1.71e-06 1.6e-06 1.49e-06 1.39e-06 1.29e-06 1.21e-06 1.12e-06 1.05e-06 9.8e-07 9.1e-07 8.5e-07 7.9e-07 7.4e-07 6.9e-07 6.4e-07 6e-07 5.6e-07 5.2e-07 4.8e-07 S 4.5e-07}
    blue {curve x360 0.0006061 C 0.00068088 0.00076515 0.00086001 0.00096659 0.001086 0.00122059 0.00137273 0.00154358 0.00173429 0.001946 0.00217778 0.00243581 0.00273195 0.00307806 0.003486 0.00397523 0.00454088 0.00515832 0.00580291 0.00645 0.00708322 0.00774549 0.00850115 0.00941454 0.01054999 0.0119658 0.01365587 0.01558805 0.01773015 0.02005001 0.02251136 0.02520288 0.02827972 0.03189704 0.03621 0.04143771 0.04750372 0.05411988 0.06099803 0.06785001 0.07448632 0.08136156 0.08915364 0.09854048 0.1102 0.1246133 0.1417017 0.16130351 0.1832568 0.20739999 0.23369209 0.26261139 0.29477459 0.33079851 0.37130001 0.4162091 0.4654642 0.51969481 0.5795303 0.64560002 0.71848381 0.79671329 0.87784588 0.95943898 1.0390501 1.11536729 1.18849707 1.25812328 1.32392955 1.38559997 1.44263518 1.49480355 1.54219031 1.58488071 1.62295997 1.65640485 1.68529594 1.70987451 1.73038209 1.74705994 1.76004458 1.76962328 1.77626371 1.78043342 1.78260004 1.78296816 1.78169978 1.77919817 1.7758671 1.77210998 1.76825893 1.76403904 1.7589438 1.75246632 1.74409997 1.73355949 1.7208581 1.70593691 1.68873715 1.66919994 1.64752865 1.62341273 1.59602225 1.56452799 1.52810001 1.4861114 1.43952155 1.38987994 1.33873618 1.28763998 1.23742235 1.18782425 1.13876104 1.09014797 1.04190004 0.99419761 0.94734728 0.90145308 0.8566193 0.81295007 0.77051729 0.7294448 0.68991357 0.65210491 0.61619997 0.58232862 0.55041617 0.52033758 0.49196729 0.46518001 0.4399246 0.41618359 0.39388219 0.3729459 0.35330001 0.33485779 0.31755209 0.30133751 0.28616861 0.27200001 0.25881711 0.2464838 0.2347718 0.2234533 0.2123 0.20116919 0.19011959 0.1792254 0.1685608 0.1582 0.1481383 0.1383758 0.1289942 0.1200751 0.1117 0.1039048 0.09666748 0.08998272 0.08384531 0.07824999 0.07320899 0.06867816 0.06456784 0.06078835 0.05725001 0.05390435 0.05074664 0.04775276 0.04489859 0.04216 0.03950728 0.03693564 0.03445836 0.03208872 0.02984 0.02771181 0.02569444 0.02378716 0.02198925 0.0203 0.01871805 0.01724036 0.01586364 0.01458461 0.0134 0.01230723 0.01130188 0.01037792 0.00952931 0.00875 0.0080352 0.0073816 0.0067854 0.0062428 0.00575 0.0053036 0.0048998 0.0045342 0.0042024 0.0039 0.0036232 0.0033706 0.0031414 0.0029348 0.00275 0.0025852 0.0024386 0.0023094 0.0021968 0.0021 0.00201773 0.0019482 0.0018898 0.00184093 0.0018 0.00176627 0.0017378 0.0017112 0.00168307 0.00165 0.00161013 0.0015644 0.0015136 0.00145853 0.0014 0.00133667 0.00127 0.001205 0.00114667 0.0011 0.0010688 0.0010494 0.0010356 0.0010212 0.001 0.00096864 0.00092992 0.00088688 0.00084256 0.0008 0.00076096 0.00072368 0.00068592 0.00064544 0.0006 0.00054787 0.0004916 0.0004354 0.00038347 0.00034 0.00030725 0.00028316 0.00026544 0.00025181 0.00024 0.00022955 0.00022064 0.00021196 0.00020219 0.00019 0.00017421 0.00015564 0.00013596 0.00011685 0.0001 8.613e-05 7.46e-05 6.5e-05 5.693e-05 5e-05 4.416e-05 3.948e-05 3.572e-05 3.264e-05 3e-05 2.765e-05 2.556e-05 2.364e-05 2.181e-05 2e-05 1.813e-05 1.62e-05 1.42e-05 1.213e-05 1e-05 7.73e-06 5.4e-06 3.2e-06 1.33e-06 0 0 0 0 0 0 0 0 S 0}
    alpha {}}
  name ColorLookup4
  label "CIE 1931 2 Degree Standard Observer\n360nm to 830nm"
  xpos -700
  ypos -1030
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeLineOfPurples
  xpos -700
  ypos -897
  disable {{!parent.draw_line_of_purples}}
 }
 Fill {
  color {0 0 0 1}
  name Disable_SpectralLocus
  xpos -700
  ypos -826
  disable {{parent.draw_spectral_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePlanckianLocus
  xpos -700
  ypos -658
  disable {{!parent.draw_planckian_locus}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut
  xpos -700
  ypos -489
  disable {{!parent.draw_pointers_gamut}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergePointerGamut_Samples
  xpos -700
  ypos -417
  disable {{!draw_pointers_samples}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeMacbeth
  xpos -700
  ypos -273
  disable {{!parent.draw_macbeth_chart}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutGrid
  xpos -700
  ypos -81
  disable {{!parent.gamut_grid}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutA
  xpos -700
  ypos 255
  disable {{!parent.gamut_a}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutB
  xpos -700
  ypos 279
  disable {{!parent.gamut_b}}
 }
 Merge2 {
  inputs 2
  bbox B
  name MergeGamutC
  xpos -700
  ypos 303
  disable {{!parent.gamut_c}}
 }
 Dot {
  name Dot2
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 450
 }
set N3d8bcc00 [stack 0]
 Dot {
  name Dot5
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 450
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace6
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos -590
  ypos 488
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression5
  label "CIE Yxy to CIELuv"
  xpos -590
  ypos 536
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot11
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -556
  ypos 618
 }
push $N3d8bcc00
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  invert true
  name ColorMatrix1
  label "XYZ to working"
  xpos -700
  ypos 488
  disable {{!map_overlays_to_input_gamut}}
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_grid\" iterate pixelWise b2e7b5f8a89bdb0629aa8cc2eae387ef3436f24cb0af642eeba41235874506c4 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 6 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== \"draw_axes\" Bool 1 AA== \"grid_color\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== 6 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 \"draw_axes\" 1 1 \"grid_color\" 4 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_grid : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n  bool draw_axes;\n  float4 grid_color;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  void draw_grid() \{\n    // grid width in pixels. expresses a 0 to 1 range in CIE xy\n    float grid_width = 1.0f * outsize + offset;\n    // draw grid lines\n    float i = offset;\n    while (i <= grid_width && i > 0.0f) \{\n      write_aa(offset, i, grid_color);\n      write_aa(i, offset, grid_color);\n      i += 1.0;\n    \}\n    // cross-hatching interval in pixels\n    float hatch_interval = (grid_width - offset) * 0.1f;\n    // cross-hatch length in pixels\n    float hatch_width = outsize * 0.01f;\n    i = offset;\n    while (i <= grid_width) \{\n      i += hatch_interval;\n      float j = 0.0;\n      while (j <= hatch_width/2) \{\n        write_aa(offset+j, i, grid_color);\n        write_aa(offset-j, i, grid_color);\n        write_aa(i, offset+j, grid_color);\n        write_aa(i, offset-j, grid_color);\n        j += 1.0;\n      \}\n    \}\n  \}\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n\n    // draw CIExy coordinate system axes\n    if (draw_axes && pos.x == 0 && pos.y == 0) \{\n      draw_grid();\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_grid_padding {{parent.PlotChromaticities.PlotChromaticity_padding}}
  PlotChromaticity_grid_left_margin {{parent.PlotChromaticities.PlotChromaticity_left_margin}}
  PlotChromaticity_grid_tolerance 0.8
  PlotChromaticity_grid_antialias true
  PlotChromaticity_grid_draw_axes {{parent.coordinate_system}}
  PlotChromaticity_grid_grid_color {0.15 0 0.005 1}
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotInput2
  xpos -700
  ypos 608
 }
 FrameHold {
  firstFrame 1
  name FrameHold1
  xpos -700
  ypos 680
  cached true
 }
 Dot {
  name Dot3
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos -666
  ypos 762
 }
 Input {
  inputs 0
  name Input
  xpos 620
  ypos -1426
 }
 AddChannels {
  name AddChannels1
  xpos 620
  ypos -1360
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat
  xpos 620
  ypos -1282
  disable {{!parent.resample_input}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name CropBBox
  xpos 620
  ypos -1257
 }
 Dot {
  name Dot7
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 162
 }
set N3d84d400 [stack 0]
 Constant {
  inputs 0
  channels rgb
  color {0 0 0 1}
  format "256 256 0 0 256 256 1 square_256"
  name Constant2
  xpos 400
  ypos 38
  postage_stamp false
 }
 Reformat {
  type "to box"
  box_width {{parent.resolution}}
  box_height {{box_width}}
  box_fixed true
  box_pixel_aspect {{input.pixel_aspect}}
  resize distort
  filter impulse
  name OutputFormat1
  xpos 400
  ypos 64
  disable {{!parent.resample_input}}
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name Switch1
  xpos 400
  ypos 158
 }
 Fill {
  output rgb
  color 0.18
  name SampleColor
  xpos 290
  ypos 158
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop2
  xpos 290
  ypos 184
 }
 Fill {
  output alpha
  name Fill3
  xpos 290
  ypos 224
 }
 Dot {
  name Dot6
  xpos 324
  ypos 282
 }
set N3d7f3400 [stack 0]
 ColorMatrix {
  matrix {
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
      {{parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix} {parent.GamutToXYZ.ColorMatrix.matrix}}
    }
  name ColorMatrix4
  label "working to XYZ"
  xpos 180
  ypos 272
 }
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace1
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 180
  ypos 320
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression6
  label "CIE Yxy to CIELuv"
  xpos 180
  ypos 368
  disable {{!parent.diagram}}
 }
push $N3d7f3400
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity_sample\" iterate pixelWise 20e14b615a937bac78c1a771cbdfd10cc7c5fb6c487f65d0bb2d6633e404b958 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 3 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== 3 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity_sample : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  void process(int2 pos) \{\n    // only process the first pixel\n    if (pos.x > 0 && pos.y > 0) return;\n\n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    int2 p = int2(round(out_coord.x), round(out_coord.y));\n    if (dst.bounds.inside(p.x, p.y)) \{\n      for (int k=0; k<3; k++) \{\n        dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n      \}\n      dst(p.x, p.y, 3) = 1.0f;\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_sample_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_sample_left_margin {{parent.left_margin}}
  PlotChromaticity_sample_tolerance 1
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities1
  xpos 290
  ypos 368
 }
 Dot {
  name Dot22
  xpos 324
  ypos 450
 }
set N3d7f2000 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048}}
  name Dilate1
  label "\[value size]"
  xpos 290
  ypos 488
 }
set N3d7f1c00 [stack 0]
 Dilate {
  channels rgba
  size {{Output.width/2048*2}}
  name Dilate2
  label "\[value size]"
  xpos 180
  ypos 488
 }
push $N3d7f2000
 Dot {
  name Dot21
  xpos -6
  ypos 450
 }
 FilterErode {
  channels rgba
  size {{-Output.width/2048/5}}
  filter triangle
  name FilterErode1
  label "\[value size]"
  xpos -40
  ypos 489
 }
set N3d7f1000 [stack 0]
 Dilate {
  channels rgba
  size {0 {parent.Dilate3.size.w}}
  name Dilate4
  label "\[value size]"
  xpos -40
  ypos 584
 }
push $N3d7f1000
 Dilate {
  channels rgba
  size {{Output.width*plus_size/100} 0}
  name Dilate3
  label "\[value size]"
  xpos 70
  ypos 488
  addUserKnob {20 User}
  addUserKnob {7 plus_size R 0 4}
  plus_size 0.8
 }
 Merge2 {
  inputs 2
  operation screen
  bbox B
  name Merge9
  xpos 70
  ypos 591
 }
 Merge2 {
  inputs 2
  operation stencil
  bbox B
  name Merge10
  xpos 180
  ypos 591
 }
 Group {
  name HueRotate
  xpos 180
  ypos 639
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -24
  }
  Unpremult {
   name Unpremult1
   xpos -40
   ypos 15
  }
  Colorspace {
   colorspace_out HSV
   name Colorspace1
   xpos -40
   ypos 72
  }
  Add {
   channels {rgba.red -rgba.green -rgba.blue none}
   value 0.5
   name Add1
   xpos -40
   ypos 111
  }
  Fill {
   output {-rgba.red -rgba.green rgba.blue none}
   name Fill1
   xpos -40
   ypos 147
  }
  Colorspace {
   colorspace_in HSV
   name Colorspace2
   xpos -40
   ypos 183
  }
  Premult {
   name Premult1
   xpos -40
   ypos 231
  }
  Output {
   name Output1
   xpos -40
   ypos 302
  }
 end_group
push $N3d7f1c00
 Merge2 {
  inputs 2
  bbox B
  name Merge8
  xpos 290
  ypos 638
 }
 Dot {
  name Dot20
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 324
  ypos 690
 }
push $N3d84d400
 Dot {
  name Dot1
  label " "
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 162
 }
 Group {
  name GamutToXYZ
  label "\[if \{\[value invert]\} \{return \"XYZ to \[value gamut]\"\} else \{return \"\[value gamut] to XYZ\"\}]\n\n"
  xpos 730
  ypos 247
  addUserKnob {20 GamutToXYZ_tab l GamutToXYZ}
  addUserKnob {4 gamut t "Choose gamut" M {XYZ ACES ACEScg "Filmlight E-Gamut" Rec709 Rec2020 P3D60 P3D65 P3DCI "Arri AlexaWideGamut" REDDRAGONcolor REDDRAGONcolor2 REDcolor REDcolor2 REDcolor3 REDcolor4 REDWideGamutRGB "GoPro Protune Native" CanonCinemaGamut SonySGamut SonySGamut3Cine PanasonicVGamut "DJI D-Gamut" "Fujifilm F-Gamut" BMDFilmV1 BMD4kFilmV1 BMD4kFilmV3 BMD46kFilmV1 BMD46kFilmV3 BMDWideGamutV4 "AdobeRGB\t" AdobeWideGamutRGB ROMM RIMM ERIMM ProPhotoRGB RusselRGB SharpRGB AppleRGB BestRGB}}
  gamut ACES
  addUserKnob {6 invert +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {26 chromaticity_coordinates_label l " " T "<b>Chromaticity Coordinates</b>"}
  addUserKnob {41 rxy T ColorMatrix.rxy}
  addUserKnob {41 gxy T ColorMatrix.gxy}
  addUserKnob {41 bxy T ColorMatrix.bxy}
  addUserKnob {41 wxy T ColorMatrix.wxy}
  addUserKnob {41 matrix T ColorMatrix.matrix}
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos -10
  }
  ColorMatrix {
   matrix {
       {{curve(which) 1 0.9525524378 0.6624541879 0.7053968906 0.4123907983 0.6369580626 0.5049495697 0.4865709841 0.4451698363 0.6380076408 0.5070186853 0.4462202489 0.4300414324 0.4581649601 0.4878340662 0.4517004192 0.7352752686 0.5022571683 0.7160496712 0.7064827085 0.5990839601 0.6796444654 0.6481720209 0.6369580626 0.6390493512 0.6141571999 0.3724023998 0.60689044 0.4017650783 0.6065810919 0.5766690373 0.7165006995 0.797760427 0.797760427 0.797760427 0.7976718545 0.7015837431 0.8156226277 0.4496616423 0.6318944097} {curve(which) 0 0 0.1340042055 0.1640413404 0.3575843275 0.1446169019 0.2646814585 0.2656676769 0.2771343887 0.2147038579 0.3587769568 0.3157556653 0.3700728714 0.3832037449 0.3432727158 0.3178463876 0.06860940903 0.2929667532 0.1296834797 0.1288010478 0.2489254922 0.1522114277 0.1940581352 0.1446169019 0.1578372866 0.2825684249 0.4324877858 0.2193847299 0.4560420811 0.2203479856 0.1855582297 0.1010205746 0.1351858526 0.1351858526 0.1351858526 0.1351878047 0.1554162204 0.04716260359 0.3162561059 0.2053879201} {curve(which) 0 9.367863095e-05 0.1561876982 0.08101774752 0.180480808 0.1688809693 0.1830150485 0.1982172877 0.1722826511 0.09774444997 0.0868505761 0.190669477 0.152531758 0.1112773567 0.1215386018 0.1830992699 0.1465712637 0.1552320272 0.1047228053 0.1151721701 0.1024464965 0.1186000481 0.108225815 0.1688809693 0.1516760886 0.05183707923 0.1436725408 0.124180764 0.09264881909 0.123526901 0.1882286519 0.1467743814 0.03134934977 0.03134934977 0.03134934977 0.03133957833 0.09979832917 0.1372147948 0.1845382005 0.1270133406}}
       {{curve(which) 0 0.3439664543 0.2722287476 0.2801307142 0.2126390189 0.2627002299 0.237623319 0.2289745659 0.209491685 0.2919537723 0.2207257152 0.1942579001 0.2022213936 0.1694435924 0.2289056629 0.2119505703 0.2866941094 0.1387997568 0.2612613738 0.2709796727 0.2150758505 0.2606855333 0.2830046713 0.2627002299 0.1743051857 0.2365771234 0.1383759677 0.1973138005 0.1721783578 0.2680045366 0.2973450124 0.258728236 0.2880711257 0.2880711257 0.2880711257 0.2880405784 0.3152042925 0.3790788651 0.2446159422 0.2276017666} {curve(which) 1 0.7281661034 0.6740817428 0.8202066422 0.7151686549 0.6779980659 0.6891706586 0.6917385459 0.7215952873 0.8238410354 0.839184761 0.7385566831 0.7585275769 0.8648257852 0.7808576822 0.7230190039 0.8429791331 0.910841465 0.8696421385 0.786606431 0.8850684762 0.7748944759 0.8131960034 0.6779980659 0.951146543 0.8896810412 0.911518693 0.943950057 0.8553914428 0.8326833844 0.6273635626 0.7246823311 0.7118432522 0.7118432522 0.7118432522 0.7118694782 0.6648360491 0.5769088268 0.6720442176 0.7383946776} {curve(which) 0 -0.07213255018 0.05368951708 -0.1003373638 0.07219231874 0.05930171534 0.07320601493 0.07928691059 0.06891305745 -0.1157948226 -0.05991046131 0.06718540192 0.03925102949 -0.03426937759 -0.009763340466 0.06503042579 -0.1296732277 -0.04964122549 -0.1309035122 -0.05758608505 -0.1001443192 -0.03558001295 -0.09620071948 0.05930171534 -0.1254517138 -0.1262581497 -0.04989464581 -0.1412638426 -0.02756982669 -0.1006879359 0.07529145479 0.01658944227 8.565396274e-05 8.565396274e-05 8.565396274e-05 8.991353388e-05 0.01995966583 0.04401229322 0.08333983272 0.0340035744}}
       {{curve(which) 0 -3.863927134e-08 -0.005574660841 -0.1037815213 0.01933082007 0 0 0 0 0.0027982709 -0.0544523783 -0.04792318866 -0.0176958181 -0.1061859056 -0.02100777067 -0.01945115253 -0.07968087494 0.07801423222 -0.009676366113 -0.009677864611 -0.03206583485 -0.009310216643 -0.01825834997 0 -0.11669112 -0.02325225808 -0.1602820009 -0.1427432895 -0.10720893 -0.02941203304 0.02703136392 -2.906408625e-08 -3.236030111e-08 -3.236030111e-08 -3.236030111e-08 0 0 -0.01229703799 0.02518104948 0} {curve(which) 0 0 0.004060741514 -0.07290724665 0.1191947311 0.0280726999 0.0449459292 0.04511339962 0.04706057906 -0.06703422964 -0.0003228379355 -0.0002844714036 0.08768811822 0.02554347552 0.01782695204 0.01650637016 -0.3473432064 -0.3148325086 -0.2364816219 0.004600019194 -0.02765839547 -0.004612449091 -0.08316776901 0.0280726999 -0.5518454909 -0.4897170365 -0.171635136 -0.4278847873 0.07809129357 -0.08659287542 0.07068887353 0.05121183768 1.2621717e-08 1.2621717e-08 1.2621717e-08 -1.262213711e-08 0.04317118227 0.01672476344 0.1411857158 0.01001892332} {curve(which) 1 1.008825183 1.010339141 1.265746474 0.950532198 1.060985088 0.9638792276 1.043944359 0.9073553085 1.153293729 1.063571215 1.057001948 0.9388025999 1.089437366 1.01197505 1.011739731 1.51608181 1.325875998 1.335215807 1.094135642 1.148782015 1.102980375 1.190483928 1.060985088 1.745692492 1.590125084 1.409072995 1.65968585 1.118175387 1.205062628 0.9913375378 0.7738927603 0.8251045942 0.8251045942 0.8251045942 0.8248898983 0.8782252669 0.9955722094 0.9226909876 0.8150856495}}
     }
   invert {{parent.invert}}
   name ColorMatrix
   label "RGB to XYZ"
   xpos -40
   ypos 32
   addUserKnob {20 Gamut}
   addUserKnob {3 which}
   which {{parent.gamut}}
   addUserKnob {12 rxy}
   rxy {{curve(which) 1 0.7347 0.713 0.8 0.64 0.708 0.68 0.68 0.68 0.684 0.7530442228 0.7530444911 0.6997470013 0.8786825105 0.7011810359 0.7011805919 0.780308 0.69848046 0.74 0.73 0.766 0.73 0.71 0.708 0.9173 0.7422 1.0625 0.9175 0.8608 0.7177 0.64 0.7347 0.7347 0.7347 0.7347 0.734699 0.69 0.6898 0.625 0.7351916376} {curve(which) 0 0.2653 0.293 0.3177 0.33 0.292 0.32 0.32 0.32 0.313 0.3278305767 0.3278310295 0.3290469303 0.3249640074 0.3290141556 0.3290136991 0.304253 0.19302645 0.27 0.28 0.275 0.28 0.31 0.292 0.2502 0.2859 0.3948 0.2983 0.3689 0.3171 0.33 0.2653 0.2653 0.2653 0.2653 0.265301 0.31 0.3206 0.34 0.2648083624}}
   addUserKnob {12 gxy}
   gxy {{curve(which) 0 0 0.165 0.18 0.3 0.17 0.265 0.265 0.265 0.221 0.2995702285 0.2995704905 0.304264039 0.3008887144 0.3006003047 0.3006003955 0.121595 0.32955538 0.17 0.14 0.225 0.165 0.21 0.17 0.2833 0.414 0.3689 0.2983 0.3282 0.228 0.21 0.1152 0.1596 0.1596 0.1596 0.159597 0.18 0.0736 0.28 0.2153361345} {curve(which) 1 1 0.83 0.9 0.6 0.797 0.69 0.69 0.69 0.848 0.700699322 0.7006994156 0.6236411451 0.6790547558 0.6837888343 0.6837888243 1.493994 1.02459662 1.14 0.855 0.8 0.84 0.88 0.797 1.7072 1.3035 0.7775 1.2835 0.6156 0.8616 0.71 0.8264 0.8404 0.8404 0.8404 0.840403 0.77 0.9003 0.595 0.7741596639}}
   addUserKnob {12 bxy}
   bxy {{curve(which) 0 0.0001 0.128 0.065 0.15 0.131 0.15 0.15 0.15 0.0861 0.07964206674 0.1450115843 0.1349139613 0.09539869461 0.1081544556 0.1453319462 0.095612 0.10844263 0.08 0.1 0.089 0.1 0.09 0.131 0.0856 0.0342 0.0956 0.0756 0.0783 0.1006 0.15 0.1566 0.0366 0.0366 0.0366 0.036598 0.1 0.1166 0.155 0.1301229508} {curve(which) 0 -0.077 0.044 -0.0805 0.06 0.046 0.06 0.06 0.06 -0.102 -0.05493795109 0.05109712509 0.03471744128 -0.02937932683 -0.008688175787 0.05161680362 -0.084589 -0.03467857 -0.1 -0.05 -0.087 -0.03 -0.08 0.046 -0.0708 -0.0833 -0.0332 -0.086 -0.0233 -0.082 0.06 0.0177 0.0001 0.0001 0.0001 0.000105 0.02 0.0374 0.07 0.03483606557}}
   addUserKnob {12 wxy}
   wxy {{curve(which) 0.33333333 0.32168 0.32168 0.3127 0.3127 0.3127 0.32168 0.3127 0.314 0.3127 0.3216831877 0.3216832104 0.3216832894 0.3216832894 0.3216832104 0.3216832894 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3127 0.3135 0.3135 0.3135 0.3127 0.3127 0.3127 0.3127 0.3457 0.3457 0.3457 0.3457 0.345704 0.33243 0.33333333 0.3127 0.3457} {curve(which) 0.33333333 0.33767 0.33767 0.329 0.329 0.329 0.33767 0.329 0.351 0.329 0.337673316 0.3376736101 0.3376734472 0.3376734472 0.3376736101 0.3376734472 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.329 0.3305 0.3305 0.3305 0.329 0.329 0.329 0.329 0.3585 0.3585 0.3585 0.3585 0.35854 0.34744 0.33333333 0.329 0.3585}}
  }
  Output {
   name Output
   xpos -40
   ypos 86
  }
 end_group
 Colorspace {
  colorspace_in CIE-XYZ
  primary_in "Adobe (1998)"
  colorspace_out CIE-Yxy
  name Colorspace2
  label "\[value colorspace_in] -> \[value colorspace_out]"
  xpos 730
  ypos 296
 }
 Expression {
  expr0 r
  expr1 "4*g / ( -2*g + 12*b + 3)"
  expr2 "9*b / ( -2*g + 12*b + 3)"
  name Expression4
  label "CIE Yxy to CIELuv"
  xpos 730
  ypos 344
  disable {{!parent.diagram}}
 }
 Dot {
  name Dot13
  label " Pos"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 764
  ypos 546
 }
push $N3d84d400
 Dot {
  name Dot16
  label " Col"
  note_font "Helvetica Bold"
  note_font_size 24
  note_font_color 0xa5a5a501
  xpos 654
  ypos 450
 }
 BlinkScript {
  inputs 2
  KernelDescription "2 \"PlotChromaticity\" iterate pixelWise 3e86399c7642fe5c35c23528a644f88a8bf13f967de084ae6842f8be55098c6b 3 \"col\" Read Random \"Yxy\" Read Random \"dst\" Write Random 4 \"padding\" Float 1 AAAAAA== \"left_margin\" Float 1 AAAAAA== \"tolerance\" Float 1 AAAAAA== \"antialias\" Bool 1 AA== 4 \"padding\" 1 1 \"left_margin\" 1 1 \"tolerance\" 1 1 \"antialias\" 1 1 2 \"outsize\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> col;\n  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;\n  Image<eWrite, eAccessRandom> dst;\n\nparam:\n  float padding;\n  float left_margin;\n  float tolerance;\n  bool antialias;\n\nlocal:\n  float outsize;\n  float offset;\n\n  void init() \{\n    // calculate output width and height and offset based on padding\n    outsize = float(dst.bounds.height()/padding);\n    // xy offset for margin on lower left corner\n    offset = dst.bounds.height()*left_margin;\n  \}\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write_aa(float x, float y, float4 rgb) \{\n    // skip black pixels\n    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;\n    \n    // size of pixel neighborhood = n*2+1 by n*2+1\n    int n = 2;\n\n    // center of neighborhood\n    int u0 = round(x);\n    int v0 = round(y);\n\n    // skip if center pixel weight is greater than tolerance\n    if ( dst.bounds.inside(u0, v0)) \{\n      if (dst(u0, v0, 3) >= tolerance) return;\n    \}\n\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float4 c0 = dst(u, v); // existing color\n\n          // merge current color sample over existing color sample\n          for (int k=0; k<3; k++) \{\n            dst(u, v, k) = rgb\[k]*w+c0\[k]*(1-w); \n          \}\n\n          // merge current weight over existing weight\n          float w0 = dst(u, v, 3);\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n\n  void process(int2 pos) \{\n    float4 rgba = col(pos.x, pos.y);\n    \n    // Get CIE xy position from Yxy input for current pixel\n    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));\n    \n    // Find output pixel coordinate for this CIE xy pixel value\n    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);\n\n    // For each RGB component, write value from color input to output coordinate\n    if (antialias) \{\n      write_aa(out_coord.x, out_coord.y, rgba);\n    \} else \{\n      // For each RGB component, write value from color input to output coordinate\n      int2 p = int2(round(out_coord.x), round(out_coord.y));\n      if (dst.bounds.inside(p.x, p.y)) \{\n        for (int k=0; k<3; k++) \{\n          dst(p.x, p.y, k) = col(pos.x, pos.y, k);\n        \}\n        dst(p.x, p.y, 3) = 1.0f;\n      \}\n    \}\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  PlotChromaticity_padding {{"parent.diagram ? parent.right_margin*0.8 : parent.right_margin"}}
  PlotChromaticity_left_margin {{parent.left_margin}}
  PlotChromaticity_tolerance 2
  PlotChromaticity_antialias true
  format "2048 2048 0 0 2048 2048 1 square_2K"
  rebuild_finalise ""
  name PlotChromaticities
  xpos 620
  ypos 536
  disable {{!parent.plot_input}}
 }
 Fill {
  color 0
  name BLACK
  tile_color 0x111111ff
  xpos 620
  ypos 591
  disable {{parent.plot_input}}
 }
 Dilate {
  size 10
  name Dilate5
  xpos 620
  ypos 615
 }
 Merge2 {
  inputs 2
  bbox B
  name Merge7
  xpos 620
  ypos 686
  disable {{!parent.enable_sample_color}}
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 620
  ypos 758
 }
 Output {
  name Output
  xpos 620
  ypos 1046
 }
end_group
push $Nc4fe7400
Group {
 name DRT_CAM_Blink2
 label "Input: \[value encoding_in] / \[value primaries_in]\nLimit: \[value primaries_limit] / \[value ssts_luminance.2]nits\nOutput: \[value encoding_out] / \[value primaries_out]\n\[value toneScaleMode]\n\[value camMode]\n\nBodged XYZ_to_LMS_ZCAM matrix\n"
 note_font "Bitstream Vera Sans"
 xpos 627
 ypos 56
 addUserKnob {20 User}
 addUserKnob {26 input_div l Input}
 addUserKnob {4 encoding_in l encoding t "the input log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 "" ""}}
 addUserKnob {4 primaries_in l primaries t "the input primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {4 camMode M {ZCAM "Hellwig 2022"}}
 addUserKnob {4 cat_type l "CAT Type" t "the chromatic adaptation transform to use for converting between white points" M {None "XYZ Scaling" Bradford CAT02 Zhai2018 ""}}
 cat_type Zhai2018
 addUserKnob {26 tonescale_div l Tonescale}
 addUserKnob {4 toneScaleMode l "ToneScale Mode" M {SSTS MMSDC "Daniele Compression Curve" ""}}
 toneScaleMode "Daniele Compression Curve"
 addUserKnob {6 applyTonecurve l "apply Tonecurve" t "toggle the SingleStageToneScale transform" +STARTLINE}
 applyTonecurve true
 addUserKnob {13 ssts_luminance l "SSTS luminance" t "min, mid & peak luminance values in Cd/sqm as parameters for the SSTS"}
 ssts_luminance {1e-06 10 100}
 addUserKnob {26 ssts_luminance_label l " " -STARTLINE T "min / mid / peak"}
 addUserKnob {6 apply_highlight_desat l "apply highlight desat" t "toggle de-saturating the highlights above SSTS mid luminance based on how much the SSTS has compressed them" +STARTLINE}
 apply_highlight_desat true
 addUserKnob {7 desat_highlights l "desat highlights" t "the amount of desaturation applied to the highlights" R 0 5}
 desat_highlights 0.8
 addUserKnob {26 gamut_mapping_div l "Gamut Mapping"}
 addUserKnob {6 apply_gamut_compression l "apply gamut compression " t "toggle the gamut compression towards the limiting primaries" +STARTLINE}
 apply_gamut_compression true
 addUserKnob {4 primaries_limit l primaries t "the limiting primaries of the gamut to which to compress to" M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI ""}}
 primaries_limit sRGB/Rec.709-D65
 addUserKnob {6 discount_illuminant l "discount illuminant (Zhai2018 only)" t "disable the degree of adaptation model for the Zhai2018 CAT\nthis is only effective if the limiting primaries do not use a D65 white point" -STARTLINE}
 discount_illuminant true
 addUserKnob {7 cusp_mid_blend l "cusp to mid blend" t "blend the lightness (J) of the focal point of the compression between the lightness of the gamut cusp at the given hue (0.0)  and the mid luminance of the SSTS (1.0)"}
 cusp_mid_blend 0.5
 addUserKnob {26 cusp_mid_blend_label l " " -STARTLINE T "gamut cusp (0) to SSTS mid (1)"}
 addUserKnob {7 focus_distance l "focus distance" t "the distance from the achromatic axis of the focal point of the compression where 0.0 is at the achromatic axis and 1.0 the distance of the gamut cusp at the given hue but on the opposite side of the achomatic axis" R 0 2}
 focus_distance 0.5
 addUserKnob {26 focus_depth_label l " " -STARTLINE T "achromatic (0) to cusp opposite (1)"}
 addUserKnob {13 compression_params l compression t "the threshold, limit and power parameters for the PowerP compression function\nvalues below the threshold will not be compressed and values at the limit will be compressed towards the gamut boundary while the power values defines the shape of the curve"}
 compression_params {0.75 1.2 1.2}
 addUserKnob {26 compression_params_label l " " -STARTLINE T "threshold / limit / power"}
 addUserKnob {7 smooth_cusps l "smooth cusps" t "the amount by how much to smooth the edges and corners of the limiting gamut cube, except the black & white corners."}
 addUserKnob {3 solve_precision l "solve precision" t "the number of iterations used for finding the gamut boundary using the interval bisection method"}
 solve_precision 10
 addUserKnob {3 inverse_solver_iterations l "inverse solver iterations" t "the number of iterations used for finding the original J & M values when applying the inverse gamut compression"}
 inverse_solver_iterations 10
 addUserKnob {26 output_div l Output}
 addUserKnob {4 encoding_out l encoding t "the output log or gamma encoding" M {Linear ACEScct sRGB BT.1886 "Gamma 2.6" ST2084 ""}}
 addUserKnob {4 primaries_out l primaries t "the output primaries and white point" -STARTLINE M {AP0-ACES AP1-ACES sRGB/Rec.709-D65 Rec.2020-D65 P3-D65 P3-DCI "" ""}}
 addUserKnob {4 viewing_conditions l "viewing conditions" t "the ZCAM viewing conditions" M {dark dim average ""}}
 addUserKnob {7 reference_luminance l "reference luminance" t "the ZCAM reference luminance in Cd/sqm" R 0 200}
 reference_luminance 100
 addUserKnob {7 background_luminance l "background luminance" t "the ZCAM background luminance in Cd/sqm" R 0 100}
 background_luminance 10
 addUserKnob {6 clamp_output l "clamp output" t "clamp the output values between 0,0 and 1.0" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 _1 l "" +STARTLINE T "Daniele Curve Params"}
 addUserKnob {41 DRT_CAM_Kernel_n l n T BlinkScript1.DRT_CAM_Kernel_n}
 addUserKnob {41 DRT_CAM_Kernel_nr l nr T BlinkScript1.DRT_CAM_Kernel_nr}
 addUserKnob {41 DRT_CAM_Kernel_g l g T BlinkScript1.DRT_CAM_Kernel_g}
 addUserKnob {41 DRT_CAM_Kernel_w l w T BlinkScript1.DRT_CAM_Kernel_w}
 addUserKnob {41 DRT_CAM_Kernel_t_1 l t_1 T BlinkScript1.DRT_CAM_Kernel_t_1}
 addUserKnob {26 ""}
 addUserKnob {26 direction_div l Direction}
 addUserKnob {6 invert t "apply the pseudo-inverse transform" +STARTLINE}
 addUserKnob {26 blink_kernel_div l "Blink Kernel"}
 addUserKnob {6 use_gpu l "Use GPU if available" +STARTLINE}
 use_gpu true
}
 ColorMatrix {
  inputs 0
  matrix {
      {0.368792 0.531205 0.103642}
      {-0.193458 1.03225 0.131287}
      {-0.0348077 0.283972 0.671427}
    }
  name preMatrix
  xpos -624
  ypos -256
 }
 Input {
  inputs 0
  name Input1
  xpos -908
  ypos -292
 }
set N3d725000 [stack 0]
 Colorspace {
  colorspace_out CIE-XYZ
  name Colorspace2
  xpos -1067
  ypos -213
 }
push $N3d725000
 BlinkScript {
  kernelSourceFile /Users/afry/GitHub/output-transforms-dev/display-transforms/nuke/CAM_DRT_v015.blink
  recompileCount 486
  ProgramGroup 1
  KernelDescription "2 \"DRT_CAM_Kernel\" iterate pixelWise 38aed0c807c9a95bb4194d3a79e251d9703bf74b46a94a25e0ab4286d3e072b9 2 \"src\" Read Point \"dst\" Write Point 53 \"encodingIn\" Int 1 AAAAAA== \"primariesIn\" Int 1 AAAAAA== \"toneScaleMode\" Int 1 AAAAAA== \"camMode\" Int 1 AAAAAA== \"catType\" Int 1 AAAAAA== \"discountIlluminant\" Bool 1 AA== \"referenceLuminance\" Float 1 AAAAAA== \"backgroundLuminance\" Float 1 AAAAAA== \"viewingConditions\" Int 1 AAAAAA== \"applyTonecurve\" Bool 1 AA== \"sstsLuminance\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"applyHighlightDesat\" Bool 1 AA== \"desatHighlights\" Float 1 AAAAAA== \"primariesLimit\" Int 1 AAAAAA== \"applyGamutCompression\" Bool 1 AA== \"cuspMidBlend\" Float 1 AAAAAA== \"focusDistance\" Float 1 AAAAAA== \"compressionFuncParams\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"smoothCusps\" Float 1 AAAAAA== \"boundarySolvePrecision\" Int 1 AAAAAA== \"inverseSolverIterations\" Int 1 AAAAAA== \"encodingOut\" Int 1 AAAAAA== \"primariesOut\" Int 1 AAAAAA== \"clampOutput\" Bool 1 AA== \"invert\" Bool 1 AA== \"XYZ_to_LMS_ZCAM\" Float 9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_rho\" Float 1 AAAAAA== \"Lp\" Float 1 AAAAAA== \"su\" Float 1 AAAAAA== \"c0\" Float 1 AAAAAA== \"cs\" Float 1 AAAAAA== \"c1\" Float 1 AAAAAA== \"p\" Float 1 AAAAAA== \"w1\" Float 1 AAAAAA== \"s1\" Float 1 AAAAAA== \"ex\" Float 1 AAAAAA== \"eb\" Float 1 AAAAAA== \"e0\" Float 1 AAAAAA== \"s0\" Float 1 AAAAAA== \"fl\" Float 1 AAAAAA== \"dch\" Float 1 AAAAAA== \"sat\" Float 1 AAAAAA== \"mmScaleFactor\" Float 1 AAAAAA== \"n\" Float 1 AAAAAA== \"nr\" Float 1 AAAAAA== \"g\" Float 1 AAAAAA== \"w\" Float 1 AAAAAA== \"t_1\" Float 1 AAAAAA== \"XYZ_w\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"L_A\" Float 1 AAAAAA== \"Y_b\" Float 1 AAAAAA== \"surround\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"discount_illuminant\" Bool 1 AA== 53 \"encodingIn\" 1 1 \"primariesIn\" 1 1 \"toneScaleMode\" 1 1 \"camMode\" 1 1 \"catType\" 1 1 \"discountIlluminant\" 1 1 \"referenceLuminance\" 1 1 \"backgroundLuminance\" 1 1 \"viewingConditions\" 1 1 \"applyTonecurve\" 1 1 \"sstsLuminance\" 3 1 \"applyHighlightDesat\" 1 1 \"desatHighlights\" 1 1 \"primariesLimit\" 1 1 \"applyGamutCompression\" 1 1 \"cuspMidBlend\" 1 1 \"focusDistance\" 1 1 \"compressionFuncParams\" 3 1 \"smoothCusps\" 1 1 \"boundarySolvePrecision\" 1 1 \"inverseSolverIterations\" 1 1 \"encodingOut\" 1 1 \"primariesOut\" 1 1 \"clampOutput\" 1 1 \"invert\" 1 1 \"XYZ_to_LMS_ZCAM\" 9 1 \"zcam_rho\" 1 1 \"Lp\" 1 1 \"su\" 1 1 \"c0\" 1 1 \"cs\" 1 1 \"c1\" 1 1 \"p\" 1 1 \"w1\" 1 1 \"s1\" 1 1 \"ex\" 1 1 \"eb\" 1 1 \"e0\" 1 1 \"s0\" 1 1 \"fl\" 1 1 \"dch\" 1 1 \"sat\" 1 1 \"mmScaleFactor\" 1 1 \"n\" 1 1 \"nr\" 1 1 \"g\" 1 1 \"w\" 1 1 \"t_1\" 1 1 \"XYZ_w\" 3 1 \"L_A\" 1 1 \"Y_b\" 1 1 \"surround\" 3 1 \"discount_illuminant\" 1 1 71 \"HALF_MIN\" Float 1 1 AAAAAA== \"HALF_MAX\" Float 1 1 AAAAAA== \"CAT_CAT16\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"zcam_L_A\" Float 1 1 AAAAAA== \"zcam_F_b\" Float 1 1 AAAAAA== \"zcam_F_L\" Float 1 1 AAAAAA== \"zcam_cb\" Float 1 1 AAAAAA== \"zcam_cg\" Float 1 1 AAAAAA== \"zcam_c1\" Float 1 1 AAAAAA== \"zcam_c2\" Float 1 1 AAAAAA== \"zcam_c3\" Float 1 1 AAAAAA== \"zcam_eta\" Float 1 1 AAAAAA== \"zcam_luminance_shift\" Float 1 1 AAAAAA== \"zcam_viewing_conditions_coeff\" Float 1 1 AAAAAA== \"cat_adaptDegree\" Float 1 1 AAAAAA== \"st2084_m_1\" Float 1 1 AAAAAA== \"st2084_m_2\" Float 1 1 AAAAAA== \"st2084_c_1\" Float 1 1 AAAAAA== \"st2084_c_2\" Float 1 1 AAAAAA== \"st2084_c_3\" Float 1 1 AAAAAA== \"st2084_m_1_d\" Float 1 1 AAAAAA== \"st2084_m_2_d\" Float 1 1 AAAAAA== \"st2084_L_p\" Float 1 1 AAAAAA== \"ssts_min_stop_sdr\" Float 1 1 AAAAAA== \"ssts_max_stop_sdr\" Float 1 1 AAAAAA== \"ssts_min_stop_rrt\" Float 1 1 AAAAAA== \"ssts_max_stop_rrt\" Float 1 1 AAAAAA== \"ssts_min_lum_sdr\" Float 1 1 AAAAAA== \"ssts_max_lum_sdr\" Float 1 1 AAAAAA== \"ssts_min_lum_rrt\" Float 1 1 AAAAAA== \"ssts_max_lum_rrt\" Float 1 1 AAAAAA== \"ssts_n_knots_low\" Int 1 1 AAAAAA== \"ssts_n_knots_high\" Int 1 1 AAAAAA== \"ssts_m1\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_minTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_maxTable\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsLow\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_bendsHigh\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_min_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_mid_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_max_pt\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_knotIncLow\" Float 1 1 AAAAAA== \"ssts_knotIncHigh\" Float 1 1 AAAAAA== \"ssts_pctLow\" Float 1 1 AAAAAA== \"ssts_pctHigh\" Float 1 1 AAAAAA== \"ssts_coefsLow\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_coefsHigh\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"ssts_expShift\" Float 1 1 AAAAAA== \"ssts_paramMin\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMid\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"ssts_paramMax\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"identity_matrix\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_Bradford\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_LMS_CAT02\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"LMS_to_Izazbz\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"XYZ_to_RGB_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_input\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_limit\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"RGB_to_XYZ_output\" Float 9 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \"d65White\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"inWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"refWhite\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"boundaryRGB\" Float 1 1 AAAAAA== \"limitJmax\" Float 1 1 AAAAAA== \"limitMmax\" Float 1 1 AAAAAA== \"gamutCuspTableSize\" Int 1 1 AAAAAA== \"gamutCuspTableUnsorted\" FloatgamutCuspTable\" FloatfocusDistanceClamped\" Float 1 1 AAAAAA=="
  kernelSource "\nkernel DRT_CAM_Kernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    //\n    // Input Parameters\n    //\n\n    // Encoding of the Input Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingIn;\n\n    // Primaries of the Input Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesIn;\n\n\n    // Tonescale mode\n    // 0: SSTS\n    // 1: MMSDC\n    // 2: Daniele Compression Curve\n    int toneScaleMode;\n\n    // CAM mode\n    // 0: ZCAM\n    // 1: Hellwig 2022\n    int camMode;\n\n    //\n    // ZCAM Paramters\n    //\n\n    // Chomatic Adaptation Transform to Use\n    // 0: None\n    // 1: XYZ Scaling\n    // 2: Bradford\n    // 3: CAT02\n    // 4: Zhai2018 (two-step)\n    int catType;\n\n    // Disable Degree of Adaptation Model for Zhai2018 CAT\n    // This is only effective if the limit primaries have a non-D65 white point\n    // since the input conversion is assumed to be fully adapted\n    // and the output conversion does not apply a CAT\n    bool discountIlluminant;\n\n    // Reference Luminance in Cd/sqm\n    float referenceLuminance;\n\n    // Background Luminance in Cd/sqm\n    float backgroundLuminance;\n\n    // Viewing Conditions (for output)\n    // 0: Dark\n    // 1: Dim\n    // 2: Average\n    int viewingConditions;\n\n    //\n    // SSTS Parameters\n    //\n\n    // Toggle SSTS Tone Mapping\n    bool applyTonecurve;\n    \n    // SSTS Luminances Min/Mid/Peak\n    float3 sstsLuminance;\n\n    // Toggle Highlight De-Saturation\n    bool applyHighlightDesat;\n\n    // Scale the De-Saturation Applied to the Highlights\n    float desatHighlights;\n\n    //\n    // Gamut Mapping Parameters\n    //\n\n    // Primaries of the Target Gamut\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesLimit;\n\n\n    // Toggle Gamut Compression\n    bool applyGamutCompression;\n\n    // Blend Between Compressing towards\n    // Target Gamut Cusp Luminance (0.0)\n    // and SSTS Mid Luminance (1.0)\n    float cuspMidBlend;\n\n    // the distance of the compression focal point\n    // from the achromatic axis\n    // normalised to the distance of the gamut cusp\n    float focusDistance;\n\n    // Gamut Compression Fuction Parameters\n    // Threshold / Limit / Power\n    float3 compressionFuncParams;\n\n    // How much the edges of the target RGB cube are smoothed when finding the gamut boundary \n    // in order to reduce visible contours at the gamut cusps\n    float smoothCusps;\n\n    // When solving for the target gamut boundary\n    // how many search interval halving steps to perform\n    int boundarySolvePrecision;\n\n    // Number of iterations to converge on the uncompressed J value \n    // Because of the compression focus point changes depending on the J value of the uncompressed sample\n    // we cannot perfectly invert it since the original J value has now been changed by the forward compression\n    // we can converge on a reasonable approximation of the original J value by iterating the inverse compression\n    // although this is quite an expensive operation\n    int inverseSolverIterations;\n\n    //\n    // Output Parameters\n    //\n\n    // Encoding of the Output Image\n    // 0: Linear\n    // 1: ACEScct\n    // 2: sRGB\n    // 3: BT.1886 (Gamma 2.4)\n    // 4: Gamma 2.6\n    // 5: ST2084\n    int encodingOut;\n\n    // Primaries of the Output Image\n    // 0: AP0-ACES\n    // 1: AP1-ACES\n    // 2: sRGB/Rec.709-D65\n    // 3: Rec.2020-D65\n    // 4: P3-D65\n    // 5: P3-DCI\n    int primariesOut;\n\n    // Clamp output values to 0.0 - 1.0\n    bool clampOutput;\n\n    //\n    // Extra Parameters\n    //\n\n    // Toggle Inverse Transform\n    bool invert;\n\n    float3x3 XYZ_to_LMS_ZCAM;\n    float zcam_rho;\n\n\n    // Tonescale select\n    // bool mmTonescaleMode;\n    // OpenDRT tonescale parameters\n    float Lp;\n    float su;\n    float c0;\n    float cs;\n    float c1;\n    float p;\n    float w1;\n    float s1;\n    float ex;\n    float eb;\n    float e0;\n    float s0;\n    float fl;\n    float dch;\n    float sat;\n    float mmScaleFactor;\n\n    // DanieleCompressionCurve tonescale parameters\n    float n;\n    float nr;\n    float g;\n    float w;\n    float t_1;\n\n    // Hellwig 2022 CAM params\n    // the kernel parameters\n\n    float3 XYZ_w;\n    float L_A;\n    float Y_b;\n    float3 surround;\n    bool discount_illuminant;\n\n\n  local:\n\n    // constants\n    float HALF_MIN;\n    float HALF_MAX;\n\n    // Hellwig 2022 constants\n    float3x3 CAT_CAT16;\n\n    // ZCAM vars\n    float zcam_L_A;\n    float zcam_F_b;\n    float zcam_F_L;\n    float zcam_cb;\n    float zcam_cg;\n    float zcam_c1;\n    float zcam_c2;\n    float zcam_c3;\n    float zcam_eta;\n    // float zcam_rho;\n    float zcam_luminance_shift;\n    float zcam_viewing_conditions_coeff;\n\n    // CAT vars\n    float cat_adaptDegree;\n\n\n    // ST2084 vars\n    float st2084_m_1;\n    float st2084_m_2;\n    float st2084_c_1;\n    float st2084_c_2;\n    float st2084_c_3;\n    float st2084_m_1_d;\n    float st2084_m_2_d;\n    float st2084_L_p;\n\n    // SSTS constants\n    float ssts_min_stop_sdr;\n    float ssts_max_stop_sdr;\n    float ssts_min_stop_rrt;\n    float ssts_max_stop_rrt;\n    float ssts_min_lum_sdr;\n    float ssts_max_lum_sdr;\n    float ssts_min_lum_rrt;\n    float ssts_max_lum_rrt;\n    int ssts_n_knots_low;\n    int ssts_n_knots_high;\n    float3x3 ssts_m1;\n\n    // SSTS tables\n    // using the float4 type to store the two 2D vectors\n    // because Blink does not support generic array assignments\n    float4 ssts_minTable;\n    float4 ssts_maxTable;\n    float4 ssts_bendsLow;\n    float4 ssts_bendsHigh;\n\n    // SSTS parameters\n    float3 ssts_min_pt;\n    float3 ssts_mid_pt;\n    float3 ssts_max_pt;\n    float ssts_knotIncLow;\n    float ssts_knotIncHigh;\n    float ssts_pctLow;\n    float ssts_pctHigh;\n\n    // using the float3x3 type to store the array of 6 coefficients\n    // because Blink does not support generic array assignments\n    float3x3 ssts_coefsLow;\n    float3x3 ssts_coefsHigh;\n\n    float ssts_expShift;\n    float3 ssts_paramMin;\n    float3 ssts_paramMid;\n    float3 ssts_paramMax;\n\n\n    // matrix vars\n    float3x3 identity_matrix;\n    float3x3 XYZ_to_LMS_Bradford;\n    float3x3 XYZ_to_LMS_CAT02;\n    // float3x3 XYZ_to_LMS_ZCAM;\n    float3x3 LMS_to_Izazbz;\n\n    float3x3 XYZ_to_RGB_input;\n    float3x3 XYZ_to_RGB_limit;\n    float3x3 XYZ_to_RGB_output;\n\n    float3x3 RGB_to_XYZ_input;\n    float3x3 RGB_to_XYZ_limit;\n    float3x3 RGB_to_XYZ_output;\n\n    // white points\n    float3 d65White;\n    float3 inWhite;\n    float3 refWhite;\n\n    // the maximum RGB value of the limiting gamut\n    float boundaryRGB;\n\n    // the maximum lightness value of the limiting gamut\n    float limitJmax;\n\n    // the maximum colorfulness value of the limiting gamut\n    float limitMmax;\n\n    // the 1D LUT used for quickly findig the approximate limiting gamut cusp JMh coordinates\n    // the samples are spaced by HSV hue increments of the limiting RGB gamut\n    // so to find the correct entry for a given ZCAM hue (h) value \n    // one must search the table entries for the matching entry.z component\n    int gamutCuspTableSize;\n\n    // the 'gamutCuspTableUnsorted' table is populated\n    // in increments of H of the limiting gamut HSV space starting at H=0.0\n    // since it is unlikely that HSV.H=0 and JMh.h=0 line up\n    // the entries are then wrap-around shifted\n    // so that the 'gamutCuspTable' starts with the lowest JMh.h value\n    // both tables need to be declared here since temporary array variables\n    // in the init() fuction seem to crash Nuke on some systems\n    float3 gamutCuspTableUnsorted\[360];\n    float3 gamutCuspTable\[360];\n\n    // local version of the public focusDistance parameter\n    // this one will be clamped to a value > 0.0\n    float focusDistanceClamped;\n\n  void define()\n  \{\n\n  \}\n\n  // multiplies a 3D vector with a 3x3 matrix\n  float3 vector_dot( float3x3 m, float3 v)\n  \{\n    float3 r = 1.0f;\n    for(int c = 0; c<3; c++)\n    \{\n      r\[c] = m\[c]\[0]*v.x + m\[c]\[1]*v.y + m\[c]\[2]*v.z;\n    \}\n\n    return r;\n  \}\n\n  // linear interpolation between two values a & b with the bias t\n  float lerp(float a, float b, float t)\n  \{\n    return a + t * (b - a);\n  \}\n\n  // get the y value of f(x) where the fuction is defined as a line between two points\n  // the two points as passed as an array \[a.x, a.y, b.x, b.y]\n  float lerp1D( float4 table, float x)\n  \{\n    float m = (table.w-table.y) / (table.z-table.x);\n    float c = table.y - (m*table.x);\n    float y = x*m+c;\n    return y;\n  \}\n\n\n  // \"safe\" power function to avoid NANs or INFs when taking a fractional power of a negative base\n  // this one initially returned -pow(abs(b), e) for negative b\n  // but this ended up producing undesirable results in some cases\n  // so now it just returns 0.0 instead\n  float spow( float base, float exponent )\n  \{\n    if(base < 0.0f && exponent != floor(exponent) )\n    \{\n      return 0.0f;\n    \}\n    else\n    \{\n     return pow(base, exponent); \n    \}\n  \}\n\n\n  // clamp the components of a 3D vector between a min & max value\n  float3 clamp3(float3 v, float min, float max)\n  \{\n    v.x = clamp(v.x, min, max);\n    v.y = clamp(v.y, min, max);\n    v.z = clamp(v.z, min, max);\n    return v;\n  \}\n\n\n  float3 float3spow( float3 base, float exponent )\n  \{\n      return float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));\n  \}\n\n  float3 float3sign( float3 v )\n  \{\n      return float3(sign(v.x), sign(v.y), sign(v.z));\n  \}\n\n\n  float3 float3abs( float3 a )\n  \{\n    return fabs(a);\n  \}\n\n\n\n    // \"safe\" div\n    float sdiv( float a, float b )\n    \{\n        if(b == 0.0f)\n        \{\n        return 0.0f;\n        \}\n        else\n        \{\n        return a / b;\n        \}\n    \}\n    \n\n    float hue_angle( float a, float b )\n    \{\n      float h = degrees(atan2(b, a)) / 360;\n  \n      return h;\n    \}\n\n\n\n  float3 float3_to_domain_100( float3 v )\n  \{\n    return v;\n  \}\n  \n  float clip(float x, float a, float b)\n  \{\n    return max(a, min(x, b));\n  \}\n\n  float mod(float a, float N)\n  \{\n    return a - N*floor(a/N);\n  \} \n\n\n  float achromatic_response_forward(float3 RGB)\n  \{\n\n    float R = RGB.x;\n    float G = RGB.y;\n    float B = RGB.z;\n\n\n    float A = 2 * R + G + 0.05 * B - 0.305;\n\n    return A;\n  \}\n\n  float colourfulness_correlate(float N_c,float e_t,float a,float b) \n  \{\n\n    float M = 43 * N_c * e_t * sqrt(pow(a,2) + pow(b,2));\n\n    return M;\n  \}\n\n\n\n  float degree_of_adaptation(float  F, float L_A )\n    \{\n    float D = F * (1 - (1 / 3.6) * exp((-L_A - 42) / 92));\n\n    return D;\n    \}\n\n  // convert radians to degrees\n  float degrees( float radians )\n  \{\n    return radians * 180.0f / PI;\n  \}\n\n\n  // convert degrees to radians\n  float radians( float degrees )\n  \{\n    return degrees / 180.0f * PI;\n  \}\n\n\n  // \"PowerP\" compression function (also used in the ACES Reference Gamut Compression transform)\n  // values of v above  'treshold' are compressed by a 'power' function\n  // so that an input value of 'limit' results in an output of 1.0\n  float compressPowerP( float v, float threshold, float limit, float power, int inverse )\n  \{\n    float s = (limit-threshold)/pow(pow((1.0f-threshold)/(limit-threshold),-power)-1.0f,1.0f/power);\n\n    float vCompressed;\n\n    if( inverse )\n    \{\n      vCompressed = (v<threshold||limit<1.0001f||v>threshold+s)?v:threshold+s*pow(-(pow((v-threshold)/s,power)/(pow((v-threshold)/s,power)-1.0f)),1.0f/power);\n    \}\n    else\n    \{\n      vCompressed = (v<threshold||limit<1.0001f)?v:threshold+s*((v-threshold)/s)/(pow(1.0f+pow((v-threshold)/s,power),1.0f/power));\n    \}\n\n    return vCompressed;\n  \}\n\n  // Two-Stage chromatic adaptation transforms as proposed by Zhai, Q., & Luo, M. R. (2018)\n  // https://opg.optica.org/oe/fulltext.cfm?uri=oe-26-6-7724\n  // https://github.com/colour-science/colour/blob/e5fa0790adcc3e5df5fa42ddf2bb75214c8cf59c/colour/adaptation/zhai2018.py\n  float3 CAT_Zhai2018( float3 XYZ_b, float3 XYZ_wb, float3 XYZ_wd, float D_b, float D_d, float3x3 M)\n  \{\n    float3 XYZ_wo = 100.0f;\n    float3 RGB_b = vector_dot(M, XYZ_b);\n    float3 RGB_wb = vector_dot(M, XYZ_wb);\n    float3 RGB_wd = vector_dot(M, XYZ_wd);\n    float3 RGB_wo = vector_dot(M, XYZ_wo);\n    \n    float3 D_RGB_b = D_b * (XYZ_wb.y / XYZ_wo.y) * (RGB_wo / RGB_wb) + 1 - D_b;\n    float3 D_RGB_d = D_d * (XYZ_wd.y / XYZ_wo.y) * (RGB_wo / RGB_wd) + 1 - D_d;\n    float3 D_RGB = D_RGB_b / D_RGB_d;\n    \n    float3 RGB_d = D_RGB * RGB_b;\n    float3 XYZ_d = vector_dot(M.invert(), RGB_d);\n    \n    return XYZ_d;\n  \}\n\n  // apply chromatic adaptation transform to 'XYZ' from 'XYZ_ws' to 'XYZ_wd' white points\n  // 'type' selects the cone fundamentals matrix (except for Zhai2018 which uses a 2-stage tranforms based on CATO2 fundamentals)\n  // 'adaptDegree' sets the degree of adaptation for the Zhai2018 model\n  float3 apply_CAT( float3 XYZ, float3 XYZ_ws, float3 XYZ_wd, int type, float adaptDegree )\n  \{\n    float3x3 XYZ_to_LMS;\n\n    if( type == 1 )\n    \{\n      // XYZ Scaling\n      XYZ_to_LMS = identity_matrix;\n    \}\n    else if( type == 2 )\n    \{\n      // Bradford\n      XYZ_to_LMS = XYZ_to_LMS_Bradford;\n    \}\n    else if( type == 3 )\n    \{\n      // CAT02\n      XYZ_to_LMS = XYZ_to_LMS_CAT02;\n    \}\n    else if( type == 4 )\n    \{\n      // Zhai2018\n      return CAT_Zhai2018(XYZ, XYZ_ws, XYZ_wd, adaptDegree, adaptDegree, XYZ_to_LMS_CAT02);\n    \}\n    else\n    \{\n      // None\n      return XYZ;\n    \}\n\n    float3 LMS_ws = vector_dot(XYZ_to_LMS, XYZ_ws);\n    float3 LMS_wd = vector_dot(XYZ_to_LMS, XYZ_wd);\n\n    // if(LMS_ws.x == 0.0f)\n    // \{\n    //   LMS_ws.x = 0.000001f;\n    // \}\n    // if(LMS_ws.y == 0.0f)\n    // \{\n    //   LMS_ws.y = 0.000001f;\n    // \}\n    // if(LMS_ws.z == 0.0f)\n    // \{\n    //   LMS_ws.z = 0.000001f;\n    // \}\n\n    float3x3 Mscale = identity_matrix;\n    Mscale\[0]\[0] = LMS_wd.x / LMS_ws.x;\n    Mscale\[1]\[1] = LMS_wd.y / LMS_ws.y;\n    Mscale\[2]\[2] = LMS_wd.z / LMS_ws.z;\n\n    float3x3 M = XYZ_to_LMS.invert() * Mscale * XYZ_to_LMS;\n\n    return vector_dot(M, XYZ);\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM intermediate Izazbz colorspace\n  float3 XYZ_to_Izazbz( float3 XYZD65 )\n  \{\n    float3 XYZpD65 = XYZD65;\n    XYZpD65.x = zcam_cb * XYZD65.x - (zcam_cb - 1.0f) * XYZD65.z;\n    XYZpD65.y = zcam_cg * XYZD65.y - (zcam_cg - 1.0f) * XYZD65.x;\n    float3 LMS = vector_dot(XYZ_to_LMS_ZCAM, XYZpD65);\n    float3 LMSp = 0.0f;\n    LMSp.x = spow( ( zcam_c1 + zcam_c2 * spow((LMS.x/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.x/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.y = spow( ( zcam_c1 + zcam_c2 * spow((LMS.y/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.y/10000.0f),zcam_eta) ), zcam_rho);\n    LMSp.z = spow( ( zcam_c1 + zcam_c2 * spow((LMS.z/10000.0f),zcam_eta) ) / ( 1.0f + zcam_c3 * spow((LMS.z/10000.0f),zcam_eta) ), zcam_rho);\n    float3 Izazbz = vector_dot(LMS_to_Izazbz, LMSp);\n    // return float3(LMS_to_Izazbz\[0]\[0], LMS_to_Izazbz\[0]\[1], LMS_to_Izazbz\[0]\[2]);\n    return Izazbz;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to XYZ tristimulus values\n  float3 Izazbz_to_XYZ( float3 Izazbz )\n  \{\n    float3 LMSp = vector_dot(LMS_to_Izazbz.invert(), Izazbz);\n    float3 LMS = 0.0f;\n    LMS.x = 10000.0f*spow((zcam_c1-spow(LMSp.x,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.x,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.y = 10000.0f*spow((zcam_c1-spow(LMSp.y,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.y,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    LMS.z = 10000.0f*spow((zcam_c1-spow(LMSp.z,1.0f/zcam_rho)) / (zcam_c3*spow(LMSp.z,1.0f/zcam_rho)-zcam_c2),1.0f/zcam_eta);\n    float3 XYZpD65 = vector_dot(XYZ_to_LMS_ZCAM.invert(), LMS);\n    float3 XYZD65 = XYZpD65;\n    XYZD65.x = (XYZpD65.x+(zcam_cb-1.0f)*XYZpD65.z)/zcam_cb;\n    XYZD65.y = (XYZpD65.y+(zcam_cg-1.0f)*XYZD65.x)/zcam_cg;\n    return XYZD65;\n  \}\n\n\n  // convert the ZCAM intermediate Izazbz colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 Izazbz_to_JMh( float3 Izazbz, float refWhiteIz, int viewingConditions )\n  \{\n    float3 JMh = 0.0f;\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n\n    JMh.z = fmod(degrees(atan2(Izazbz.z,Izazbz.y))+360.0f,360.0f);\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float Qz  = 2700.0f * spow(Izazbz.x,   (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / pow(zcam_F_b, 0.12f)) * pow(zcam_F_s, 2.2f) * pow(zcam_F_b, 0.5f) * pow(zcam_F_L, 0.2f);\n    JMh.x = 100.0f * (Qz / Qzw);\n    JMh.y = 100.0f * spow((spow(Izazbz.y, 2.0f) + spow(Izazbz.z, 2.0f)), 0.37f) * ((spow(ez, 0.068f) * pow(zcam_F_L, 0.2f)) / (pow(zcam_F_b, 0.1f) * pow(refWhiteIz, 0.78f)));\n\n    return JMh;\n    // return float3(Qz, Qzw, JMh.z);\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to the ZCAM intermediate Izazbz colorspace\n  // needs the Iz values of the reference white and the viewing conditions parameters\n  float3 JMh_to_Izazbz( float3 JMh, float refWhiteIz, int viewingConditions )\n  \{\n    float zcam_F_s = zcam_viewing_conditions_coeff;\n    float Qzm = spow(zcam_F_s, 2.2f) * spow(zcam_F_b, 0.5f) * spow(zcam_F_L, 0.2f);\n    float Qzw = 2700.0f * spow(refWhiteIz, (1.6f * zcam_F_s) / spow(zcam_F_b, 0.12f)) * Qzm;\n    float Izp = spow(zcam_F_b, 0.12f) / (1.6f * zcam_F_s);\n    float Izd = 2700.0f * 100.0f * Qzm;\n    float ez = 1.015f + cos(radians(89.038f+JMh.z));\n    float hzr = radians(JMh.z);\n    float Czp = spow((JMh.y * spow(refWhiteIz, 0.78f) * spow(zcam_F_b, 0.1f)) / (100.0f * spow(ez, 0.068f) * spow(zcam_F_L, 0.2f)), 50.0f / 37.0f);\n\n    return float3( spow((JMh.x * Qzw) / Izd, Izp), Czp * cos(hzr), Czp * sin(hzr));\n  \}\n\n\n  // convert XYZ tristimulus values to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 XYZ_to_JMh( float3 XYZ, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        return Izazbz_to_JMh(XYZ_to_Izazbz(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree)), refWhiteIzazbz.x, viewingConditions);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return XYZ_to_Hellwig2022_JMh(apply_CAT(XYZ, refWhite, d65White, catType, cat_adaptDegree), XYZ_w, L_A, Y_b,surround,discount_illuminant);\n    \}\n  \}\n\n\n  // convert the ZCAM J (lightness), M (colorfulness) and h (hue) correlates to XYZ tristimulus values\n  // needs XYZ tristimulus values for the reference white and a D65 white as well as the viewing conditions as parameters\n  float3 JMh_to_XYZ( float3 JMh, float3 refWhite, float3 d65White, int viewingConditions )\n  \{\n    if ( camMode == 0 )\n    \{\n        float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n        return apply_CAT(Izazbz_to_XYZ(JMh_to_Izazbz(JMh, refWhiteIzazbz.x, viewingConditions)), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n    else if( camMode == 1 )\n    \{\n        // return float3(1.0f,2.0f,3.0f);\n        return apply_CAT(Hellwig2022_JMh_to_XYZ(JMh, XYZ_w, L_A, Y_b, surround, discount_illuminant), d65White, refWhite, catType, cat_adaptDegree);\n    \}\n  \}\n\n\n  // check if the 3D point 'v' is inside a cube with the dimensions cubeSize x cubeSize x cubeSize \n  // the 'smoothing' parameter rounds off the edges and corners of the cube with the exception of the 0,0,0 and cubeSize x cubeSize x cubeSize corners\n  // a smoothing value of 0.0 applies no smoothing and 1.0 the maximum amount (smoothing values > 1.0 result in undefined behavior )\n  int isInsideCube( float3 v, float cubeSize, float smoothing)\n  \{\n    float3 normv = v / cubeSize;\n\n    float minv = min(normv.x, min(normv.y, normv.z));\n    float maxv = max(normv.x, max(normv.y, normv.z));\n\n    if( smoothing <= 0.0f )\n    \{\n      // when not smoothing we can use a much simpler test\n      if(minv < 0.0f || maxv > 1.0f)\n      \{\n        return 0;\n      \}\n\n      return 1;\n    \}\n\n    float3 clamped = normv;\n\n    float radius = smoothing/2.0f;\n\n    radius = clamp(radius*maxv*(1.0f-minv), 0.0f, radius);\n\n    clamped.x = clamp(normv.x, radius, 1.0f-radius);\n    clamped.y = clamp(normv.y, radius, 1.0f-radius);\n    clamped.z = clamp(normv.z, radius, 1.0f-radius);\n\n\n    if( length(normv - clamped ) > radius)\n    \{\n      return 0;\n    \}\n\n    return 1;\n  \}\n\n  // convert ACEScct encoded values to linear\n  float ACEScct_to_linear( float v )\n  \{\n    return v > 0.155251141552511f ? spow( 2.0f, v * 17.52f - 9.72f) : (v - 0.0729055341958355f) / 10.5402377416545f;\n  \}\n\n  // encode linear values as ACEScct\n  float linear_to_ACEScct( float v )\n  \{\n    return v > 0.0078125f ? (log2(v) + 9.72f) / 17.52f : 10.5402377416545f * v + 0.0729055341958355f;\n  \}\n\n\n  // convert sRGB gamma encoded values to linear\n  float sRGB_to_linear( float v )\n  \{\n    return v < 0.04045f ? v / 12.92f : spow((v + 0.055f) / 1.055f, 2.4f);\n  \}\n\n  // encode linear values as sRGB gamma\n  float linear_to_sRGB( float v )\n  \{\n    return v <= 0.0031308f ? 12.92f * v : 1.055 * (spow(v, 1.0f / 2.4f)) - 0.055f;\n  \}\n\n  // convert ST2084 PQ encoded values to linear\n  float ST2084_to_linear( float v )\n  \{\n    float V_p = spow(v, st2084_m_2_d);\n    return spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p;\n  \}\n\n  // encode linear values as ST2084 PQ\n  float linear_to_ST2084( float v )\n  \{\n    float Y_p = spow(max(0.0f, v) / st2084_L_p, st2084_m_1);\n\n    return spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);\n  \}\n\n  // decode value 'v' with the inverse of the selected encoding fuction to luminance\n  float encodingToLuminance(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return ACEScct_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return sRGB_to_linear(v) * referenceLuminance;\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v, 2.4f) * referenceLuminance;\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v, 2.6f) * referenceLuminance;\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return ST2084_to_linear(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v * referenceLuminance;\n    \}\n  \}\n\n  // decode the components of a 3D vector 'v' with the inverse of the selected encoding fuction to luminance\n  float3 encodingToLuminance3(int encoding, float3 v)\n  \{\n    float3 lin;\n    lin.x = encodingToLuminance(encoding, v.x);\n    lin.y = encodingToLuminance(encoding, v.y);\n    lin.z = encodingToLuminance(encoding, v.z);\n\n    return lin;\n  \}\n\n  // encode the linear luminance value 'v' with the encoding fuction selected by 'encoding'\n  float luminanceToEncoding(int encoding, float v)\n  \{\n    if( encoding == 1 )\n    \{\n      // ACEScct\n      return linear_to_ACEScct(v / referenceLuminance);\n    \}\n    else if( encoding == 2 )\n    \{\n      // sRGB\n      return linear_to_sRGB(v / referenceLuminance);\n    \}\n    else if( encoding == 3 )\n    \{\n      // BT.1886 (Gamma 2.4)\n      return spow(v / referenceLuminance, 1.0f/2.4f);\n    \}\n    else if( encoding == 4 )\n    \{\n      // Gamma 2.6\n      return spow(v / referenceLuminance, 1.0f/2.6f);\n    \}\n    else if( encoding == 5 )\n    \{\n      // ST2084\n      return linear_to_ST2084(v);\n    \}\n    else\n    \{\n      // Linear\n      // default\n      return v / referenceLuminance;\n    \}\n  \}\n\n  // encode the linear luminance value components of a 3D vector 'v' with the encoding fuction selected by 'encoding'\n  float3 luminanceToEncoding3(int encoding, float3 v)\n  \{\n    float3 enc;\n    enc.x = luminanceToEncoding(encoding, v.x);\n    enc.y = luminanceToEncoding(encoding, v.y);\n    enc.z = luminanceToEncoding(encoding, v.z);\n\n    return enc;\n  \}\n\n\n  // convert RGB values in the input colorspace to the ZCAM intermediate Izazbz colorspace\n  float3 input_RGB_to_Izazbz(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    return XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n  \}\n\n\n  // convert values in the ZCAM intermediate Izazbz colorspace to RGB values in the input colorspace\n  float3 Izazbz_to_input_RGB(float3 Izazbz)\n  \{\n    float3 luminanceXYZ = Izazbz_to_XYZ(Izazbz);\n    luminanceXYZ = apply_CAT(luminanceXYZ, d65White, inWhite, catType, 1.0f);\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 RGB = luminanceToEncoding3(encodingIn, luminanceRGB);\n    return RGB;\n  \}\n\n  // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 output_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n    float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n    // convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n    float3 luminance_RGB_to_JMh(float3 luminanceRGB)\n    \{\n    //   float3 luminanceRGB = encodingToLuminance3(encodingOut, RGB);\n      float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);\n      float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n      return JMh;\n    \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n  float3 JMh_to_output_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n    if( clampOutput )\n    \{\n      outputRGB = clamp3(outputRGB, 0.0f, 1.0f);\n    \}\n\n    return outputRGB;\n  \}\n\n    // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to  RGB values in the output colorspace\n    float3 JMh_to_luminance_RGB(float3 JMh)\n    \{\n        float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n        float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n        // float3 outputRGB = luminanceToEncoding3( encodingOut, luminanceRGB);\n\n        return luminanceRGB;\n    \}\n\n\n  // convert linear RGB values with the limiting primaries to ZCAM J (lightness), M (colorfulness) and h (hue) correlates\n  float3 limit_RGB_to_JMh(float3 RGB)\n  \{\n    float3 luminanceRGB = RGB * boundaryRGB *referenceLuminance;\n    float3 XYZ = vector_dot(RGB_to_XYZ_limit, luminanceRGB);\n    float3 JMh = XYZ_to_JMh(XYZ, refWhite, d65White, viewingConditions);\n    return JMh;\n  \}\n\n\n  // convert ZCAM J (lightness), M (colorfulness) and h (hue) correlates to linear RGB values with the limiting primaries\n  float3 JMh_to_limit_RGB(float3 JMh)\n  \{\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);\n    float3 RGB = luminanceRGB / boundaryRGB / referenceLuminance;\n    return RGB;\n  \}\n\n  // Hellwig 2022 forward\n  float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n    XYZ = float3_to_domain_100(XYZ);\n    XYZ_w = float3_to_domain_100(XYZ_w);\n    float _X_w = XYZ_w.x ;\n    float Y_w = XYZ_w.y ;\n    float _Z_w = XYZ_w.z ;\n    float3x3 MATRIX_16 = CAT_CAT16;\n    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n    float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n    if(discount_illuminant)\n    \{\n        D = 1.0f;\n    \}\n    float k = 1 / (5 * L_A + 1);\n    float k4 = pow(k,4);\n    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n    float n = sdiv(Y_b, Y_w);\n    float z = 1.48 + sqrt(n);\n    float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n    float3 RGB_wc = D_RGB * RGB_w;\n    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n    float R_aw = RGB_aw.x ;\n    float G_aw = RGB_aw.y ;\n    float B_aw = RGB_aw.z ;\n    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n    float3 RGB = vector_dot(MATRIX_16, XYZ);\n    float3 RGB_c = D_RGB * RGB;\n    float3 F_L_RGB_2 = float3spow(F_L * float3abs(RGB_c) / 100.0f, 0.42f);\n    float3 RGB_a = (400.0f * float3sign(RGB_c) * F_L_RGB_2) / (27.13f + F_L_RGB_2) + 0.1f;\n    float R_a = RGB_a.x ;\n    float G_a = RGB_a.y ;\n    float B_a = RGB_a.z ;\n    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;\n    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;\n    float h = mod(degrees(atan2(b, a)), 360.0f);\n    float hr = radians(h);\n    float _h = hr;\n    float _2_h = 2 * hr;\n    float _3_h = 3 * hr;\n    float _4_h = 4 * hr;\n    float e_t = (\n        -0.0582f * cos(_h)\n        - 0.0258f * cos(_2_h)\n        - 0.1347f * cos(_3_h)\n        + 0.0289f * cos(_4_h)\n        - 0.1475f * sin(_h)\n        - 0.0308f * sin(_2_h)\n        + 0.0385f * sin(_3_h)\n        + 0.0096f * sin(_4_h)\n        + 1.0f\n    );\n    float R_a2 = RGB_a.x ;\n    float G_a2 = RGB_a.y ;\n    float B_a2 = RGB_a.z ;\n    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;\n    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);\n    float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;\n    float M = 43.0f * surround.z * e_t * sqrt(a * a + b * b);\n    float C = 35.0f * sdiv(M, A_w);\n    float s = 100.0f * sdiv(M, Q);\n    return \{J,M,h\};\n\n  \}\n\n  // inverse Hellwig 2022\n  float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w, float L_A, float Y_b, float3 surround, bool discount_illuminant)\n  \{\n      float J = JMh.x;\n      float M = JMh.y;\n      float h = JMh.z;\n      float _X_w = XYZ_w.x;\n      float Y_w = XYZ_w.y;\n      float _Z_w = XYZ_w.z;\n      float3x3 MATRIX_16 = CAT_CAT16;\n      float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);\n      float D = clip(degree_of_adaptation(surround.x, L_A), 0, 1);\n      if(discount_illuminant)\n      \{\n          D = 1.0f;\n      \}\n      float k = 1 / (5 * L_A + 1);\n      float k4 = pow(k,4);\n      float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * pow((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;\n      float n = sdiv(Y_b, Y_w);\n      float z = 1.48 + sqrt(n);\n      float3 D_RGB = D * Y_w / RGB_w + 1 - D;\n      float3 RGB_wc = D_RGB * RGB_w;\n      float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);\n      float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;\n      float R_aw = RGB_aw.x ;\n      float G_aw = RGB_aw.y ;\n      float B_aw = RGB_aw.z ;\n      float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;\n      float hr = radians(h);\n      float _h = hr;\n      float _2_h = 2 * hr;\n      float _3_h = 3 * hr;\n      float _4_h = 4 * hr;\n      float e_t = (\n          -0.0582f * cos(_h)\n          - 0.0258f * cos(_2_h)\n          - 0.1347f * cos(_3_h)\n          + 0.0289f * cos(_4_h)\n          - 0.1475f * sin(_h)\n          - 0.0308f * sin(_2_h)\n          + 0.0385f * sin(_3_h)\n          + 0.0096f * sin(_4_h)\n          + 1.0f\n      );\n      float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));\n      float P_p_1 = 43.0f * surround.z * e_t;\n      float P_p_2 = A;\n      float gamma = M / P_p_1;\n      float a = gamma * cos(hr);\n      float b = gamma * sin(hr);\n      float panlrcm_data\[]=\n      \{\n          460.0f, 451.0f, 288.0f,\n          460.0f, -891.0f, -261.0f,\n          460.0f, -220.0f, -6300.0f,\n      \};\n      float3x3 panlrcm;\n      panlrcm.setArray(panlrcm_data);\n      float3 RGB_a = vector_dot(panlrcm, float3(P_p_2, a, b)) / 1403.0f;\n      float3 RGB_c = float3sign(RGB_a) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB_a)) / (400.0f - float3abs(RGB_a)), 1.0f / 0.42f);\n      float3 RGB = RGB_c / D_RGB;\n      float3x3 MATRIX_INVERSE_16 = CAT_CAT16.invert();\n      float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);\n      return XYZ;\n\n  \}\n\n\n\n  // convert HSV cylindrical projection values to RGB\n  float3 HSV_to_RGB( float3 HSV )\n  \{\n    float C = HSV.z*HSV.y;\n    float X = C*(1.0f-fabs(fmod(HSV.x*6.0f,2.0f)-1.0f));\n    float m = HSV.z-C;\n\n    float3 RGB;\n    RGB.x = (HSV.x<1.0f/6.0f?  C :HSV.x<2.0f/6.0f?  X :HSV.x<3.0f/6.0f?0.0f:HSV.x<4.0f/6.0f?0.0f:HSV.x<5.0f/6.0f?  X :  C )+m;\n    RGB.y = (HSV.x<1.0f/6.0f?  X :HSV.x<2.0f/6.0f?  C :HSV.x<3.0f/6.0f?  C :HSV.x<4.0f/6.0f?  X :HSV.x<5.0f/6.0f?0.0f:0.0f)+m;\n    RGB.z = (HSV.x<1.0f/6.0f?0.0f:HSV.x<2.0f/6.0f?0.0f:HSV.x<3.0f/6.0f?  X :HSV.x<4.0f/6.0f?  C :HSV.x<5.0f/6.0f?  C :  X )+m;\n    return RGB;\n  \}\n\n\n  // convert RGB to HSV cylindrical projection values\n  float3 RGB_to_HSV( float3 RGB )\n  \{\n    float cmax = max(RGB.x,max(RGB.y,RGB.z));\n    float cmin = min(RGB.x,min(RGB.y,RGB.z));\n    float delta = cmax-cmin;\n\n    float3 HSV;\n    HSV.x = delta==0.0f?0.0f:cmax==RGB.x?(fmod((RGB.y-RGB.z)/delta+6.0f,6.0f))/6.0f:cmax==RGB.y?(((RGB.z-RGB.x)/delta+2.0f)/6.0f):(((RGB.x-RGB.y)/delta+4.0f)/6.0f);\n    HSV.y = cmax == 0.0f ? 0.0f : delta / cmax;\n    HSV.z = cmax;\n    return HSV;\n  \}\n\n\n  // retrieve the JM coordinates of the limiting gamut cusp at the hue slice 'h'\n  // cusps are very expensive to compute\n  // and the DRT is only using them for lightness mapping\n  // which does not require a high degree of accuracy\n  // so instead we use a pre-computed table of cusp points\n  // sampled at 1 degree hue intervals of the the RGB target gamut\n  // and lerp between them to get the approximate J & M values\n  float2 cuspFromTable(float h)\n  \{\n\n    float3 lo;\n    float3 hi;\n\n    if( h <= gamutCuspTable\[0].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      lo.z = lo.z-360.0f;\n      hi = gamutCuspTable\[0];\n    \}\n    else if( h >= gamutCuspTable\[gamutCuspTableSize-1].z )\n    \{\n      lo = gamutCuspTable\[gamutCuspTableSize-1];\n      hi = gamutCuspTable\[0];\n      hi.z = hi.z+360.f;\n    \}\n    else\n    \{\n      for(int i = 1; i < gamutCuspTableSize; ++i)\n      \{\n        if( h <= gamutCuspTable\[i].z )\n        \{\n          lo = gamutCuspTable\[i-1];\n          hi = gamutCuspTable\[i];\n          break;\n        \}\n      \}\n    \}\n\n    float t = (h - lo.z) / (hi.z - lo.z);\n\n    float cuspJ = lerp(lo.x, hi.x, t);\n    float cuspM = lerp(lo.y, hi.y, t);\n\n    return float2(cuspJ,cuspM);\n  \}\n\n\n  // find the JM coordinates of the smoothed boundary of the limiting gamut in ZCAM at the hue slice 'h' \n  // by searching along the line defined by 'JMSource' and 'JMFocus'\n  // the function will search outwards from where the line intersects the achromatic axis with a staring incement of 'startStepSize'\n  // once the boundary has been crossed it will search in the opposite direction with half the step size\n  // and will repeat this as as many times as is set by the 'precision' paramter\n  float2 findBoundary(float2 JMSource, float2 JMFocus, float h, float3 XYZw, float3 XYZd65, float3x3 XYZ_to_RGB, float smoothing, int precision, float startStepSize )\n  \{\n\n    float2 achromaticIntercept = float2(JMFocus.x - (((JMSource.x-JMFocus.x) / (JMSource.y-JMFocus.y))*JMFocus.y), 0.0f);\n\n    if( achromaticIntercept.x <= 0.0f || achromaticIntercept.x >= limitJmax )\n    \{\n       return achromaticIntercept;\n    \}\n\n\n    float stepSize = startStepSize;\n    float2 unitVector = normalize(achromaticIntercept - JMFocus);\n    float2 JMtest = achromaticIntercept;\n    int searchOutwards = 1;\n\n    for( int i = 0; i < precision; ++i )\n    \{\n\n      while( 1 )\n      \{\n        JMtest = JMtest + unitVector * stepSize;\n        int inside = isInsideCube( vector_dot(XYZ_to_RGB, JMh_to_XYZ( float3(JMtest.x, JMtest.y, h), XYZw, XYZd65, viewingConditions ) / referenceLuminance ), boundaryRGB, smoothing);\n\n        if( searchOutwards )\n        \{\n          if( JMtest.x < 0.0f || JMtest.x > limitJmax || JMtest.y > limitMmax || !inside )\n          \{\n            searchOutwards = 0;\n            stepSize = -fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n        else\n        \{\n          if( JMtest.y < 0.0f || inside )\n          \{\n            searchOutwards = 1;\n            stepSize = fabs(stepSize) / 2.0f;\n            break;\n          \}\n        \}\n      \}\n    \}\n\n\n    float2 JMboundary = float2( clamp(JMtest.x, 0.0f, limitJmax), clamp(JMtest.y, 0.0f, limitMmax) );\n\n    return JMboundary;\n  \}\n\n\n  // apply the forward ACES SingleStageToneScale (SSTS) transform to the linear 'x' input value and return a luminance value\n  float forwardSSTS(float x, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    // Check for negatives or zero before taking the log. If negative or zero,\n    // set to HALF_MIN.\n    float logx = log10( max(x, HALF_MIN )); \n\n    float logy;\n\n    if( logx <= log10(minPt.x) )\n    \{ \n        logy = logx * minPt.z + ( log10(minPt.y) - minPt.z * log10(minPt.x) );\n    \}\n    else if(( logx > log10(minPt.x) ) && ( logx < log10(midPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(minPt.x)) / (log10(midPt.x) - log10(minPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsLow\[j/3]\[j%3], ssts_coefsLow\[(j+1)/3]\[(j+1)%3], ssts_coefsLow\[(j+2)/3]\[(j+2)%3]);\n        float3 monomials( t * t, t, 1.0f );\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else if(( logx >= log10(midPt.x) ) && ( logx < log10(maxPt.x) ))\n    \{\n        float knot_coord = 3.0f * (logx-log10(midPt.x)) / (log10(maxPt.x) - log10(midPt.x));\n        int j = knot_coord;\n        float t = knot_coord - float(j);\n        float3 cf(ssts_coefsHigh\[j/3]\[j%3], ssts_coefsHigh\[(j+1)/3]\[(j+1)%3], ssts_coefsHigh\[(j+2)/3]\[(j+2)%3]); \n        float3 monomials(t * t, t, 1.0f);\n        logy = dot(monomials, vector_dot( ssts_m1, cf ));\n    \}\n    else\n    \{\n        logy = logx * maxPt.z + ( log10(maxPt.y) - maxPt.z * log10(maxPt.x) );\n    \}\n\n    return spow(10.0f,logy);\n  \}\n\n// Michalis Menton Dual Spring Curve\n  float forwardMmTonescale(float x)\n  \{\n      float tc = 0.0f;\n      if (x<0.18)\n      \{\n          tc = cs*spow(x,c0);\n      \}\n      else\n      \{\n          tc = c0*(x-0.18)+0.18;\n      \}\n      \n      float ts = s1*spow((tc/(s0+tc)),p);\n      float tf = ts*ts/(ts+fl);\n      float ccf = spow(s0/(x+s0),dch)*sat;\n\n      return tf;\n  \}\n\n  float inverseMmTonescale(float x)\n  \{\n\n      float tf = (x+sqrt(x*(4*fl+x)))/2;\n      float ts = s0/(spow((s1/tf),(1/p))-1);\n      float tc = 0.0f;\n      if (ts<0.18)\n      \{\n          tc = spow((ts/cs),(1/c0));\n      \}\n      else\n      \{\n          tc = (ts-0.18)/c0+0.18;\n      \}\n      float ccf = spow(s0/(tc+s0),dch)*sat;\n\n      return tc;\n  \}\n\n  // Daniele's Compression Curve\n  // https://www.desmos.com/calculator/fihdxfot6s\n\n  float forwardDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n\n      // Scale Data\n      //   x = x / n;\n\n      // Ref Version\n      float f = pow(((max(0.0f,x))/(x+s_1)),g)*m;\n      float h = max(0.0f,((pow(f,2.0f))/(f+t_1)));\n      \n      //  Scale Data\n      //   h = h * n;\n\n      return h;\n  \}\n\n  float inverseDanieleCompressionCurve(float x)\n  \{\n      float m0 = n / nr;\n      float m  = 0.5f * ( m0 + sqrt(m0 * ( m0 + 4 * t_1 ) ) ) ;\n      float s_1 = w * pow(m,1.0f/g);\n      \n      // inverted version of forwardDanieleCompressionCurve\n\n\n      float new_f = 0.5f * (x + sqrt(x) * sqrt(4 * t_1 + x));\n      float new_x =  pow(new_f/m, 1.0f/g) * s_1 / (1.0f-pow(new_f/m, 1.0f/g)); ;\n\n      // // Rescale data down\n      // x = x * n;\n\n      return new_x;\n  \}\n\n\n\n  \n  // apply the inverse ACES SingleStageToneScale (SSTS) transfomr to the 'x' luminance value and return an linear value\n  float inverseSSTS(float y, float3 minPt, float3 midPt, float3 maxPt)\n  \{\n    float KNOT_INC_LOW  = (log10(midPt.x) - log10(minPt.x)) / 3.0f;\n    float KNOT_INC_HIGH = (log10(maxPt.x) - log10(midPt.x)) / 3.0f;\n\n    // KNOT_Y is luminance of the spline at each knot\n    float KNOT_Y_LOW\[4];\n\n   for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_LOW\[i] = ( ssts_coefsLow\[i/3]\[i%3] + ssts_coefsLow\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float KNOT_Y_HIGH\[ 4];\n\n    for( int i = 0; i < 4; i++ )\n    \{\n      KNOT_Y_HIGH\[i] = ( ssts_coefsHigh\[i/3]\[i%3] + ssts_coefsHigh\[(i+1)/3]\[(i+1)%3]) / 2.0f;\n    \};\n\n    float logy = log10( max(y, 0.0000000001f));\n\n    float logx;\n\n    if( logy <= log10(minPt.y) )\n    \{\n        logx = log10(minPt.x);\n\n    \}\n    else if( (logy > log10(minPt.y)) && (logy <= log10(midPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy > KNOT_Y_LOW\[0] && logy <= KNOT_Y_LOW\[1])\n        \{\n          cf.x = ssts_coefsLow\[0]\[0];\n          cf.y = ssts_coefsLow\[0]\[1];\n          cf.z = ssts_coefsLow\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_LOW\[1] && logy <= KNOT_Y_LOW\[2])\n        \{\n          cf.x = ssts_coefsLow\[0]\[1];\n          cf.y = ssts_coefsLow\[0]\[2];\n          cf.z = ssts_coefsLow\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_LOW\[2] && logy <= KNOT_Y_LOW\[3])\n        \{\n          cf.x = ssts_coefsLow\[0]\[2];\n          cf.y = ssts_coefsLow\[1]\[0];\n          cf.z = ssts_coefsLow\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(minPt.x) + ( t + j) * KNOT_INC_LOW;\n\n    \}\n    else if( (logy > log10(midPt.y)) && (logy < log10(maxPt.y)) )\n    \{\n        int j;\n        float3 cf = 0.0f;\n\n        if( logy >= KNOT_Y_HIGH\[0] && logy <= KNOT_Y_HIGH\[1])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[0];\n          cf.y = ssts_coefsHigh\[0]\[1];\n          cf.z = ssts_coefsHigh\[0]\[2];\n          j = 0;\n        \}\n        else if( logy > KNOT_Y_HIGH\[1] && logy <= KNOT_Y_HIGH\[2])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[1];\n          cf.y = ssts_coefsHigh\[0]\[2];\n          cf.z = ssts_coefsHigh\[1]\[0];\n          j = 1;\n        \}\n        else if( logy > KNOT_Y_HIGH\[2] && logy <= KNOT_Y_HIGH\[3])\n        \{\n          cf.x = ssts_coefsHigh\[0]\[2];\n          cf.y = ssts_coefsHigh\[1]\[0];\n          cf.z = ssts_coefsHigh\[1]\[1];\n          j = 2;\n        \} \n\n        float3 tmp = vector_dot( ssts_m1, cf );\n\n        float a = tmp.x;\n        float b = tmp.y;\n        float c = tmp.z;\n        c = c - logy;\n\n        float d = sqrt( b * b - 4.0f * a * c);\n\n        float t = ( 2.0f * c) / ( -d - b);\n\n        logx = log10(midPt.x) + ( t + j) * KNOT_INC_HIGH;\n\n    \}\n    else\n    \{\n        logx = log10(maxPt.x);\n\n    \}\n\n    return spow(10.0f, logx);\n  \}\n\n\n  // convert Iz to luminance\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float IzToLuminance( float Iz )\n  \{\n    float V_p = spow(Iz, 1.0f / zcam_rho);\n    float luminance = spow((max(0.0f, V_p - st2084_c_1) / (st2084_c_2 - st2084_c_3 * V_p)), st2084_m_1_d)*st2084_L_p * zcam_luminance_shift;\n    return luminance;\n  \}\n\n\n  // convert luminance to Iz\n  // note that the PQ fuction used for Iz differs from the ST2084 function by replacing m_2 with rho\n  // it also includes a luminance shift caused by the 2nd row-sum of the XYZ to LMS matrix not adding up to 1.0\n  float luminanceToIz( float luminance )\n  \{\n    float Y_p = spow((luminance/zcam_luminance_shift) / st2084_L_p, st2084_m_1);\n    float Iz = spow((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), zcam_rho);\n    return Iz;\n  \}\n\n\n  // calculate a scale factor for colorfulness\n  // based on the difference between the original and tone scaled (TS) Iz values\n  // we are only interested in the differences above mid grey\n  // so we first offset the original Iz values to align 18% it with the mid point of the IzTS value\n  float highlightDesatFactor( float Iz, float IzTS )\n  \{\n\n    // float linear = IzToLuminance(Iz) / referenceLuminance;\n    float linear =Iz;\n\n    // no highlight desat below SSTS mid point\n    if( linear < 0.18f )\n    \{\n      return 1.0f;\n    \}\n\n    // float IzMid   = luminanceToIz(0.18f * referenceLuminance);\n    // float IzMidTS = luminanceToIz(sstsLuminance.y);\n    float IzMid   = 0.18f;\n    float IzMidTS = sstsLuminance.y/referenceLuminance;\n\n    float IzAligned = Iz + IzMidTS - IzMid;\n\n    float desatFactor = 1.0f - clamp( compressPowerP( (log10(max(HALF_MIN, IzAligned)) - log10(max(HALF_MIN, IzTS))) * desatHighlights, compressionFuncParams.x, HALF_MAX, compressionFuncParams.z, 0 ), 0.0f, 1.0f);\n\n    return desatFactor;\n  \}\n\n\n  float3 input_RGB_to_JMh(float3 inputRGB)\n  \{\n    // clamp input to +/- HALF_MAX range (to remove inf values, etc.)\n    inputRGB = clamp3(inputRGB, -HALF_MAX, HALF_MAX);\n\n    // convert to linear XYZ luminance values\n    float3 luminanceRGB = encodingToLuminance3( encodingIn, inputRGB);\n    float3 luminanceXYZ = vector_dot(RGB_to_XYZ_input, luminanceRGB);\n\n    // // assuming 'fully adapted', dark' viewing conditions for input image (does that make sense?)\n    // float3 Izazbz =  XYZ_to_Izazbz(apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f));\n    // // return apply_CAT(luminanceXYZ, inWhite, d65White, catType, 1.0f);\n    // float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 colorJMh = Izazbz_to_JMh(Izazbz, refWhiteIzazbz.x, 0);\n\n    float3 JMh = XYZ_to_JMh(luminanceXYZ, refWhite, d65White, viewingConditions);\n\n    return JMh;\n\n  \}\n\n\n\n  float3 JMh_to_input_RGB(float3 JMh)\n  \{\n\n\n    float3 luminanceXYZ = JMh_to_XYZ( JMh, refWhite, d65White, viewingConditions );\n    float3 luminanceRGB = vector_dot(XYZ_to_RGB_input, luminanceXYZ);\n    float3 inputRGB = luminanceToEncoding3( encodingIn, luminanceRGB);\n\n\n    return inputRGB;\n\n  \}\n\n\n\n  float3 forwardTonescale( float3 inputJMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n\n    float3 outputJMh = inputJMh;\n\n    // if( ! applyTonecurve && ! applyHighlightDesat )\n    // \{\n    //   // nothing to do here except output input JMh\n    //   return outputJMh;\n    // \}\n\n    // float3 colorJMh = Izazbz_to_JMh(inputIzazbz, refWhiteIzazbz.x, 0);\n    \n    float3 monoJMh = float3(inputJMh.x,0.0f,0.0f);\n\n    float3 linearJMh = JMh_to_luminance_RGB(monoJMh);\n    float linear = linearJMh.x/referenceLuminance;\n\n    // float3 monoIzazbz = JMh_to_Izazbz(colorJMh, refWhiteIzazbz.x, 0);\n    // float3 monoXYZ = Izazbz_to_XYZ(monoIzazbz);\n\n    float luminanceTS = 50.0f;\n\n    // switch for applying the different tonescale compression functions\n    if( toneScaleMode == 1 )\n    \{\n        luminanceTS = forwardMmTonescale(linear) * mmScaleFactor;\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        luminanceTS = forwardDanieleCompressionCurve(linear)  * mmScaleFactor;\n    \}\n    else\n    \{\n        luminanceTS =  forwardSSTS(linear, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n\n    float3 tonemappedmonoJMh = luminance_RGB_to_JMh(float3(luminanceTS,luminanceTS,luminanceTS));\n    float3 tonemappedJMh = float3(tonemappedmonoJMh.x,inputJMh.y,inputJMh.z);\n\n    // return outputJMh;\n    if( applyTonecurve )\n    \{\n        outputJMh = tonemappedJMh;\n    \}\n    else\n    \{\n        outputJMh = inputJMh;\n    \}\n\n    // Apply highlight desat\n    float factM = highlightDesatFactor(linear, luminanceTS/referenceLuminance);\n    if( applyHighlightDesat )\n    \{\n\n      outputJMh.y = outputJMh.y * factM;\n    \}\n\n    return outputJMh;\n\n  \}\n\n\n  float3 inverseTonescale( float3 JMh )\n  \{\n    float3 refWhiteIzazbz = XYZ_to_Izazbz(refWhite*referenceLuminance/refWhite.y);\n    // float3 Izazbz = JMh_to_Izazbz(JMh, refWhiteIzazbz.x, 0);\n\n    float3 tonemappedJMh = JMh;\n\n    if( ! applyTonecurve && ! applyHighlightDesat )\n    \{\n      // nothing else to do here\n      return tonemappedJMh;\n    \}\n\n    float3 untonemappedColourJMh = tonemappedJMh;\n\n    \n    // float luminance = IzToLuminance(Izazbz.x);\n\n    float3 monoTonemappedJMh = float3(tonemappedJMh.x,0.0f,0.0f);\n    float3 monoTonemappedRGB = JMh_to_luminance_RGB(monoTonemappedJMh);\n    float3 newMonoTonemappedJMh = luminance_RGB_to_JMh(monoTonemappedRGB);\n    float luminance = monoTonemappedRGB.x;\n\n    float3 tonemappedRGB = JMh_to_luminance_RGB(tonemappedJMh);\n    float3 newTonemappedJMh = luminance_RGB_to_JMh(tonemappedRGB);\n\n    // newTonemappedJMh.x = newTonemappedJMh.x * 2.0f;\n\n\n    // Dummy value to init the var\n    float linear = 50.0f;\n    // swtich for testing out the MM tonescale from Jed\n    if( toneScaleMode == 1 )\n    \{\n        linear = inverseMmTonescale(luminance/mmScaleFactor);\n    \}\n    else if( toneScaleMode == 2 )\n    \{\n        linear = inverseDanieleCompressionCurve(luminance/mmScaleFactor);\n    \}\n    else\n    \{\n        linear = inverseSSTS(luminance, ssts_paramMin, ssts_paramMid, ssts_paramMax);\n    \}\n\n    linear = linear*referenceLuminance;\n  \n    if( applyTonecurve )\n    \{\n      float3 untonemappedMonoJMh = luminance_RGB_to_JMh(float3(linear,linear,linear));\n      untonemappedColourJMh = float3(untonemappedMonoJMh.x,tonemappedJMh.y,tonemappedJMh.z);\n    \}\n \n\n    // Apply highlight desat\n    // I think there is bug here if you apply desat, but no tonecurve in the forward direction.\n    float factM = highlightDesatFactor(linear/referenceLuminance, luminance/referenceLuminance);\n    if( applyHighlightDesat && applyTonecurve )\n    \{\n      untonemappedColourJMh.y = untonemappedColourJMh.y / factM;\n    \}\n\n\n    return  untonemappedColourJMh;\n  \}\n\n\n  // compress the ZCAM JM values into the limiting gamut by projecting them towards a focus point beyond the achromatic axis\n  // in order to avoid the gamut compression to also compress black and white tones towards the focus point\n  // (which would result in lifed blacks and crushed highlights)\n  // we offset the focus further away from the achromatic axis the closer the lightness of a sample is to the zero or the limitJmax value\n  // a far away focus point means the compression vector becomes close to orthogonal to the lightness axis preserving black & white lightness\n  // the 'distanceGainCalcJ' paramter should be set to inputJMh.x for the forward direction\n  // and to the best guess of the original, uncompressed values for the inverse direction\n  // this is used for iteratively converging on the original, uncompressed value of J which would have gotten obfuscated by the forward transform\n  float3 compressGamut( float3 inputJMh, int invert, float distanceGainCalcJ )\n  \{\n    if( ! applyGamutCompression )\n    \{\n      return inputJMh;\n    \}\n\n    float sstsMidJ = XYZ_to_JMh( refWhite * sstsLuminance.y, refWhite, d65White, viewingConditions ).x;\n    float2 JMinput = float2(inputJMh.x, inputJMh.y);\n    float2 JMcusp = cuspFromTable( inputJMh.z);\n\n    float focusJ = lerp(JMcusp.x, sstsMidJ, cuspMidBlend);\n\n    float focusDistanceGain = 1.0f;\n\n    if( distanceGainCalcJ > focusJ )\n    \{\n      focusDistanceGain = (limitJmax - focusJ) / max(0.0001f, (limitJmax - min(limitJmax, distanceGainCalcJ)));\n    \}\n    else\n    \{\n      focusDistanceGain = (focusJ) / max(0.0001f, distanceGainCalcJ); \n    \}\n\n    float2 JMfocus = float2( focusJ, -JMcusp.y*focusDistanceClamped*focusDistanceGain );\n    float2 vecToFocus = (JMfocus - JMinput);\n    float2 achromaticIntercept = float2(JMfocus.x - (((JMinput.x-JMfocus.x) / (JMinput.y-JMfocus.y))*JMfocus.y), 0.0f);\n\n    // to reduce the number of expensive boundary finding iterations needed\n    // we taking an educated guess at a good starting step size\n    // based on how far the sample is either above or below the gamut cusp\n    float cuspToTipRatio;\n    if( JMinput.x > JMcusp.x )\n    \{\n      cuspToTipRatio = (JMinput.x - JMcusp.x) / (limitJmax - JMcusp.x);\n    \}\n    else\n    \{\n      cuspToTipRatio = (JMcusp.x - JMinput.x) / (JMcusp.x);\n    \}\n\n    float startStepSize = lerp(JMcusp.y / 3.0f, 0.1f, cuspToTipRatio);\n    float2 JMboundary = findBoundary(JMinput, JMfocus,  inputJMh.z, refWhite, d65White, XYZ_to_RGB_limit, smoothCusps, boundarySolvePrecision, startStepSize);\n    float normFact = 1.0f / max(0.0001f, length(JMboundary - achromaticIntercept));\n    float v = length(JMinput-achromaticIntercept) * normFact;\n    float vCompressed = compressPowerP(v, compressionFuncParams.x, compressionFuncParams.y, compressionFuncParams.z, invert);\n    float2 JMcompressed = 0.0f;\n    // hack to stop nan values after compression\n    if (JMinput.y != 0.0f)\n    \{\n      JMcompressed = achromaticIntercept + normalize(JMinput-achromaticIntercept)*vCompressed/normFact;\n    \}\n    else\n    \{\n      JMcompressed = JMinput;\n    \}\n    return float3(JMcompressed.x, JMcompressed.y, inputJMh.z);\n  \}\n\n\n  // apply the forward gamut compression to the limiting primaries\n  float3 compressGamutForward( float3 JMh )\n  \{\n    float3 JMhcompressed = compressGamut( JMh, 0, JMh.x );\n    // Hack to deal with weird zero values on output\n    // JMhcompressed.x = min(300.0f,JMhcompressed.x);\n    return JMhcompressed;\n  \}\n\n\n  // apply the inverse gamut compression\n  // and iterate a given number of times to reconstruct the original J value\n  float3 compressGamutInverse( float3 JMh )\n  \{\n    float3 JMhuncompressed;\n    float distanceGainCalcJ = JMh.x;\n\n    for( int i = 0; i < inverseSolverIterations; ++i )\n    \{\n      JMhuncompressed = compressGamut( JMh, 1, distanceGainCalcJ );\n      distanceGainCalcJ = JMhuncompressed.x;\n    \}\n\n    return JMhuncompressed;\n  \}\n\n\n  void init()\n  \{\n    HALF_MIN = 0.0000000596046448f;\n    HALF_MAX = 65504.0f;\n\n    zcam_L_A = referenceLuminance * backgroundLuminance / 100.0f;\n    zcam_F_b = sqrt(backgroundLuminance/referenceLuminance);\n    zcam_F_L = 0.171f*spow(zcam_L_A, 1.0f/3.0f) * (1.0f-exp(-48.0f/9.0f*zcam_L_A));\n\n    if( discountIlluminant )\n    \{\n      cat_adaptDegree = 1.0f;\n    \}\n    else\n    \{\n      float viewingConditionsCoeff = 1.0f;\n\n      if( viewingConditions == 0 )\n      \{\n        viewingConditionsCoeff = 0.8f;\n      \}\n      else if( viewingConditions == 1 )\n      \{\n        viewingConditionsCoeff = 0.9f;\n      \}\n      else if( viewingConditions == 2 )\n      \{\n        viewingConditionsCoeff = 1.0f;\n      \}\n\n      cat_adaptDegree = viewingConditionsCoeff * (1.0f - (1.0f / 3.6f) * exp((-zcam_L_A - 42.0f) / 92.0f));\n    \}\n\n    zcam_cb  = 1.15f;\n    zcam_cg  = 0.66f;\n    zcam_c1  = 3424.0f / spow(2.0f,12.0f);\n    zcam_c2  = 2413.0f / spow(2.0f, 7.0f);\n    zcam_c3  = 2392.0f / spow(2.0f, 7.0f);\n    zcam_eta = 2610.0f / spow(2.0f,14.0f);\n    // zcam_rho = 1.7f * 2323.0f / pow(2.0f,5.0f);\n    zcam_luminance_shift = 1.0f / (-0.20151000f + 1.12064900f + 0.05310080f);\n\n    zcam_viewing_conditions_coeff = 1.0f;\n\n    if( viewingConditions == 0 )\n    \{\n      zcam_viewing_conditions_coeff = 0.525f;\n    \}\n    else if( viewingConditions == 1 )\n    \{\n      zcam_viewing_conditions_coeff = 0.59f;\n    \}\n    else if( viewingConditions == 2 )\n    \{\n      zcam_viewing_conditions_coeff = 0.69f;\n    \}\n\n    st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);\n    st2084_m_2=2523.0f / 4096.0f * 128.0f;\n    st2084_c_1=3424.0f / 4096.0f;\n    st2084_c_2=2413.0f / 4096.0f * 32.0f;\n    st2084_c_3=2392.0f / 4096.0f * 32.0f;\n    st2084_m_1_d = 1.0f / st2084_m_1;\n    st2084_m_2_d = 1.0f / st2084_m_2;\n    st2084_L_p = 10000.0f;\n\n    ssts_min_stop_sdr =  -6.5f;\n    ssts_max_stop_sdr =   6.5f;\n    ssts_min_stop_rrt = -15.0f;\n    ssts_max_stop_rrt =  18.0f;\n    ssts_min_lum_sdr = 0.02f;\n    ssts_max_lum_sdr = 48.0f;\n    ssts_min_lum_rrt = 0.0001f;\n    ssts_max_lum_rrt = 10000.0f;\n    ssts_n_knots_low = 4;\n    ssts_n_knots_high = 4;\n\n    ssts_minTable = float4(log10(ssts_min_lum_rrt), ssts_min_stop_rrt, log10(ssts_min_lum_sdr), ssts_min_stop_sdr);\n    ssts_maxTable = float4(log10(ssts_max_lum_sdr), ssts_max_stop_sdr, log10(ssts_max_lum_rrt), ssts_max_stop_rrt);\n    ssts_bendsLow = float4(ssts_min_stop_rrt, 0.18f, ssts_min_stop_sdr, 0.35f);\n    ssts_bendsHigh = float4(ssts_max_stop_sdr, 0.89f, ssts_max_stop_rrt, 0.90f);\n\n    float ssts_m1_data\[]=\{ 0.5f,-1.0f, 0.5f,\n                          -1.0f, 1.0f, 0.0f,\n                           0.5f, 0.5f, 0.0f \};\n    ssts_m1.setArray(ssts_m1_data);\n\n    ssts_min_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_minTable, log10(sstsLuminance.x)));\n    ssts_min_pt.y = sstsLuminance.x;\n    ssts_min_pt.z = 0.0f;\n\n    ssts_mid_pt = float3(0.18f, 4.8f, 1.55f);\n\n    ssts_max_pt.x = 0.18f * spow(2.0f, lerp1D(ssts_maxTable, log10(sstsLuminance.z)));\n    ssts_max_pt.y = sstsLuminance.z;\n    ssts_max_pt.z = 0.0f;\n\n    ssts_knotIncLow  = (log10(ssts_mid_pt.x) - log10(ssts_min_pt.x)) / 3.0f;\n    ssts_knotIncHigh = (log10(ssts_max_pt.x) - log10(ssts_mid_pt.x)) / 3.0f;\n    ssts_pctLow  = lerp1D(ssts_bendsLow,  log2(ssts_min_pt.x / 0.18f));\n    ssts_pctHigh = lerp1D(ssts_bendsHigh, log2(ssts_max_pt.x / 0.18f));\n\n    \n    float ssts_coefsLow_data\[] = \{\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      (ssts_min_pt.z * (log10(ssts_min_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_min_pt.y) - ssts_min_pt.z * log10(ssts_min_pt.x)),\n      log10(ssts_min_pt.y) + ssts_pctLow*(log10(ssts_mid_pt.y)-log10(ssts_min_pt.y)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncLow)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    float sssts_coefsHigh_data\[] = \{\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      (ssts_mid_pt.z * (log10(ssts_mid_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_mid_pt.y) - ssts_mid_pt.z * log10(ssts_mid_pt.x)),\n      log10(ssts_mid_pt.y) + ssts_pctHigh*(log10(ssts_max_pt.y)-log10(ssts_mid_pt.y)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)-0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      (ssts_max_pt.z * (log10(ssts_max_pt.x)+0.5f*ssts_knotIncHigh)) + ( log10(ssts_max_pt.y) - ssts_max_pt.z * log10(ssts_max_pt.x)),\n      0.0f, 0.0f, 0.0f \};\n\n    ssts_coefsLow.setArray(ssts_coefsLow_data);\n    ssts_coefsHigh.setArray(sssts_coefsHigh_data);\n\n    ssts_paramMin = ssts_min_pt;\n    ssts_paramMid = ssts_mid_pt;\n    ssts_paramMax = ssts_max_pt;\n    ssts_expShift = log2(inverseSSTS(sstsLuminance.y, ssts_min_pt, ssts_paramMid, ssts_max_pt)) - log2(0.18f);\n    ssts_paramMin.x = spow(2.0f, (log(ssts_paramMin.x) / log(2.0f) - ssts_expShift));\n    ssts_paramMid.x = spow(2.0f, (log(0.18f          ) / log(2.0f) - ssts_expShift));\n    ssts_paramMax.x = spow(2.0f, (log(ssts_paramMax.x) / log(2.0f) - ssts_expShift));\n\n\n\n    float identity_matrix_data\[]=\{ 1.0f, 0.0f, 0.0f,\n                                   0.0f, 1.0f, 0.0f,\n                                   0.0f, 0.0f, 1.0f \};\n\n    float XYZ_to_LMS_Bradford_data\[]=\{ 0.8951f, 0.2664f,-0.1614f,\n                                      -0.7502f, 1.7135f, 0.0367f,\n                                       0.0389f,-0.0685f, 1.0296f \};\n\n    float XYZ_to_LMS_CAT02_data\[]=\{ 0.7328f, 0.4296f,-0.1624f,\n                                   -0.7036f, 1.6975f, 0.0061f,\n                                    0.0030f, 0.0136f, 0.9834f \};\n\n    float XYZ_to_LMS_ZCAM_data\[]=\{ 0.41478972f, 0.57999900f, 0.01464800f,\n                                  -0.20151000f, 1.12064900f, 0.05310080f,\n                                  -0.01660080f, 0.26480000f, 0.66847990f \};\n\n    float eps = 3.7035226210190005e-11f;\n    float LMS_to_Izazbz_data\[]=\{ 0.000000f, 1.0001f-eps , 0.000000f,\n                                 3.524000f,-4.066708f, 0.542708f,\n                                 0.199076f, 1.096799f,-1.295875f \};\n\n\n    identity_matrix.setArray(identity_matrix_data);\n    XYZ_to_LMS_Bradford.setArray(XYZ_to_LMS_Bradford_data);\n    XYZ_to_LMS_CAT02.setArray(XYZ_to_LMS_CAT02_data);\n    // XYZ_to_LMS_ZCAM.setArray(XYZ_to_LMS_ZCAM_data);\n    LMS_to_Izazbz.setArray(LMS_to_Izazbz_data);\n\n\n    // Blink does not seem to support initialising multidimensional arrays\n    // So instead of being able to index the matrix data directly from one\n    // we need to use long if/else statements to populate the\n    // input, limit & output primary matrices\n    // (maybe there is a better way?)\n\n    float XYZ_to_AP0_ACES_matrix_data\[]=\n    \{\n       1.0498110175f,  0.0000000000f, -0.0000974845f,\n      -0.4959030231f,  1.3733130458f,  0.0982400361f,\n       0.0000000000f,  0.0000000000f,  0.9912520182f\n    \};\n\n    float XYZ_to_AP1_ACES_matrix_data\[]=\n    \{\n       1.6410233797f, -0.3248032942f, -0.2364246952f,\n      -0.6636628587f,  1.6153315917f,  0.0167563477f,\n       0.0117218943f, -0.0082844420f,  0.9883948585f,\n    \};\n\n    float XYZ_to_Rec709_D65_matrix_data\[]=\n    \{\n       3.2409699419f, -1.5373831776f, -0.4986107603f,\n      -0.9692436363f,  1.8759675015f,  0.0415550574f,\n       0.0556300797f, -0.2039769589f,  1.0569715142f,\n    \};\n\n    float XYZ_to_Rec2020_D65_matrix_data\[]=\n    \{\n       1.7166511880f, -0.3556707838f, -0.2533662814f,\n      -0.6666843518f,  1.6164812366f,  0.0157685458f,\n       0.0176398574f, -0.0427706133f,  0.9421031212f,\n    \};\n\n    float XYZ_to_P3_D65_matrix_data\[]=\n    \{\n       2.4934969119f, -0.9313836179f, -0.4027107845f,\n      -0.8294889696f,  1.7626640603f,  0.0236246858f,\n       0.0358458302f, -0.0761723893f,  0.9568845240f,\n    \};\n\n    float XYZ_to_P3_DCI_matrix_data\[]=\n    \{\n       2.7253940305f, -1.0180030062f, -0.4401631952f,\n      -0.7951680258f,  1.6897320548f,  0.0226471906f,\n       0.0412418914f, -0.0876390192f,  1.1009293786f\n    \};\n\n    float CAT_CAT16_data\[]=\n    \{\n      0.401288, 0.650173, -0.051461,\n      -0.250268, 1.204414, 0.045854,\n      -0.002079, 0.048952, 0.953127,\n    \};\n\n    // populate the input primaries matrix\n    if( primariesIn == 0 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesIn == 1 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesIn == 2 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesIn == 3 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesIn == 4 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesIn == 5 )\n    \{\n      XYZ_to_RGB_input.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_input.setArray(identity_matrix_data);\n    \}\n\n    // populate the limiting primaries matrix\n    if( primariesLimit == 0 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 1 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesLimit == 2 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesLimit == 3 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesLimit == 4 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesLimit == 5 )\n    \{\n      XYZ_to_RGB_limit.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_limit.setArray(identity_matrix_data);\n    \}\n\n    // populate the output primaries matrix\n    if( primariesOut == 0 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP0_ACES_matrix_data);\n    \}\n    else if( primariesOut == 1 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_AP1_ACES_matrix_data);\n    \}\n    else if( primariesOut == 2 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec709_D65_matrix_data);\n    \}\n    else if( primariesOut == 3 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_Rec2020_D65_matrix_data);\n    \}\n    else if( primariesOut == 4 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_D65_matrix_data);\n    \}\n    else if( primariesOut == 5 )\n    \{\n      XYZ_to_RGB_output.setArray(XYZ_to_P3_DCI_matrix_data);\n    \}\n    else\n    \{\n      XYZ_to_RGB_output.setArray(identity_matrix_data);\n    \}\n\n    RGB_to_XYZ_input = XYZ_to_RGB_input.invert();\n    RGB_to_XYZ_limit = XYZ_to_RGB_limit.invert();\n    RGB_to_XYZ_output = XYZ_to_RGB_output.invert();\n\n\n    float3x3 XYZ_to_RGB_sRGB;\n    XYZ_to_RGB_sRGB.setArray(XYZ_to_Rec709_D65_matrix_data);\n    float3 white(1.0f, 1.0f, 1.0f);\n\n    d65White = vector_dot(XYZ_to_RGB_sRGB.invert(), white);\n    inWhite = vector_dot(RGB_to_XYZ_input, white);\n    refWhite = vector_dot(RGB_to_XYZ_limit, white);\n\n    boundaryRGB = sstsLuminance.z / referenceLuminance;\n\n    CAT_CAT16.setArray(CAT_CAT16_data);\n\n    //\n    // solving the RGB cusp from JMh is very expensive\n    // instead we go the other way and start with a RGB cusp sweep\n    // which is easily calculated by converting via HSV (Hue, 1.0, 1.0)\n    // we then convert each cusp to JMh and add them to a table \n    //\n\n    gamutCuspTableSize = 360;\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      float hNorm = float(i) / (gamutCuspTableSize);\n      float3 RGB = HSV_to_RGB(float3(hNorm, 1.0f, 1.0f));\n      gamutCuspTableUnsorted\[i] = limit_RGB_to_JMh(RGB);\n    \}\n\n    int minhIndex = 0;\n    for( int i = 1; i < gamutCuspTableSize; ++i )\n    \{\n      if( gamutCuspTableUnsorted\[i].z <  gamutCuspTableUnsorted\[minhIndex].z)\n      \{\n        minhIndex = i;\n      \}\n    \}\n\n\n    for( int i = 0; i < gamutCuspTableSize; ++i )\n    \{\n      gamutCuspTable\[i] = gamutCuspTableUnsorted\[(minhIndex+i)%gamutCuspTableSize];\n      \n    \}\n\n    // calculate the maximum expected J & M values for the given limit gamut\n    // these are used as limiting values for the gamut boundary searches\n\n    // limitJmax (asumed to match limitRGB white)\n    limitJmax = limit_RGB_to_JMh(float3(1.0f)).x;\n\n\n    // limitMmax (assumed to coincide with one of the RGBCMY corners of the limitRGB cube)\n    float3 gamutCornersTable\[6];\n    gamutCornersTable\[0] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 0.0f));\n    gamutCornersTable\[1] = limit_RGB_to_JMh(float3(1.0f, 1.0f, 0.0f));\n    gamutCornersTable\[2] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 0.0f));\n    gamutCornersTable\[3] = limit_RGB_to_JMh(float3(0.0f, 1.0f, 1.0f));\n    gamutCornersTable\[4] = limit_RGB_to_JMh(float3(0.0f, 0.0f, 1.0f));\n    gamutCornersTable\[5] = limit_RGB_to_JMh(float3(1.0f, 0.0f, 1.0f));\n\n    limitMmax = 0.0f;\n    for( int i = 0; i < 6; ++i )\n    \{\n      limitMmax = max(limitMmax, gamutCornersTable\[i].y);\n    \}\n\n    // ensure positive, non-zero focus depth\n    // to avoid the gamut boundary search vector becoming zero for achromatic colors\n    // which will cause the boundary search loop to continue forever and the node to hang\n    focusDistanceClamped = max(0.01f, focusDistance);\n  \}\n\n\n  void process()\n  \{\n    SampleType(src) source = src();\n    float3 srcRGB(source.x, source.y, source.z);\n    float3 dstRGB;\n    float3 diagnostic;\n\n    if( invert )\n    \{\n      float3 JMh = output_RGB_to_JMh(srcRGB);\n      JMh = compressGamutInverse(JMh);\n      float3 inputIzazbz = inverseTonescale(JMh);\n      dstRGB = Izazbz_to_input_RGB(inputIzazbz);\n      diagnostic =  dstRGB;\n    \}\n    else\n    \{\n      float3 inputIzazbz = input_RGB_to_Izazbz(srcRGB);\n    //   float3 JMh = forwardTonescale(inputIzazbz);\n      float3 JMh = input_RGB_to_JMh(srcRGB);\n      float3 tonemappedJMh = forwardTonescale(JMh);\n      float3 compressedJMh = compressGamutForward(tonemappedJMh);\n    //   dstRGB = JMh_to_output_RGB(compressedJMh);\n      dstRGB = JMh_to_output_RGB(compressedJMh);\n      // diagnostic = Izazbz_to_JMh(inputIzazbz, 0.31334f, 0);\n\n      // float3 testA = input_RGB_to_JMh(srcRGB);\n      // float3 testB = forwardTonescale(testA);\n      // float3 testC = inverseTonescale(testB);\n      // float3 testD = JMh_to_input_RGB(testC);\n\n      diagnostic =  dstRGB;\n    \}\n\n    dst() = float4(diagnostic.x, diagnostic.y, diagnostic.z, source.w ); \n  \}\n\};\n"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  DRT_CAM_Kernel_encodingIn {{parent.encoding_in}}
  DRT_CAM_Kernel_primariesIn {{parent.primaries_in}}
  DRT_CAM_Kernel_toneScaleMode {{parent.toneScaleMode}}
  DRT_CAM_Kernel_camMode {{parent.camMode}}
  DRT_CAM_Kernel_catType {{parent.cat_type}}
  DRT_CAM_Kernel_discountIlluminant {{parent.discount_illuminant}}
  DRT_CAM_Kernel_referenceLuminance {{parent.reference_luminance}}
  DRT_CAM_Kernel_backgroundLuminance {{parent.background_luminance}}
  DRT_CAM_Kernel_viewingConditions {{parent.viewing_conditions}}
  DRT_CAM_Kernel_applyTonecurve {{applyTonecurve}}
  DRT_CAM_Kernel_sstsLuminance {{parent.ssts_luminance.x} {parent.ssts_luminance.y} {parent.ssts_luminance.z}}
  DRT_CAM_Kernel_applyHighlightDesat {{parent.apply_highlight_desat}}
  DRT_CAM_Kernel_desatHighlights {{parent.desat_highlights}}
  DRT_CAM_Kernel_primariesLimit {{parent.primaries_limit}}
  DRT_CAM_Kernel_applyGamutCompression {{parent.apply_gamut_compression}}
  DRT_CAM_Kernel_cuspMidBlend {{parent.cusp_mid_blend}}
  DRT_CAM_Kernel_focusDistance {{parent.focus_distance}}
  DRT_CAM_Kernel_compressionFuncParams {{parent.compression_params.x} {parent.compression_params.y} {parent.compression_params.z}}
  DRT_CAM_Kernel_smoothCusps {{parent.smooth_cusps}}
  DRT_CAM_Kernel_boundarySolvePrecision {{parent.solve_precision}}
  DRT_CAM_Kernel_inverseSolverIterations {{parent.inverse_solver_iterations}}
  DRT_CAM_Kernel_encodingOut {{parent.encoding_out}}
  DRT_CAM_Kernel_primariesOut {{parent.primaries_out}}
  DRT_CAM_Kernel_clampOutput {{parent.clamp_output}}
  DRT_CAM_Kernel_invert {{parent.invert}}
  DRT_CAM_Kernel_XYZ_to_LMS_ZCAM {
      {{DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler}}
      {{DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler} {DRT_CAM_Blink2.preMatrix.matrix*matrixScaler}}
    }
  DRT_CAM_Kernel_zcam_rho {{"1.7 * 2523.0 / pow(2.0,5.0)"}}
  DRT_CAM_Kernel_Lp {{parent.ssts_luminance.z}}
  DRT_CAM_Kernel_su 2
  DRT_CAM_Kernel_c0 1.2
  DRT_CAM_Kernel_cs {{0.18**(1-DRT_CAM_Kernel_c0)}}
  DRT_CAM_Kernel_c1 1.1
  DRT_CAM_Kernel_p {{DRT_CAM_Kernel_c1*(0.9+0.05*DRT_CAM_Kernel_su)}}
  DRT_CAM_Kernel_w1 {{(0.595*DRT_CAM_Kernel_Lp/10000)**0.931+1.037}}
  DRT_CAM_Kernel_s1 {{DRT_CAM_Kernel_w1*DRT_CAM_Kernel_Lp/100}}
  DRT_CAM_Kernel_ex -0.26
  DRT_CAM_Kernel_eb 0.08
  DRT_CAM_Kernel_e0 {{2**(DRT_CAM_Kernel_ex+DRT_CAM_Kernel_eb*log(DRT_CAM_Kernel_s1)/log(2))}}
  DRT_CAM_Kernel_s0 {{(DRT_CAM_Kernel_s1/DRT_CAM_Kernel_e0)**(1/DRT_CAM_Kernel_c1)}}
  DRT_CAM_Kernel_fl 0.01
  DRT_CAM_Kernel_dch 0.55
  DRT_CAM_Kernel_sat {{max(1,1.125-0.00025*DRT_CAM_Kernel_Lp)}}
  DRT_CAM_Kernel_mmScaleFactor 100
  DRT_CAM_Kernel_n {{ssts_luminance.z}}
  DRT_CAM_Kernel_nr 100
  DRT_CAM_Kernel_g 1.1
  DRT_CAM_Kernel_w 0.84
  DRT_CAM_Kernel_t_1 0.075
  DRT_CAM_Kernel_XYZ_w {95.05 100 108.88}
  DRT_CAM_Kernel_L_A 318.31
  DRT_CAM_Kernel_Y_b 20
  DRT_CAM_Kernel_surround {1 0.69 1}
  rebuild_finalise ""
  name BlinkScript1
  note_font "Bitstream Vera Sans"
  selected true
  xpos -908
  ypos -184
  addUserKnob {20 User}
  addUserKnob {7 matrixScaler R 0 2}
  matrixScaler 0.99415
 }
set N3d724800 [stack 0]
 Clamp {
  minimum_enable false
  maximum {{parent.parent.DRT_CAM_Blink2.ssts_luminance.z/100}}
  name Clamp1
  xpos -908
  ypos -114
  disable {{1-parent.clamp_output}}
 }
 Output {
  name Output1
  xpos -908
  ypos -10
 }
push $N3d724800
 Multiply {
  value 0.01
  name Multiply1
  xpos -757
  ypos -139
 }
push $N3d725000
 Colorspace {
  primary_in ACES
  colorspace_out sRGB
  primary_out DCI-P3
  name Colorspace1
  xpos -632
  ypos -195
 }
push $N3d724800
push $N3d725000
 Viewer {
  inputs 2
  frame_range 1-77
  input_number 1
  gl_buffer_depth half-float
  name Viewer1
  xpos -1063
  ypos -86
 }
end_group
push $N3b410800
push $N3b410800
Viewer {
 inputs 3
 frame 78
 frame_range 1-77
 colour_sample_bbox {0.2223958373 -0.1416666657 0.2229166627 -0.1411458403}
 samplepoints {{0.2223958373 -0.1416666657}
   }
 gl_buffer_depth half-float
 viewerProcess "Raw (ACES)"
 name Viewer3
 xpos 445
 ypos 227
}
push $N59d7ac00
Colorspace {
 primary_in ACES
 colorspace_out sRGB
 primary_out DCI-P3
 name Colorspace6
 xpos 624
 ypos -67
}
push $N3b410800
push $N3b410800
Viewer {
 inputs 3
 frame 78
 frame_range 1-77
 colour_sample_bbox {0.7937499881 0.1177083328 0.7947916389 0.1187499985}
 gl_buffer_depth half-float
 viewerProcess "Raw (ACES)"
 name Viewer2
 xpos 323
 ypos 272
}
