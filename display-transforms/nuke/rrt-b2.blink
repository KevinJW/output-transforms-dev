
kernel rrt_b2 : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image
  Image<eWrite> dst; // the output image

  param:
    bool inverse;

    // Primaries of the Input Image
    // 0: AP0-ACES
    // 1: AP1-ACES
    // 2: sRGB/Rec.709-D65
    // 3: Rec.2020-D65
    // 4: P3-D65
    // 5: P3-DCI
    int primariesIn;

    // Primaries of the Output Image
    // 0: AP0-ACES
    // 1: AP1-ACES
    // 2: sRGB/Rec.709-D65
    // 3: Rec.2020-D65
    // 4: P3-D65
    // 5: P3-DCI
    int primariesOut;

    // Tonescale select

    bool restoreVsOriginal;
    bool useSmartClip;
    // OpenDRT tonescale parameters
    float Lp;
    float su;
    float c0;
    float cs;
    float c1;
    float p;
    float w1;
    float s1;
    float ex;
    float eb;
    float e0;
    float s0;
    float fl;
    float dch;
    float sat;

  local:
    float3x3 XYZ_to_AP0_ACES_matrix;
    float3x3 XYZ_to_RGB_input;
    float3x3 XYZ_to_RGB_output;
    float3x3 XYZ_2_RENDERING_PRI_MAT;
    float3x3 XYZ_2_DISPLAY_PRI_MAT;
    float3x3 D60_2_D65_CAT;
    float HALF_MIN;
    float HALF_MAX;
    // constants
  void define()
  {


  }




  // get the y value of f(x) where the fuction is defined as a line between two points
  // the two points as passed as an array [a.x, a.y, b.x, b.y]
  float lerp1D( float4 table, float x)
  {
    float m = (table.w-table.y) / (table.z-table.x);
    float c = table.y - (m*table.x);
    float y = x*m+c;
    return y;
  }


  // "safe" power function to avoid NANs or INFs when taking a fractional power of a negative base
  // this one initially retured -pow(abs(b), e) for negative b
  // but this ended up producing undesirable results in some cases
  // so now it just returns 0.0 instead
  float spow( float base, float exponent )
  {
    if(base < 0.0f && exponent != floor(exponent) )
    {
      return 0.0f;
    }
    else
    {
     return pow(base, exponent); 
    }
  }


  // clamp the components of a 3D vector between a min & max value
  float3 clamp3(float3 v, float min, float max)
  {
    v.x = clamp(v.x, min, max);
    v.y = clamp(v.y, min, max);
    v.z = clamp(v.z, min, max);
    return v;
  }

  // multiplies a 3D vector with a 3x3 matrix
  float3 vector_dot( float3x3 m, float3 v)
  {
    float3 r = 1.0f;
    for(int c = 0; c<3; c++)
    {
      r[c] = m[c][0]*v.x + m[c][1]*v.y + m[c][2]*v.z;
    }

    return r;
  }

  int3 order3( float r, float g, float b )
  {  
    // Determine sort order, highest to lowest
    // float r = inRGB.x;
    // float g = inRGB.y;
    // float b = inRGB.z;

     if (r > g) {
        if (g > b) {                    // r g b, hue [0,60]
            int3 order = int3(0, 1, 2);
           return order;
        } else {
           if (r > b) {                 // r b g, hue [300,360]
            int3 order = int3(0, 2, 1);
              return order;
           } else {                     // b r g, hue [240,300]
            int3 order = int3(2, 0, 1);
              return order;
           }
        }
     }
     else {
        if (r > b) {                    // g r b, hue [60,120]
            int3 order = int3(1, 0, 2);
           return order;
        } else {
           if (g > b) {                 // g b r, hue [120,180]
            int3 order = int3(1, 2, 0);
              return order;
           } else {                     // b g r, hue [180,240]
            int3 order = int3(2, 1, 0);
              return order;
           }
        }
     }
  }

  // Modify the hue of post_tone to match pre_tone
   float3 restore_hue_dw3( float3 pre_tone, float3 post_tone)
        {
        int3 inds = order3( pre_tone[0], pre_tone[1], pre_tone[2]);

        float orig_chroma = pre_tone[ inds[0]] - pre_tone[ inds[2]]; 

        float hue_factor = ( pre_tone[ inds[1] ] - pre_tone[ inds[2] ]) / orig_chroma;

        if ( orig_chroma == 0.) hue_factor = 0.;

        float new_chroma = post_tone[ inds[0] ] - post_tone[ inds[2] ];

        float3 out;
        out[ inds[ 0] ] = post_tone[ inds[0] ];
        out[ inds[ 1] ] = hue_factor * new_chroma + post_tone[ inds[2] ];
        out[ inds[ 2] ] = post_tone[ inds[2] ];

        return out;
    }

  float forwardMmTonescale(float x)
  {
      float tc = 0.0f;
      if (x<0.18)
      {
          tc = cs*spow(x,c0);
      }
      else
      {
          tc = c0*(x-0.18)+0.18;
      }
      
      float ts = s1*spow((tc/(s0+tc)),p);
      float tf = ts*ts/(ts+fl);
      float ccf = spow(s0/(x+s0),dch)*sat;

      return tf;
  }

  float inverseMmTonescale(float x)
  {

      float tf = (x+sqrt(x*(4*fl+x)))/2;
      float ts = s0/(spow((s1/tf),(1/p))-1);
      float tc = 0.0f;
      if (ts<0.18)
      {
          tc = spow((ts/cs),(1/c0));
      }
      else
      {
          tc = (ts-0.18)/c0+0.18;
      }
      float ccf = spow(s0/(tc+s0),dch)*sat;

      return tc;
  }


  void init()
  {

    HALF_MIN = 0.0000000596046448f;
    HALF_MAX = 65504.0f;

    float XYZ_to_AP0_ACES_matrix_data[]=
    {
       1.0498110175f,  0.0000000000f, -0.0000974845f,
      -0.4959030231f,  1.3733130458f,  0.0982400361f,
       0.0000000000f,  0.0000000000f,  0.9912520182f
    };

    float XYZ_to_AP1_ACES_matrix_data[]=
    {
       1.6410233797f, -0.3248032942f, -0.2364246952f,
      -0.6636628587f,  1.6153315917f,  0.0167563477f,
       0.0117218943f, -0.0082844420f,  0.9883948585f,
    };

    float XYZ_to_Rec709_D65_matrix_data[]=
    {
       3.2409699419f, -1.5373831776f, -0.4986107603f,
      -0.9692436363f,  1.8759675015f,  0.0415550574f,
       0.0556300797f, -0.2039769589f,  1.0569715142f,
    };

    float XYZ_to_Rec2020_D65_matrix_data[]=
    {
       1.7166511880f, -0.3556707838f, -0.2533662814f,
      -0.6666843518f,  1.6164812366f,  0.0157685458f,
       0.0176398574f, -0.0427706133f,  0.9421031212f,
    };

    float XYZ_to_P3_D65_matrix_data[]=
    {
       2.4934969119f, -0.9313836179f, -0.4027107845f,
      -0.8294889696f,  1.7626640603f,  0.0236246858f,
       0.0358458302f, -0.0761723893f,  0.9568845240f,
    };

    float XYZ_to_P3_DCI_matrix_data[]=
    {
       2.7253940305f, -1.0180030062f, -0.4401631952f,
      -0.7951680258f,  1.6897320548f,  0.0226471906f,
       0.0412418914f, -0.0876390192f,  1.1009293786f
    };
  
    float XYZ_to_ScottsRenderPrimsA_data[]=
    {
        1.06474f, 0.035824f, -0.0496937f,
        -0.476653f, 1.3328f, 0.120238f,
        0.0857931f, 0.0623069f, 0.848677f,
    };
  
    float D60_2_D65_CAT_data[]=
    {
        0.987239f, -0.00610704f, 0.0159267f,
        -0.00759181f, 1.00186f, 0.00532147f,
        0.003067f, -0.00508641f, 1.08154f,
    };
    
    float identity_matrix_data[]={ 1.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 1.0f };

    // populate the input primaries matrix
    if( primariesIn == 0 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_AP0_ACES_matrix_data);
    }
    else if( primariesIn == 1 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_AP1_ACES_matrix_data);
    }
    else if( primariesIn == 2 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_Rec709_D65_matrix_data);
    }
    else if( primariesIn == 3 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_Rec2020_D65_matrix_data);
    }
    else if( primariesIn == 4 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_P3_D65_matrix_data);
    }
    else if( primariesIn == 5 )
    {
        XYZ_to_RGB_input.setArray(XYZ_to_P3_DCI_matrix_data);
    }
    else
    {
        XYZ_to_RGB_input.setArray(identity_matrix_data);
    }

    // populate the output primaries matrix
    if( primariesOut == 0 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_AP0_ACES_matrix_data);
    }
    else if( primariesOut == 1 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_AP1_ACES_matrix_data);
    }
    else if( primariesOut == 2 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_Rec709_D65_matrix_data);
    }
    else if( primariesOut == 3 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_Rec2020_D65_matrix_data);
    }
    else if( primariesOut == 4 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_P3_D65_matrix_data);
    }
    else if( primariesOut == 5 )
    {
        XYZ_to_RGB_output.setArray(XYZ_to_P3_DCI_matrix_data);
    }
    else
    {
        XYZ_to_RGB_output.setArray(identity_matrix_data);
    }

    XYZ_to_AP0_ACES_matrix.setArray(XYZ_to_AP0_ACES_matrix_data);
    XYZ_2_RENDERING_PRI_MAT.setArray(XYZ_to_ScottsRenderPrimsA_data);
    XYZ_2_DISPLAY_PRI_MAT.setArray(XYZ_to_Rec709_D65_matrix_data);
    D60_2_D65_CAT.setArray(D60_2_D65_CAT_data);
  }


  void process()
  {
    SampleType(src) source = src();
    float3 srcRGB(source.x, source.y, source.z);
    float3 mappedVals;
    
    float3 aces(source.x, source.y, source.z);
    
    float3 rgbPre  = vector_dot(XYZ_to_RGB_input.invert(), aces);
    rgbPre  = vector_dot(XYZ_2_RENDERING_PRI_MAT, rgbPre);
    float3 rgbPre_clamped = clamp3(rgbPre, 0.0f, HALF_MAX);

    // Apply the tone scale
	  float3 rgbPost;
	  rgbPost.x = forwardMmTonescale(rgbPre_clamped.x);
      rgbPost.y = forwardMmTonescale(rgbPre_clamped.y);
      rgbPost.z = forwardMmTonescale(rgbPre_clamped.z);

      rgbPost = restore_hue_dw3( rgbPre, rgbPost);

    // Switch to see if there is any effect of doing the ratio-restore based on the
    // pre-clamped or clamped RGB input.
    if (restoreVsOriginal) { // Restore the hue to the pre-tonescale hue
        rgbPost = restore_hue_dw3( rgbPre, rgbPost);
    } else { // otherwise, restore using the RGB rendering space values clamped
        // Restore the hue to the pre-tonescale hue
        rgbPost = restore_hue_dw3( rgbPre_clamped, rgbPost);	  
    }
    
    // --- ODT ---
    // Convert from rendering primaries RGB encoding to display encoding primaries
    float3 XYZ = vector_dot( XYZ_2_RENDERING_PRI_MAT.invert(),rgbPost);

    // Apply CAT from ACES white point to assumed observer adapted white point
    XYZ = vector_dot( D60_2_D65_CAT, XYZ); 

    // CIE XYZ to display primaries
    float3 lin_displayRGB = vector_dot( XYZ_to_RGB_output, XYZ);

    float3 lin_displayRGB_clamped = clamp3( lin_displayRGB, 0.0, Lp/100.0f);
    // This is a useful toggle to see impact on how saturated OOG values clamp to the 
    // display gamut boundary triangle.
    if (useSmartClip) {
        lin_displayRGB = restore_hue_dw3( lin_displayRGB, lin_displayRGB_clamped); 
    } else {
        lin_displayRGB = lin_displayRGB_clamped;
    }

    float3 dstRGB;
    dstRGB = lin_displayRGB;

    dst() = float4(dstRGB.x, dstRGB.y, dstRGB.z, source.w); 
  }
};
